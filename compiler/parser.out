Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> init start
Rule 2     init -> <empty>
Rule 3     start -> global_variables_declaration functions_definition entry_point_definition
Rule 4     start -> global_variables_declaration entry_point_definition
Rule 5     start -> functions_definition entry_point_definition
Rule 6     start -> entry_point_definition
Rule 7     global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration
Rule 8     parsed_global_scope -> <empty>
Rule 9     functions_definition -> functions_definition single_function_definition
Rule 10    functions_definition -> single_function_definition
Rule 11    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 12    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
Rule 13    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 14    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
Rule 15    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 16    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
Rule 17    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 18    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
Rule 19    parsed_function_id -> <empty>
Rule 20    parsed_function_return_type -> <empty>
Rule 21    parsed_function_void_return_type -> <empty>
Rule 22    function_definition_params -> function_definition_params COMMA single_function_definition_param
Rule 23    function_definition_params -> single_function_definition_param
Rule 24    single_function_definition_param -> type ID
Rule 25    entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 26    entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block
Rule 27    parsed_main_id -> <empty>
Rule 28    local_variables_declaration -> LOCAL variables_declaration
Rule 29    variables_declaration -> VARIABLES COLON distinct_type_variables_declaration
Rule 30    distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration
Rule 31    distinct_type_variables_declaration -> shared_type_variables_declaration
Rule 32    shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI
Rule 33    parsed_type -> <empty>
Rule 34    shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration
Rule 35    shared_type_variables_declaration_list -> single_variable_declaration
Rule 36    single_variable_declaration -> ID dim_definition dim_definition
Rule 37    single_variable_declaration -> ID dim_definition
Rule 38    single_variable_declaration -> ID
Rule 39    dim_definition -> LBRACKET CONST_INT RBRACKET
Rule 40    instruction_block -> LBRACE statements RBRACE
Rule 41    instruction_block -> LBRACE RBRACE
Rule 42    statements -> statements single_statement
Rule 43    statements -> single_statement
Rule 44    single_statement -> assignment
Rule 45    single_statement -> function_call
Rule 46    single_statement -> read
Rule 47    single_statement -> print
Rule 48    single_statement -> conditional
Rule 49    single_statement -> loop
Rule 50    single_statement -> return
Rule 51    assignment -> variable_access ASGMT parsed_asgmt expr SEMI
Rule 52    assignment -> variable_access ASGMT parsed_asgmt read
Rule 53    parsed_asgmt -> <empty>
Rule 54    variable_access -> ID parsed_id_variable_access dims_access
Rule 55    parsed_id_variable_access -> <empty>
Rule 56    dims_access -> single_dim_access single_dim_access
Rule 57    dims_access -> single_dim_access
Rule 58    dims_access -> empty
Rule 59    single_dim_access -> LBRACKET expr RBRACKET
Rule 60    function_call -> ID LPAREN function_call_params RPAREN SEMI
Rule 61    function_call -> ID LPAREN RPAREN SEMI
Rule 62    function_call_params -> function_call_params COMMA single_function_call_param
Rule 63    function_call_params -> single_function_call_param
Rule 64    single_function_call_param -> expr
Rule 65    read -> READ LPAREN RPAREN SEMI
Rule 66    print -> PRINT LPAREN print_params RPAREN SEMI
Rule 67    print -> PRINT LPAREN RPAREN SEMI
Rule 68    print_params -> print_params COMMA single_print_param
Rule 69    print_params -> single_print_param
Rule 70    single_print_param -> expr
Rule 71    single_print_param -> CONST_STRING
Rule 72    conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block
Rule 73    conditional -> IF LPAREN expr RPAREN instruction_block
Rule 74    loop -> while
Rule 75    loop -> for
Rule 76    while -> WHILE LPAREN expr RPAREN instruction_block
Rule 77    for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
Rule 78    for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block
Rule 79    return -> RETURN expr SEMI
Rule 80    return -> RETURN SEMI
Rule 81    expr -> expr OR and_expr
Rule 82    expr -> and_expr
Rule 83    and_expr -> equality_expr AND equality_expr
Rule 84    and_expr -> equality_expr
Rule 85    equality_expr -> relational_expr EQUAL relational_expr
Rule 86    equality_expr -> relational_expr NEQUAL relational_expr
Rule 87    equality_expr -> relational_expr
Rule 88    relational_expr -> additive_expr LTHAN_EQUAL additive_expr
Rule 89    relational_expr -> additive_expr LTHAN additive_expr
Rule 90    relational_expr -> additive_expr GTHAN_EQUAL additive_expr
Rule 91    relational_expr -> additive_expr GTHAN additive_expr
Rule 92    relational_expr -> additive_expr
Rule 93    additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr
Rule 94    parsed_plus -> <empty>
Rule 95    additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr
Rule 96    parsed_minus -> <empty>
Rule 97    additive_expr -> multiplicative_expr
Rule 98    multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr
Rule 99    parsed_times -> <empty>
Rule 100   multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr
Rule 101   parsed_divide -> <empty>
Rule 102   multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr
Rule 103   parsed_modulo -> <empty>
Rule 104   multiplicative_expr -> unary_expr
Rule 105   unary_expr -> MINUS postfix_expr
Rule 106   unary_expr -> PLUS postfix_expr
Rule 107   unary_expr -> NOT postfix_expr
Rule 108   unary_expr -> postfix_expr
Rule 109   postfix_expr -> LPAREN expr RPAREN
Rule 110   postfix_expr -> variable_access
Rule 111   postfix_expr -> function_call
Rule 112   postfix_expr -> constant
Rule 113   constant -> CONST_INT
Rule 114   constant -> CONST_REAL
Rule 115   constant -> CONST_CHAR
Rule 116   constant -> constant_bool
Rule 117   constant_bool -> TRUE
Rule 118   constant_bool -> FALSE
Rule 119   type -> INT
Rule 120   type -> REAL
Rule 121   type -> CHAR
Rule 122   type -> BOOL
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 83
ASGMT                : 51 52 77 78
BOOL                 : 122
CHAR                 : 121
COLON                : 29 77 77 78
COMMA                : 22 34 62 68
CONST_CHAR           : 115
CONST_INT            : 39 77 77 77 78 78 113
CONST_REAL           : 114
CONST_STRING         : 71
DIVIDE               : 100
ELSE                 : 72
EQUAL                : 85
FALSE                : 118
FROM                 : 77 78
FUNCTION             : 11 12 13 14 15 16 17 18
GLOBAL               : 7
GTHAN                : 91
GTHAN_EQUAL          : 90
ID                   : 11 12 13 14 15 16 17 18 24 36 37 38 54 60 61 77 78
IF                   : 72 73
INT                  : 119
LBRACE               : 40 41
LBRACKET             : 39 59
LOCAL                : 28
LPAREN               : 11 12 13 14 15 16 17 18 25 26 60 61 65 66 67 72 73 76 77 78 109
LTHAN                : 89
LTHAN_EQUAL          : 88
MINUS                : 95 105
MODULO               : 102
NEQUAL               : 86
NOT                  : 107
OR                   : 81
PLUS                 : 93 106
PRINT                : 66 67
RBRACE               : 40 41
RBRACKET             : 39 59
READ                 : 65
REAL                 : 120
RETURN               : 79 80
RPAREN               : 11 12 13 14 15 16 17 18 25 26 60 61 65 66 67 72 73 76 77 78 109
SEMI                 : 32 51 60 61 65 66 67 79 80
START                : 25 26
TIMES                : 98
TRUE                 : 117
VARIABLES            : 29
VOID                 : 15 16 17 18
WHILE                : 76
error                : 

Nonterminals, with rules where they appear

additive_expr        : 88 88 89 89 90 90 91 91 92 93 95
and_expr             : 81 82
assignment           : 44
conditional          : 48
constant             : 112
constant_bool        : 116
dim_definition       : 36 36 37
dims_access          : 54
distinct_type_variables_declaration : 29 30
empty                : 58
entry_point_definition : 3 4 5 6
equality_expr        : 83 83 84
expr                 : 51 59 64 70 72 73 76 79 81 109
for                  : 75
function_call        : 45 111
function_call_params : 60 62
function_definition_params : 11 12 15 16 22
functions_definition : 3 5 9
global_variables_declaration : 3 4
init                 : 1
instruction_block    : 11 12 13 14 15 16 17 18 25 26 72 72 73 76 77 78
local_variables_declaration : 11 13 15 17 25
loop                 : 49
multiplicative_expr  : 93 95 97 98 100 102
parsed_asgmt         : 51 52
parsed_divide        : 100
parsed_function_id   : 11 12 13 14 15 16 17 18
parsed_function_return_type : 11 12 13 14
parsed_function_void_return_type : 15 16 17 18
parsed_global_scope  : 7
parsed_id_variable_access : 54
parsed_main_id       : 25 26
parsed_minus         : 95
parsed_modulo        : 102
parsed_plus          : 93
parsed_times         : 98
parsed_type          : 32
postfix_expr         : 105 106 107 108
print                : 47
print_params         : 66 68
program              : 0
read                 : 46 52
relational_expr      : 85 85 86 86 87
return               : 50
shared_type_variables_declaration : 30 31
shared_type_variables_declaration_list : 32 34
single_dim_access    : 56 56 57
single_function_call_param : 62 63
single_function_definition : 9 10
single_function_definition_param : 22 23
single_print_param   : 68 69
single_statement     : 42 43
single_variable_declaration : 34 35
start                : 1
statements           : 40 42
type                 : 11 12 13 14 24 32
unary_expr           : 98 100 102 104
variable_access      : 51 52 110
variables_declaration : 7 28
while                : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init start
    (2) init -> .

    GLOBAL          reduce using rule 2 (init -> .)
    START           reduce using rule 2 (init -> .)
    FUNCTION        reduce using rule 2 (init -> .)

    program                        shift and go to state 1
    init                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> init . start
    (3) start -> . global_variables_declaration functions_definition entry_point_definition
    (4) start -> . global_variables_declaration entry_point_definition
    (5) start -> . functions_definition entry_point_definition
    (6) start -> . entry_point_definition
    (7) global_variables_declaration -> . GLOBAL parsed_global_scope variables_declaration
    (9) functions_definition -> . functions_definition single_function_definition
    (10) functions_definition -> . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    GLOBAL          shift and go to state 7
    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    start                          shift and go to state 3
    global_variables_declaration   shift and go to state 4
    functions_definition           shift and go to state 5
    entry_point_definition         shift and go to state 6
    single_function_definition     shift and go to state 8

state 3

    (1) program -> init start .

    $end            reduce using rule 1 (program -> init start .)


state 4

    (3) start -> global_variables_declaration . functions_definition entry_point_definition
    (4) start -> global_variables_declaration . entry_point_definition
    (9) functions_definition -> . functions_definition single_function_definition
    (10) functions_definition -> . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    functions_definition           shift and go to state 11
    entry_point_definition         shift and go to state 12
    single_function_definition     shift and go to state 8

state 5

    (5) start -> functions_definition . entry_point_definition
    (9) functions_definition -> functions_definition . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    entry_point_definition         shift and go to state 13
    single_function_definition     shift and go to state 14

state 6

    (6) start -> entry_point_definition .

    $end            reduce using rule 6 (start -> entry_point_definition .)


state 7

    (7) global_variables_declaration -> GLOBAL . parsed_global_scope variables_declaration
    (8) parsed_global_scope -> .

    VARIABLES       reduce using rule 8 (parsed_global_scope -> .)

    parsed_global_scope            shift and go to state 15

state 8

    (10) functions_definition -> single_function_definition .

    START           reduce using rule 10 (functions_definition -> single_function_definition .)
    FUNCTION        reduce using rule 10 (functions_definition -> single_function_definition .)


state 9

    (25) entry_point_definition -> START . parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START . parsed_main_id LPAREN RPAREN instruction_block
    (27) parsed_main_id -> .

    LPAREN          reduce using rule 27 (parsed_main_id -> .)

    parsed_main_id                 shift and go to state 16

state 10

    (11) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (119) type -> . INT
    (120) type -> . REAL
    (121) type -> . CHAR
    (122) type -> . BOOL

    VOID            shift and go to state 18
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 17

state 11

    (3) start -> global_variables_declaration functions_definition . entry_point_definition
    (9) functions_definition -> functions_definition . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    entry_point_definition         shift and go to state 23
    single_function_definition     shift and go to state 14

state 12

    (4) start -> global_variables_declaration entry_point_definition .

    $end            reduce using rule 4 (start -> global_variables_declaration entry_point_definition .)


state 13

    (5) start -> functions_definition entry_point_definition .

    $end            reduce using rule 5 (start -> functions_definition entry_point_definition .)


state 14

    (9) functions_definition -> functions_definition single_function_definition .

    START           reduce using rule 9 (functions_definition -> functions_definition single_function_definition .)
    FUNCTION        reduce using rule 9 (functions_definition -> functions_definition single_function_definition .)


state 15

    (7) global_variables_declaration -> GLOBAL parsed_global_scope . variables_declaration
    (29) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 25

    variables_declaration          shift and go to state 24

state 16

    (25) entry_point_definition -> START parsed_main_id . LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 26


state 17

    (11) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (20) parsed_function_return_type -> .

    ID              reduce using rule 20 (parsed_function_return_type -> .)

    parsed_function_return_type    shift and go to state 27

state 18

    (15) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (21) parsed_function_void_return_type -> .

    ID              reduce using rule 21 (parsed_function_void_return_type -> .)

    parsed_function_void_return_type shift and go to state 28

state 19

    (119) type -> INT .

    ID              reduce using rule 119 (type -> INT .)


state 20

    (120) type -> REAL .

    ID              reduce using rule 120 (type -> REAL .)


state 21

    (121) type -> CHAR .

    ID              reduce using rule 121 (type -> CHAR .)


state 22

    (122) type -> BOOL .

    ID              reduce using rule 122 (type -> BOOL .)


state 23

    (3) start -> global_variables_declaration functions_definition entry_point_definition .

    $end            reduce using rule 3 (start -> global_variables_declaration functions_definition entry_point_definition .)


state 24

    (7) global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .

    START           reduce using rule 7 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)
    FUNCTION        reduce using rule 7 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)


state 25

    (29) variables_declaration -> VARIABLES . COLON distinct_type_variables_declaration

    COLON           shift and go to state 29


state 26

    (25) entry_point_definition -> START parsed_main_id LPAREN . RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id LPAREN . RPAREN instruction_block

    RPAREN          shift and go to state 30


state 27

    (11) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN RPAREN instruction_block

    ID              shift and go to state 31


state 28

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN RPAREN instruction_block

    ID              shift and go to state 32


state 29

    (29) variables_declaration -> VARIABLES COLON . distinct_type_variables_declaration
    (30) distinct_type_variables_declaration -> . distinct_type_variables_declaration shared_type_variables_declaration
    (31) distinct_type_variables_declaration -> . shared_type_variables_declaration
    (32) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (119) type -> . INT
    (120) type -> . REAL
    (121) type -> . CHAR
    (122) type -> . BOOL

    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    distinct_type_variables_declaration shift and go to state 33
    shared_type_variables_declaration shift and go to state 34
    type                           shift and go to state 35

state 30

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN . local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 36
    instruction_block              shift and go to state 37

state 31

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN RPAREN instruction_block
    (19) parsed_function_id -> .

    LPAREN          reduce using rule 19 (parsed_function_id -> .)

    parsed_function_id             shift and go to state 40

state 32

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN RPAREN instruction_block
    (19) parsed_function_id -> .

    LPAREN          reduce using rule 19 (parsed_function_id -> .)

    parsed_function_id             shift and go to state 41

state 33

    (29) variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .
    (30) distinct_type_variables_declaration -> distinct_type_variables_declaration . shared_type_variables_declaration
    (32) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (119) type -> . INT
    (120) type -> . REAL
    (121) type -> . CHAR
    (122) type -> . BOOL

    START           reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    FUNCTION        reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    LBRACE          reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    shared_type_variables_declaration shift and go to state 42
    type                           shift and go to state 35

state 34

    (31) distinct_type_variables_declaration -> shared_type_variables_declaration .

    INT             reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    REAL            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    CHAR            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    BOOL            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    START           reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    FUNCTION        reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    LBRACE          reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)


state 35

    (32) shared_type_variables_declaration -> type . parsed_type shared_type_variables_declaration_list SEMI
    (33) parsed_type -> .

    ID              reduce using rule 33 (parsed_type -> .)

    parsed_type                    shift and go to state 43

state 36

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 44

state 37

    (26) entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block .

    $end            reduce using rule 26 (entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block .)


state 38

    (28) local_variables_declaration -> LOCAL . variables_declaration
    (29) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 25

    variables_declaration          shift and go to state 45

state 39

    (40) instruction_block -> LBRACE . statements RBRACE
    (41) instruction_block -> LBRACE . RBRACE
    (42) statements -> . statements single_statement
    (43) statements -> . single_statement
    (44) single_statement -> . assignment
    (45) single_statement -> . function_call
    (46) single_statement -> . read
    (47) single_statement -> . print
    (48) single_statement -> . conditional
    (49) single_statement -> . loop
    (50) single_statement -> . return
    (51) assignment -> . variable_access ASGMT parsed_asgmt expr SEMI
    (52) assignment -> . variable_access ASGMT parsed_asgmt read
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (65) read -> . READ LPAREN RPAREN SEMI
    (66) print -> . PRINT LPAREN print_params RPAREN SEMI
    (67) print -> . PRINT LPAREN RPAREN SEMI
    (72) conditional -> . IF LPAREN expr RPAREN instruction_block ELSE instruction_block
    (73) conditional -> . IF LPAREN expr RPAREN instruction_block
    (74) loop -> . while
    (75) loop -> . for
    (79) return -> . RETURN expr SEMI
    (80) return -> . RETURN SEMI
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (76) while -> . WHILE LPAREN expr RPAREN instruction_block
    (77) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    RBRACE          shift and go to state 47
    ID              shift and go to state 57
    READ            shift and go to state 58
    PRINT           shift and go to state 59
    IF              shift and go to state 60
    RETURN          shift and go to state 63
    WHILE           shift and go to state 64
    FROM            shift and go to state 65

    statements                     shift and go to state 46
    single_statement               shift and go to state 48
    assignment                     shift and go to state 49
    function_call                  shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    conditional                    shift and go to state 53
    loop                           shift and go to state 54
    return                         shift and go to state 55
    variable_access                shift and go to state 56
    while                          shift and go to state 61
    for                            shift and go to state 62

state 40

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 66


state 41

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 67


state 42

    (30) distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .

    INT             reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    REAL            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    CHAR            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    BOOL            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    START           reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    FUNCTION        reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    LBRACE          reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)


state 43

    (32) shared_type_variables_declaration -> type parsed_type . shared_type_variables_declaration_list SEMI
    (34) shared_type_variables_declaration_list -> . shared_type_variables_declaration_list COMMA single_variable_declaration
    (35) shared_type_variables_declaration_list -> . single_variable_declaration
    (36) single_variable_declaration -> . ID dim_definition dim_definition
    (37) single_variable_declaration -> . ID dim_definition
    (38) single_variable_declaration -> . ID

    ID              shift and go to state 70

    shared_type_variables_declaration_list shift and go to state 68
    single_variable_declaration    shift and go to state 69

state 44

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .

    $end            reduce using rule 25 (entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 45

    (28) local_variables_declaration -> LOCAL variables_declaration .

    LBRACE          reduce using rule 28 (local_variables_declaration -> LOCAL variables_declaration .)


state 46

    (40) instruction_block -> LBRACE statements . RBRACE
    (42) statements -> statements . single_statement
    (44) single_statement -> . assignment
    (45) single_statement -> . function_call
    (46) single_statement -> . read
    (47) single_statement -> . print
    (48) single_statement -> . conditional
    (49) single_statement -> . loop
    (50) single_statement -> . return
    (51) assignment -> . variable_access ASGMT parsed_asgmt expr SEMI
    (52) assignment -> . variable_access ASGMT parsed_asgmt read
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (65) read -> . READ LPAREN RPAREN SEMI
    (66) print -> . PRINT LPAREN print_params RPAREN SEMI
    (67) print -> . PRINT LPAREN RPAREN SEMI
    (72) conditional -> . IF LPAREN expr RPAREN instruction_block ELSE instruction_block
    (73) conditional -> . IF LPAREN expr RPAREN instruction_block
    (74) loop -> . while
    (75) loop -> . for
    (79) return -> . RETURN expr SEMI
    (80) return -> . RETURN SEMI
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (76) while -> . WHILE LPAREN expr RPAREN instruction_block
    (77) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    RBRACE          shift and go to state 71
    ID              shift and go to state 57
    READ            shift and go to state 58
    PRINT           shift and go to state 59
    IF              shift and go to state 60
    RETURN          shift and go to state 63
    WHILE           shift and go to state 64
    FROM            shift and go to state 65

    single_statement               shift and go to state 72
    assignment                     shift and go to state 49
    function_call                  shift and go to state 50
    read                           shift and go to state 51
    print                          shift and go to state 52
    conditional                    shift and go to state 53
    loop                           shift and go to state 54
    return                         shift and go to state 55
    variable_access                shift and go to state 56
    while                          shift and go to state 61
    for                            shift and go to state 62

state 47

    (41) instruction_block -> LBRACE RBRACE .

    $end            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    START           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    ELSE            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    ID              reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    READ            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    PRINT           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    IF              reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    RETURN          reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    WHILE           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    FROM            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)


state 48

    (43) statements -> single_statement .

    RBRACE          reduce using rule 43 (statements -> single_statement .)
    ID              reduce using rule 43 (statements -> single_statement .)
    READ            reduce using rule 43 (statements -> single_statement .)
    PRINT           reduce using rule 43 (statements -> single_statement .)
    IF              reduce using rule 43 (statements -> single_statement .)
    RETURN          reduce using rule 43 (statements -> single_statement .)
    WHILE           reduce using rule 43 (statements -> single_statement .)
    FROM            reduce using rule 43 (statements -> single_statement .)


state 49

    (44) single_statement -> assignment .

    RBRACE          reduce using rule 44 (single_statement -> assignment .)
    ID              reduce using rule 44 (single_statement -> assignment .)
    READ            reduce using rule 44 (single_statement -> assignment .)
    PRINT           reduce using rule 44 (single_statement -> assignment .)
    IF              reduce using rule 44 (single_statement -> assignment .)
    RETURN          reduce using rule 44 (single_statement -> assignment .)
    WHILE           reduce using rule 44 (single_statement -> assignment .)
    FROM            reduce using rule 44 (single_statement -> assignment .)


state 50

    (45) single_statement -> function_call .

    RBRACE          reduce using rule 45 (single_statement -> function_call .)
    ID              reduce using rule 45 (single_statement -> function_call .)
    READ            reduce using rule 45 (single_statement -> function_call .)
    PRINT           reduce using rule 45 (single_statement -> function_call .)
    IF              reduce using rule 45 (single_statement -> function_call .)
    RETURN          reduce using rule 45 (single_statement -> function_call .)
    WHILE           reduce using rule 45 (single_statement -> function_call .)
    FROM            reduce using rule 45 (single_statement -> function_call .)


state 51

    (46) single_statement -> read .

    RBRACE          reduce using rule 46 (single_statement -> read .)
    ID              reduce using rule 46 (single_statement -> read .)
    READ            reduce using rule 46 (single_statement -> read .)
    PRINT           reduce using rule 46 (single_statement -> read .)
    IF              reduce using rule 46 (single_statement -> read .)
    RETURN          reduce using rule 46 (single_statement -> read .)
    WHILE           reduce using rule 46 (single_statement -> read .)
    FROM            reduce using rule 46 (single_statement -> read .)


state 52

    (47) single_statement -> print .

    RBRACE          reduce using rule 47 (single_statement -> print .)
    ID              reduce using rule 47 (single_statement -> print .)
    READ            reduce using rule 47 (single_statement -> print .)
    PRINT           reduce using rule 47 (single_statement -> print .)
    IF              reduce using rule 47 (single_statement -> print .)
    RETURN          reduce using rule 47 (single_statement -> print .)
    WHILE           reduce using rule 47 (single_statement -> print .)
    FROM            reduce using rule 47 (single_statement -> print .)


state 53

    (48) single_statement -> conditional .

    RBRACE          reduce using rule 48 (single_statement -> conditional .)
    ID              reduce using rule 48 (single_statement -> conditional .)
    READ            reduce using rule 48 (single_statement -> conditional .)
    PRINT           reduce using rule 48 (single_statement -> conditional .)
    IF              reduce using rule 48 (single_statement -> conditional .)
    RETURN          reduce using rule 48 (single_statement -> conditional .)
    WHILE           reduce using rule 48 (single_statement -> conditional .)
    FROM            reduce using rule 48 (single_statement -> conditional .)


state 54

    (49) single_statement -> loop .

    RBRACE          reduce using rule 49 (single_statement -> loop .)
    ID              reduce using rule 49 (single_statement -> loop .)
    READ            reduce using rule 49 (single_statement -> loop .)
    PRINT           reduce using rule 49 (single_statement -> loop .)
    IF              reduce using rule 49 (single_statement -> loop .)
    RETURN          reduce using rule 49 (single_statement -> loop .)
    WHILE           reduce using rule 49 (single_statement -> loop .)
    FROM            reduce using rule 49 (single_statement -> loop .)


state 55

    (50) single_statement -> return .

    RBRACE          reduce using rule 50 (single_statement -> return .)
    ID              reduce using rule 50 (single_statement -> return .)
    READ            reduce using rule 50 (single_statement -> return .)
    PRINT           reduce using rule 50 (single_statement -> return .)
    IF              reduce using rule 50 (single_statement -> return .)
    RETURN          reduce using rule 50 (single_statement -> return .)
    WHILE           reduce using rule 50 (single_statement -> return .)
    FROM            reduce using rule 50 (single_statement -> return .)


state 56

    (51) assignment -> variable_access . ASGMT parsed_asgmt expr SEMI
    (52) assignment -> variable_access . ASGMT parsed_asgmt read

    ASGMT           shift and go to state 73


state 57

    (60) function_call -> ID . LPAREN function_call_params RPAREN SEMI
    (61) function_call -> ID . LPAREN RPAREN SEMI
    (54) variable_access -> ID . parsed_id_variable_access dims_access
    (55) parsed_id_variable_access -> .

    LPAREN          shift and go to state 74
    LBRACKET        reduce using rule 55 (parsed_id_variable_access -> .)
    ASGMT           reduce using rule 55 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 75

state 58

    (65) read -> READ . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 76


state 59

    (66) print -> PRINT . LPAREN print_params RPAREN SEMI
    (67) print -> PRINT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 77


state 60

    (72) conditional -> IF . LPAREN expr RPAREN instruction_block ELSE instruction_block
    (73) conditional -> IF . LPAREN expr RPAREN instruction_block

    LPAREN          shift and go to state 78


state 61

    (74) loop -> while .

    RBRACE          reduce using rule 74 (loop -> while .)
    ID              reduce using rule 74 (loop -> while .)
    READ            reduce using rule 74 (loop -> while .)
    PRINT           reduce using rule 74 (loop -> while .)
    IF              reduce using rule 74 (loop -> while .)
    RETURN          reduce using rule 74 (loop -> while .)
    WHILE           reduce using rule 74 (loop -> while .)
    FROM            reduce using rule 74 (loop -> while .)


state 62

    (75) loop -> for .

    RBRACE          reduce using rule 75 (loop -> for .)
    ID              reduce using rule 75 (loop -> for .)
    READ            reduce using rule 75 (loop -> for .)
    PRINT           reduce using rule 75 (loop -> for .)
    IF              reduce using rule 75 (loop -> for .)
    RETURN          reduce using rule 75 (loop -> for .)
    WHILE           reduce using rule 75 (loop -> for .)
    FROM            reduce using rule 75 (loop -> for .)


state 63

    (79) return -> RETURN . expr SEMI
    (80) return -> RETURN . SEMI
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    SEMI            shift and go to state 80
    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    expr                           shift and go to state 79
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 64

    (76) while -> WHILE . LPAREN expr RPAREN instruction_block

    LPAREN          shift and go to state 102


state 65

    (77) for -> FROM . LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM . LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    LPAREN          shift and go to state 103


state 66

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . RPAREN instruction_block
    (22) function_definition_params -> . function_definition_params COMMA single_function_definition_param
    (23) function_definition_params -> . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (119) type -> . INT
    (120) type -> . REAL
    (121) type -> . CHAR
    (122) type -> . BOOL

    RPAREN          shift and go to state 106
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 104
    function_definition_params     shift and go to state 105
    single_function_definition_param shift and go to state 107

state 67

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . RPAREN instruction_block
    (22) function_definition_params -> . function_definition_params COMMA single_function_definition_param
    (23) function_definition_params -> . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (119) type -> . INT
    (120) type -> . REAL
    (121) type -> . CHAR
    (122) type -> . BOOL

    RPAREN          shift and go to state 109
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    function_definition_params     shift and go to state 108
    single_function_definition_param shift and go to state 107
    type                           shift and go to state 104

state 68

    (32) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list . SEMI
    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list . COMMA single_variable_declaration

    SEMI            shift and go to state 110
    COMMA           shift and go to state 111


state 69

    (35) shared_type_variables_declaration_list -> single_variable_declaration .

    SEMI            reduce using rule 35 (shared_type_variables_declaration_list -> single_variable_declaration .)
    COMMA           reduce using rule 35 (shared_type_variables_declaration_list -> single_variable_declaration .)


state 70

    (36) single_variable_declaration -> ID . dim_definition dim_definition
    (37) single_variable_declaration -> ID . dim_definition
    (38) single_variable_declaration -> ID .
    (39) dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 38 (single_variable_declaration -> ID .)
    COMMA           reduce using rule 38 (single_variable_declaration -> ID .)
    LBRACKET        shift and go to state 113

    dim_definition                 shift and go to state 112

state 71

    (40) instruction_block -> LBRACE statements RBRACE .

    $end            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    START           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    ID              reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    READ            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    IF              reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    FROM            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)


state 72

    (42) statements -> statements single_statement .

    RBRACE          reduce using rule 42 (statements -> statements single_statement .)
    ID              reduce using rule 42 (statements -> statements single_statement .)
    READ            reduce using rule 42 (statements -> statements single_statement .)
    PRINT           reduce using rule 42 (statements -> statements single_statement .)
    IF              reduce using rule 42 (statements -> statements single_statement .)
    RETURN          reduce using rule 42 (statements -> statements single_statement .)
    WHILE           reduce using rule 42 (statements -> statements single_statement .)
    FROM            reduce using rule 42 (statements -> statements single_statement .)


state 73

    (51) assignment -> variable_access ASGMT . parsed_asgmt expr SEMI
    (52) assignment -> variable_access ASGMT . parsed_asgmt read
    (53) parsed_asgmt -> .

    READ            reduce using rule 53 (parsed_asgmt -> .)
    MINUS           reduce using rule 53 (parsed_asgmt -> .)
    PLUS            reduce using rule 53 (parsed_asgmt -> .)
    NOT             reduce using rule 53 (parsed_asgmt -> .)
    LPAREN          reduce using rule 53 (parsed_asgmt -> .)
    ID              reduce using rule 53 (parsed_asgmt -> .)
    CONST_INT       reduce using rule 53 (parsed_asgmt -> .)
    CONST_REAL      reduce using rule 53 (parsed_asgmt -> .)
    CONST_CHAR      reduce using rule 53 (parsed_asgmt -> .)
    TRUE            reduce using rule 53 (parsed_asgmt -> .)
    FALSE           reduce using rule 53 (parsed_asgmt -> .)

    parsed_asgmt                   shift and go to state 114

state 74

    (60) function_call -> ID LPAREN . function_call_params RPAREN SEMI
    (61) function_call -> ID LPAREN . RPAREN SEMI
    (62) function_call_params -> . function_call_params COMMA single_function_call_param
    (63) function_call_params -> . single_function_call_param
    (64) single_function_call_param -> . expr
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    RPAREN          shift and go to state 116
    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    function_call_params           shift and go to state 115
    single_function_call_param     shift and go to state 117
    expr                           shift and go to state 118
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 75

    (54) variable_access -> ID parsed_id_variable_access . dims_access
    (56) dims_access -> . single_dim_access single_dim_access
    (57) dims_access -> . single_dim_access
    (58) dims_access -> . empty
    (59) single_dim_access -> . LBRACKET expr RBRACKET
    (123) empty -> .

    LBRACKET        shift and go to state 122
    ASGMT           reduce using rule 123 (empty -> .)
    TIMES           reduce using rule 123 (empty -> .)
    DIVIDE          reduce using rule 123 (empty -> .)
    MODULO          reduce using rule 123 (empty -> .)
    LTHAN_EQUAL     reduce using rule 123 (empty -> .)
    LTHAN           reduce using rule 123 (empty -> .)
    GTHAN_EQUAL     reduce using rule 123 (empty -> .)
    GTHAN           reduce using rule 123 (empty -> .)
    PLUS            reduce using rule 123 (empty -> .)
    MINUS           reduce using rule 123 (empty -> .)
    EQUAL           reduce using rule 123 (empty -> .)
    NEQUAL          reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    SEMI            reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    RPAREN          reduce using rule 123 (empty -> .)
    COMMA           reduce using rule 123 (empty -> .)
    RBRACKET        reduce using rule 123 (empty -> .)

    dims_access                    shift and go to state 119
    single_dim_access              shift and go to state 120
    empty                          shift and go to state 121

state 76

    (65) read -> READ LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 123


state 77

    (66) print -> PRINT LPAREN . print_params RPAREN SEMI
    (67) print -> PRINT LPAREN . RPAREN SEMI
    (68) print_params -> . print_params COMMA single_print_param
    (69) print_params -> . single_print_param
    (70) single_print_param -> . expr
    (71) single_print_param -> . CONST_STRING
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    RPAREN          shift and go to state 125
    CONST_STRING    shift and go to state 128
    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    print_params                   shift and go to state 124
    single_print_param             shift and go to state 126
    expr                           shift and go to state 127
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 78

    (72) conditional -> IF LPAREN . expr RPAREN instruction_block ELSE instruction_block
    (73) conditional -> IF LPAREN . expr RPAREN instruction_block
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    expr                           shift and go to state 129
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 79

    (79) return -> RETURN expr . SEMI
    (81) expr -> expr . OR and_expr

    SEMI            shift and go to state 130
    OR              shift and go to state 131


state 80

    (80) return -> RETURN SEMI .

    RBRACE          reduce using rule 80 (return -> RETURN SEMI .)
    ID              reduce using rule 80 (return -> RETURN SEMI .)
    READ            reduce using rule 80 (return -> RETURN SEMI .)
    PRINT           reduce using rule 80 (return -> RETURN SEMI .)
    IF              reduce using rule 80 (return -> RETURN SEMI .)
    RETURN          reduce using rule 80 (return -> RETURN SEMI .)
    WHILE           reduce using rule 80 (return -> RETURN SEMI .)
    FROM            reduce using rule 80 (return -> RETURN SEMI .)


state 81

    (82) expr -> and_expr .

    SEMI            reduce using rule 82 (expr -> and_expr .)
    OR              reduce using rule 82 (expr -> and_expr .)
    RPAREN          reduce using rule 82 (expr -> and_expr .)
    COMMA           reduce using rule 82 (expr -> and_expr .)
    RBRACKET        reduce using rule 82 (expr -> and_expr .)


state 82

    (83) and_expr -> equality_expr . AND equality_expr
    (84) and_expr -> equality_expr .

    AND             shift and go to state 132
    SEMI            reduce using rule 84 (and_expr -> equality_expr .)
    OR              reduce using rule 84 (and_expr -> equality_expr .)
    RPAREN          reduce using rule 84 (and_expr -> equality_expr .)
    COMMA           reduce using rule 84 (and_expr -> equality_expr .)
    RBRACKET        reduce using rule 84 (and_expr -> equality_expr .)


state 83

    (85) equality_expr -> relational_expr . EQUAL relational_expr
    (86) equality_expr -> relational_expr . NEQUAL relational_expr
    (87) equality_expr -> relational_expr .

    EQUAL           shift and go to state 133
    NEQUAL          shift and go to state 134
    AND             reduce using rule 87 (equality_expr -> relational_expr .)
    SEMI            reduce using rule 87 (equality_expr -> relational_expr .)
    OR              reduce using rule 87 (equality_expr -> relational_expr .)
    RPAREN          reduce using rule 87 (equality_expr -> relational_expr .)
    COMMA           reduce using rule 87 (equality_expr -> relational_expr .)
    RBRACKET        reduce using rule 87 (equality_expr -> relational_expr .)


state 84

    (88) relational_expr -> additive_expr . LTHAN_EQUAL additive_expr
    (89) relational_expr -> additive_expr . LTHAN additive_expr
    (90) relational_expr -> additive_expr . GTHAN_EQUAL additive_expr
    (91) relational_expr -> additive_expr . GTHAN additive_expr
    (92) relational_expr -> additive_expr .
    (93) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    LTHAN_EQUAL     shift and go to state 135
    LTHAN           shift and go to state 136
    GTHAN_EQUAL     shift and go to state 137
    GTHAN           shift and go to state 138
    EQUAL           reduce using rule 92 (relational_expr -> additive_expr .)
    NEQUAL          reduce using rule 92 (relational_expr -> additive_expr .)
    AND             reduce using rule 92 (relational_expr -> additive_expr .)
    SEMI            reduce using rule 92 (relational_expr -> additive_expr .)
    OR              reduce using rule 92 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 92 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 92 (relational_expr -> additive_expr .)
    RBRACKET        reduce using rule 92 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 139
    MINUS           shift and go to state 140


state 85

    (106) unary_expr -> PLUS . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    postfix_expr                   shift and go to state 141
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 86

    (97) additive_expr -> multiplicative_expr .
    (98) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (100) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 97 (additive_expr -> multiplicative_expr .)
    LTHAN           reduce using rule 97 (additive_expr -> multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 97 (additive_expr -> multiplicative_expr .)
    GTHAN           reduce using rule 97 (additive_expr -> multiplicative_expr .)
    PLUS            reduce using rule 97 (additive_expr -> multiplicative_expr .)
    MINUS           reduce using rule 97 (additive_expr -> multiplicative_expr .)
    EQUAL           reduce using rule 97 (additive_expr -> multiplicative_expr .)
    NEQUAL          reduce using rule 97 (additive_expr -> multiplicative_expr .)
    AND             reduce using rule 97 (additive_expr -> multiplicative_expr .)
    SEMI            reduce using rule 97 (additive_expr -> multiplicative_expr .)
    OR              reduce using rule 97 (additive_expr -> multiplicative_expr .)
    RPAREN          reduce using rule 97 (additive_expr -> multiplicative_expr .)
    COMMA           reduce using rule 97 (additive_expr -> multiplicative_expr .)
    RBRACKET        reduce using rule 97 (additive_expr -> multiplicative_expr .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    MODULO          shift and go to state 144


state 87

    (105) unary_expr -> MINUS . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    postfix_expr                   shift and go to state 145
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 88

    (104) multiplicative_expr -> unary_expr .

    TIMES           reduce using rule 104 (multiplicative_expr -> unary_expr .)
    DIVIDE          reduce using rule 104 (multiplicative_expr -> unary_expr .)
    MODULO          reduce using rule 104 (multiplicative_expr -> unary_expr .)
    LTHAN_EQUAL     reduce using rule 104 (multiplicative_expr -> unary_expr .)
    LTHAN           reduce using rule 104 (multiplicative_expr -> unary_expr .)
    GTHAN_EQUAL     reduce using rule 104 (multiplicative_expr -> unary_expr .)
    GTHAN           reduce using rule 104 (multiplicative_expr -> unary_expr .)
    PLUS            reduce using rule 104 (multiplicative_expr -> unary_expr .)
    MINUS           reduce using rule 104 (multiplicative_expr -> unary_expr .)
    EQUAL           reduce using rule 104 (multiplicative_expr -> unary_expr .)
    NEQUAL          reduce using rule 104 (multiplicative_expr -> unary_expr .)
    AND             reduce using rule 104 (multiplicative_expr -> unary_expr .)
    SEMI            reduce using rule 104 (multiplicative_expr -> unary_expr .)
    OR              reduce using rule 104 (multiplicative_expr -> unary_expr .)
    RPAREN          reduce using rule 104 (multiplicative_expr -> unary_expr .)
    COMMA           reduce using rule 104 (multiplicative_expr -> unary_expr .)
    RBRACKET        reduce using rule 104 (multiplicative_expr -> unary_expr .)


state 89

    (108) unary_expr -> postfix_expr .

    TIMES           reduce using rule 108 (unary_expr -> postfix_expr .)
    DIVIDE          reduce using rule 108 (unary_expr -> postfix_expr .)
    MODULO          reduce using rule 108 (unary_expr -> postfix_expr .)
    LTHAN_EQUAL     reduce using rule 108 (unary_expr -> postfix_expr .)
    LTHAN           reduce using rule 108 (unary_expr -> postfix_expr .)
    GTHAN_EQUAL     reduce using rule 108 (unary_expr -> postfix_expr .)
    GTHAN           reduce using rule 108 (unary_expr -> postfix_expr .)
    PLUS            reduce using rule 108 (unary_expr -> postfix_expr .)
    MINUS           reduce using rule 108 (unary_expr -> postfix_expr .)
    EQUAL           reduce using rule 108 (unary_expr -> postfix_expr .)
    NEQUAL          reduce using rule 108 (unary_expr -> postfix_expr .)
    AND             reduce using rule 108 (unary_expr -> postfix_expr .)
    SEMI            reduce using rule 108 (unary_expr -> postfix_expr .)
    OR              reduce using rule 108 (unary_expr -> postfix_expr .)
    RPAREN          reduce using rule 108 (unary_expr -> postfix_expr .)
    COMMA           reduce using rule 108 (unary_expr -> postfix_expr .)
    RBRACKET        reduce using rule 108 (unary_expr -> postfix_expr .)


state 90

    (107) unary_expr -> NOT . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    postfix_expr                   shift and go to state 146
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 91

    (109) postfix_expr -> LPAREN . expr RPAREN
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    expr                           shift and go to state 147
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 92

    (110) postfix_expr -> variable_access .

    TIMES           reduce using rule 110 (postfix_expr -> variable_access .)
    DIVIDE          reduce using rule 110 (postfix_expr -> variable_access .)
    MODULO          reduce using rule 110 (postfix_expr -> variable_access .)
    LTHAN_EQUAL     reduce using rule 110 (postfix_expr -> variable_access .)
    LTHAN           reduce using rule 110 (postfix_expr -> variable_access .)
    GTHAN_EQUAL     reduce using rule 110 (postfix_expr -> variable_access .)
    GTHAN           reduce using rule 110 (postfix_expr -> variable_access .)
    PLUS            reduce using rule 110 (postfix_expr -> variable_access .)
    MINUS           reduce using rule 110 (postfix_expr -> variable_access .)
    EQUAL           reduce using rule 110 (postfix_expr -> variable_access .)
    NEQUAL          reduce using rule 110 (postfix_expr -> variable_access .)
    AND             reduce using rule 110 (postfix_expr -> variable_access .)
    SEMI            reduce using rule 110 (postfix_expr -> variable_access .)
    OR              reduce using rule 110 (postfix_expr -> variable_access .)
    RPAREN          reduce using rule 110 (postfix_expr -> variable_access .)
    COMMA           reduce using rule 110 (postfix_expr -> variable_access .)
    RBRACKET        reduce using rule 110 (postfix_expr -> variable_access .)


state 93

    (111) postfix_expr -> function_call .

    TIMES           reduce using rule 111 (postfix_expr -> function_call .)
    DIVIDE          reduce using rule 111 (postfix_expr -> function_call .)
    MODULO          reduce using rule 111 (postfix_expr -> function_call .)
    LTHAN_EQUAL     reduce using rule 111 (postfix_expr -> function_call .)
    LTHAN           reduce using rule 111 (postfix_expr -> function_call .)
    GTHAN_EQUAL     reduce using rule 111 (postfix_expr -> function_call .)
    GTHAN           reduce using rule 111 (postfix_expr -> function_call .)
    PLUS            reduce using rule 111 (postfix_expr -> function_call .)
    MINUS           reduce using rule 111 (postfix_expr -> function_call .)
    EQUAL           reduce using rule 111 (postfix_expr -> function_call .)
    NEQUAL          reduce using rule 111 (postfix_expr -> function_call .)
    AND             reduce using rule 111 (postfix_expr -> function_call .)
    SEMI            reduce using rule 111 (postfix_expr -> function_call .)
    OR              reduce using rule 111 (postfix_expr -> function_call .)
    RPAREN          reduce using rule 111 (postfix_expr -> function_call .)
    COMMA           reduce using rule 111 (postfix_expr -> function_call .)
    RBRACKET        reduce using rule 111 (postfix_expr -> function_call .)


state 94

    (112) postfix_expr -> constant .

    TIMES           reduce using rule 112 (postfix_expr -> constant .)
    DIVIDE          reduce using rule 112 (postfix_expr -> constant .)
    MODULO          reduce using rule 112 (postfix_expr -> constant .)
    LTHAN_EQUAL     reduce using rule 112 (postfix_expr -> constant .)
    LTHAN           reduce using rule 112 (postfix_expr -> constant .)
    GTHAN_EQUAL     reduce using rule 112 (postfix_expr -> constant .)
    GTHAN           reduce using rule 112 (postfix_expr -> constant .)
    PLUS            reduce using rule 112 (postfix_expr -> constant .)
    MINUS           reduce using rule 112 (postfix_expr -> constant .)
    EQUAL           reduce using rule 112 (postfix_expr -> constant .)
    NEQUAL          reduce using rule 112 (postfix_expr -> constant .)
    AND             reduce using rule 112 (postfix_expr -> constant .)
    SEMI            reduce using rule 112 (postfix_expr -> constant .)
    OR              reduce using rule 112 (postfix_expr -> constant .)
    RPAREN          reduce using rule 112 (postfix_expr -> constant .)
    COMMA           reduce using rule 112 (postfix_expr -> constant .)
    RBRACKET        reduce using rule 112 (postfix_expr -> constant .)


state 95

    (54) variable_access -> ID . parsed_id_variable_access dims_access
    (60) function_call -> ID . LPAREN function_call_params RPAREN SEMI
    (61) function_call -> ID . LPAREN RPAREN SEMI
    (55) parsed_id_variable_access -> .

    LPAREN          shift and go to state 74
    LBRACKET        reduce using rule 55 (parsed_id_variable_access -> .)
    TIMES           reduce using rule 55 (parsed_id_variable_access -> .)
    DIVIDE          reduce using rule 55 (parsed_id_variable_access -> .)
    MODULO          reduce using rule 55 (parsed_id_variable_access -> .)
    LTHAN_EQUAL     reduce using rule 55 (parsed_id_variable_access -> .)
    LTHAN           reduce using rule 55 (parsed_id_variable_access -> .)
    GTHAN_EQUAL     reduce using rule 55 (parsed_id_variable_access -> .)
    GTHAN           reduce using rule 55 (parsed_id_variable_access -> .)
    PLUS            reduce using rule 55 (parsed_id_variable_access -> .)
    MINUS           reduce using rule 55 (parsed_id_variable_access -> .)
    EQUAL           reduce using rule 55 (parsed_id_variable_access -> .)
    NEQUAL          reduce using rule 55 (parsed_id_variable_access -> .)
    AND             reduce using rule 55 (parsed_id_variable_access -> .)
    SEMI            reduce using rule 55 (parsed_id_variable_access -> .)
    OR              reduce using rule 55 (parsed_id_variable_access -> .)
    RPAREN          reduce using rule 55 (parsed_id_variable_access -> .)
    COMMA           reduce using rule 55 (parsed_id_variable_access -> .)
    RBRACKET        reduce using rule 55 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 75

state 96

    (113) constant -> CONST_INT .

    TIMES           reduce using rule 113 (constant -> CONST_INT .)
    DIVIDE          reduce using rule 113 (constant -> CONST_INT .)
    MODULO          reduce using rule 113 (constant -> CONST_INT .)
    LTHAN_EQUAL     reduce using rule 113 (constant -> CONST_INT .)
    LTHAN           reduce using rule 113 (constant -> CONST_INT .)
    GTHAN_EQUAL     reduce using rule 113 (constant -> CONST_INT .)
    GTHAN           reduce using rule 113 (constant -> CONST_INT .)
    PLUS            reduce using rule 113 (constant -> CONST_INT .)
    MINUS           reduce using rule 113 (constant -> CONST_INT .)
    EQUAL           reduce using rule 113 (constant -> CONST_INT .)
    NEQUAL          reduce using rule 113 (constant -> CONST_INT .)
    AND             reduce using rule 113 (constant -> CONST_INT .)
    SEMI            reduce using rule 113 (constant -> CONST_INT .)
    OR              reduce using rule 113 (constant -> CONST_INT .)
    RPAREN          reduce using rule 113 (constant -> CONST_INT .)
    COMMA           reduce using rule 113 (constant -> CONST_INT .)
    RBRACKET        reduce using rule 113 (constant -> CONST_INT .)


state 97

    (114) constant -> CONST_REAL .

    TIMES           reduce using rule 114 (constant -> CONST_REAL .)
    DIVIDE          reduce using rule 114 (constant -> CONST_REAL .)
    MODULO          reduce using rule 114 (constant -> CONST_REAL .)
    LTHAN_EQUAL     reduce using rule 114 (constant -> CONST_REAL .)
    LTHAN           reduce using rule 114 (constant -> CONST_REAL .)
    GTHAN_EQUAL     reduce using rule 114 (constant -> CONST_REAL .)
    GTHAN           reduce using rule 114 (constant -> CONST_REAL .)
    PLUS            reduce using rule 114 (constant -> CONST_REAL .)
    MINUS           reduce using rule 114 (constant -> CONST_REAL .)
    EQUAL           reduce using rule 114 (constant -> CONST_REAL .)
    NEQUAL          reduce using rule 114 (constant -> CONST_REAL .)
    AND             reduce using rule 114 (constant -> CONST_REAL .)
    SEMI            reduce using rule 114 (constant -> CONST_REAL .)
    OR              reduce using rule 114 (constant -> CONST_REAL .)
    RPAREN          reduce using rule 114 (constant -> CONST_REAL .)
    COMMA           reduce using rule 114 (constant -> CONST_REAL .)
    RBRACKET        reduce using rule 114 (constant -> CONST_REAL .)


state 98

    (115) constant -> CONST_CHAR .

    TIMES           reduce using rule 115 (constant -> CONST_CHAR .)
    DIVIDE          reduce using rule 115 (constant -> CONST_CHAR .)
    MODULO          reduce using rule 115 (constant -> CONST_CHAR .)
    LTHAN_EQUAL     reduce using rule 115 (constant -> CONST_CHAR .)
    LTHAN           reduce using rule 115 (constant -> CONST_CHAR .)
    GTHAN_EQUAL     reduce using rule 115 (constant -> CONST_CHAR .)
    GTHAN           reduce using rule 115 (constant -> CONST_CHAR .)
    PLUS            reduce using rule 115 (constant -> CONST_CHAR .)
    MINUS           reduce using rule 115 (constant -> CONST_CHAR .)
    EQUAL           reduce using rule 115 (constant -> CONST_CHAR .)
    NEQUAL          reduce using rule 115 (constant -> CONST_CHAR .)
    AND             reduce using rule 115 (constant -> CONST_CHAR .)
    SEMI            reduce using rule 115 (constant -> CONST_CHAR .)
    OR              reduce using rule 115 (constant -> CONST_CHAR .)
    RPAREN          reduce using rule 115 (constant -> CONST_CHAR .)
    COMMA           reduce using rule 115 (constant -> CONST_CHAR .)
    RBRACKET        reduce using rule 115 (constant -> CONST_CHAR .)


state 99

    (116) constant -> constant_bool .

    TIMES           reduce using rule 116 (constant -> constant_bool .)
    DIVIDE          reduce using rule 116 (constant -> constant_bool .)
    MODULO          reduce using rule 116 (constant -> constant_bool .)
    LTHAN_EQUAL     reduce using rule 116 (constant -> constant_bool .)
    LTHAN           reduce using rule 116 (constant -> constant_bool .)
    GTHAN_EQUAL     reduce using rule 116 (constant -> constant_bool .)
    GTHAN           reduce using rule 116 (constant -> constant_bool .)
    PLUS            reduce using rule 116 (constant -> constant_bool .)
    MINUS           reduce using rule 116 (constant -> constant_bool .)
    EQUAL           reduce using rule 116 (constant -> constant_bool .)
    NEQUAL          reduce using rule 116 (constant -> constant_bool .)
    AND             reduce using rule 116 (constant -> constant_bool .)
    SEMI            reduce using rule 116 (constant -> constant_bool .)
    OR              reduce using rule 116 (constant -> constant_bool .)
    RPAREN          reduce using rule 116 (constant -> constant_bool .)
    COMMA           reduce using rule 116 (constant -> constant_bool .)
    RBRACKET        reduce using rule 116 (constant -> constant_bool .)


state 100

    (117) constant_bool -> TRUE .

    TIMES           reduce using rule 117 (constant_bool -> TRUE .)
    DIVIDE          reduce using rule 117 (constant_bool -> TRUE .)
    MODULO          reduce using rule 117 (constant_bool -> TRUE .)
    LTHAN_EQUAL     reduce using rule 117 (constant_bool -> TRUE .)
    LTHAN           reduce using rule 117 (constant_bool -> TRUE .)
    GTHAN_EQUAL     reduce using rule 117 (constant_bool -> TRUE .)
    GTHAN           reduce using rule 117 (constant_bool -> TRUE .)
    PLUS            reduce using rule 117 (constant_bool -> TRUE .)
    MINUS           reduce using rule 117 (constant_bool -> TRUE .)
    EQUAL           reduce using rule 117 (constant_bool -> TRUE .)
    NEQUAL          reduce using rule 117 (constant_bool -> TRUE .)
    AND             reduce using rule 117 (constant_bool -> TRUE .)
    SEMI            reduce using rule 117 (constant_bool -> TRUE .)
    OR              reduce using rule 117 (constant_bool -> TRUE .)
    RPAREN          reduce using rule 117 (constant_bool -> TRUE .)
    COMMA           reduce using rule 117 (constant_bool -> TRUE .)
    RBRACKET        reduce using rule 117 (constant_bool -> TRUE .)


state 101

    (118) constant_bool -> FALSE .

    TIMES           reduce using rule 118 (constant_bool -> FALSE .)
    DIVIDE          reduce using rule 118 (constant_bool -> FALSE .)
    MODULO          reduce using rule 118 (constant_bool -> FALSE .)
    LTHAN_EQUAL     reduce using rule 118 (constant_bool -> FALSE .)
    LTHAN           reduce using rule 118 (constant_bool -> FALSE .)
    GTHAN_EQUAL     reduce using rule 118 (constant_bool -> FALSE .)
    GTHAN           reduce using rule 118 (constant_bool -> FALSE .)
    PLUS            reduce using rule 118 (constant_bool -> FALSE .)
    MINUS           reduce using rule 118 (constant_bool -> FALSE .)
    EQUAL           reduce using rule 118 (constant_bool -> FALSE .)
    NEQUAL          reduce using rule 118 (constant_bool -> FALSE .)
    AND             reduce using rule 118 (constant_bool -> FALSE .)
    SEMI            reduce using rule 118 (constant_bool -> FALSE .)
    OR              reduce using rule 118 (constant_bool -> FALSE .)
    RPAREN          reduce using rule 118 (constant_bool -> FALSE .)
    COMMA           reduce using rule 118 (constant_bool -> FALSE .)
    RBRACKET        reduce using rule 118 (constant_bool -> FALSE .)


state 102

    (76) while -> WHILE LPAREN . expr RPAREN instruction_block
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    expr                           shift and go to state 148
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 103

    (77) for -> FROM LPAREN . ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM LPAREN . ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    ID              shift and go to state 149


state 104

    (24) single_function_definition_param -> type . ID

    ID              shift and go to state 150


state 105

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN instruction_block
    (22) function_definition_params -> function_definition_params . COMMA single_function_definition_param

    RPAREN          shift and go to state 151
    COMMA           shift and go to state 152


state 106

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 153
    instruction_block              shift and go to state 154

state 107

    (23) function_definition_params -> single_function_definition_param .

    RPAREN          reduce using rule 23 (function_definition_params -> single_function_definition_param .)
    COMMA           reduce using rule 23 (function_definition_params -> single_function_definition_param .)


state 108

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN instruction_block
    (22) function_definition_params -> function_definition_params . COMMA single_function_definition_param

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 152


state 109

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 156
    instruction_block              shift and go to state 157

state 110

    (32) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .

    INT             reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    REAL            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    CHAR            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    BOOL            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    START           reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    FUNCTION        reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    LBRACE          reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)


state 111

    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA . single_variable_declaration
    (36) single_variable_declaration -> . ID dim_definition dim_definition
    (37) single_variable_declaration -> . ID dim_definition
    (38) single_variable_declaration -> . ID

    ID              shift and go to state 70

    single_variable_declaration    shift and go to state 158

state 112

    (36) single_variable_declaration -> ID dim_definition . dim_definition
    (37) single_variable_declaration -> ID dim_definition .
    (39) dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 37 (single_variable_declaration -> ID dim_definition .)
    COMMA           reduce using rule 37 (single_variable_declaration -> ID dim_definition .)
    LBRACKET        shift and go to state 113

    dim_definition                 shift and go to state 159

state 113

    (39) dim_definition -> LBRACKET . CONST_INT RBRACKET

    CONST_INT       shift and go to state 160


state 114

    (51) assignment -> variable_access ASGMT parsed_asgmt . expr SEMI
    (52) assignment -> variable_access ASGMT parsed_asgmt . read
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (65) read -> . READ LPAREN RPAREN SEMI
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    READ            shift and go to state 58
    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    variable_access                shift and go to state 92
    expr                           shift and go to state 161
    read                           shift and go to state 162
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 115

    (60) function_call -> ID LPAREN function_call_params . RPAREN SEMI
    (62) function_call_params -> function_call_params . COMMA single_function_call_param

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 164


state 116

    (61) function_call -> ID LPAREN RPAREN . SEMI

    SEMI            shift and go to state 165


state 117

    (63) function_call_params -> single_function_call_param .

    RPAREN          reduce using rule 63 (function_call_params -> single_function_call_param .)
    COMMA           reduce using rule 63 (function_call_params -> single_function_call_param .)


state 118

    (64) single_function_call_param -> expr .
    (81) expr -> expr . OR and_expr

    RPAREN          reduce using rule 64 (single_function_call_param -> expr .)
    COMMA           reduce using rule 64 (single_function_call_param -> expr .)
    OR              shift and go to state 131


state 119

    (54) variable_access -> ID parsed_id_variable_access dims_access .

    ASGMT           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    TIMES           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    DIVIDE          reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    MODULO          reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN_EQUAL     reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN_EQUAL     reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    PLUS            reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    MINUS           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    EQUAL           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    NEQUAL          reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    AND             reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    SEMI            reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    OR              reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    RPAREN          reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    COMMA           reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)
    RBRACKET        reduce using rule 54 (variable_access -> ID parsed_id_variable_access dims_access .)


state 120

    (56) dims_access -> single_dim_access . single_dim_access
    (57) dims_access -> single_dim_access .
    (59) single_dim_access -> . LBRACKET expr RBRACKET

    ASGMT           reduce using rule 57 (dims_access -> single_dim_access .)
    TIMES           reduce using rule 57 (dims_access -> single_dim_access .)
    DIVIDE          reduce using rule 57 (dims_access -> single_dim_access .)
    MODULO          reduce using rule 57 (dims_access -> single_dim_access .)
    LTHAN_EQUAL     reduce using rule 57 (dims_access -> single_dim_access .)
    LTHAN           reduce using rule 57 (dims_access -> single_dim_access .)
    GTHAN_EQUAL     reduce using rule 57 (dims_access -> single_dim_access .)
    GTHAN           reduce using rule 57 (dims_access -> single_dim_access .)
    PLUS            reduce using rule 57 (dims_access -> single_dim_access .)
    MINUS           reduce using rule 57 (dims_access -> single_dim_access .)
    EQUAL           reduce using rule 57 (dims_access -> single_dim_access .)
    NEQUAL          reduce using rule 57 (dims_access -> single_dim_access .)
    AND             reduce using rule 57 (dims_access -> single_dim_access .)
    SEMI            reduce using rule 57 (dims_access -> single_dim_access .)
    OR              reduce using rule 57 (dims_access -> single_dim_access .)
    RPAREN          reduce using rule 57 (dims_access -> single_dim_access .)
    COMMA           reduce using rule 57 (dims_access -> single_dim_access .)
    RBRACKET        reduce using rule 57 (dims_access -> single_dim_access .)
    LBRACKET        shift and go to state 122

    single_dim_access              shift and go to state 166

state 121

    (58) dims_access -> empty .

    ASGMT           reduce using rule 58 (dims_access -> empty .)
    TIMES           reduce using rule 58 (dims_access -> empty .)
    DIVIDE          reduce using rule 58 (dims_access -> empty .)
    MODULO          reduce using rule 58 (dims_access -> empty .)
    LTHAN_EQUAL     reduce using rule 58 (dims_access -> empty .)
    LTHAN           reduce using rule 58 (dims_access -> empty .)
    GTHAN_EQUAL     reduce using rule 58 (dims_access -> empty .)
    GTHAN           reduce using rule 58 (dims_access -> empty .)
    PLUS            reduce using rule 58 (dims_access -> empty .)
    MINUS           reduce using rule 58 (dims_access -> empty .)
    EQUAL           reduce using rule 58 (dims_access -> empty .)
    NEQUAL          reduce using rule 58 (dims_access -> empty .)
    AND             reduce using rule 58 (dims_access -> empty .)
    SEMI            reduce using rule 58 (dims_access -> empty .)
    OR              reduce using rule 58 (dims_access -> empty .)
    RPAREN          reduce using rule 58 (dims_access -> empty .)
    COMMA           reduce using rule 58 (dims_access -> empty .)
    RBRACKET        reduce using rule 58 (dims_access -> empty .)


state 122

    (59) single_dim_access -> LBRACKET . expr RBRACKET
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    expr                           shift and go to state 167
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 123

    (65) read -> READ LPAREN RPAREN . SEMI

    SEMI            shift and go to state 168


state 124

    (66) print -> PRINT LPAREN print_params . RPAREN SEMI
    (68) print_params -> print_params . COMMA single_print_param

    RPAREN          shift and go to state 169
    COMMA           shift and go to state 170


state 125

    (67) print -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 171


state 126

    (69) print_params -> single_print_param .

    RPAREN          reduce using rule 69 (print_params -> single_print_param .)
    COMMA           reduce using rule 69 (print_params -> single_print_param .)


state 127

    (70) single_print_param -> expr .
    (81) expr -> expr . OR and_expr

    RPAREN          reduce using rule 70 (single_print_param -> expr .)
    COMMA           reduce using rule 70 (single_print_param -> expr .)
    OR              shift and go to state 131


state 128

    (71) single_print_param -> CONST_STRING .

    RPAREN          reduce using rule 71 (single_print_param -> CONST_STRING .)
    COMMA           reduce using rule 71 (single_print_param -> CONST_STRING .)


state 129

    (72) conditional -> IF LPAREN expr . RPAREN instruction_block ELSE instruction_block
    (73) conditional -> IF LPAREN expr . RPAREN instruction_block
    (81) expr -> expr . OR and_expr

    RPAREN          shift and go to state 172
    OR              shift and go to state 131


state 130

    (79) return -> RETURN expr SEMI .

    RBRACE          reduce using rule 79 (return -> RETURN expr SEMI .)
    ID              reduce using rule 79 (return -> RETURN expr SEMI .)
    READ            reduce using rule 79 (return -> RETURN expr SEMI .)
    PRINT           reduce using rule 79 (return -> RETURN expr SEMI .)
    IF              reduce using rule 79 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 79 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 79 (return -> RETURN expr SEMI .)
    FROM            reduce using rule 79 (return -> RETURN expr SEMI .)


state 131

    (81) expr -> expr OR . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    and_expr                       shift and go to state 173
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 132

    (83) and_expr -> equality_expr AND . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    equality_expr                  shift and go to state 174
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 133

    (85) equality_expr -> relational_expr EQUAL . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    relational_expr                shift and go to state 175
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 134

    (86) equality_expr -> relational_expr NEQUAL . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    relational_expr                shift and go to state 176
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 135

    (88) relational_expr -> additive_expr LTHAN_EQUAL . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    additive_expr                  shift and go to state 177
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 136

    (89) relational_expr -> additive_expr LTHAN . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    additive_expr                  shift and go to state 178
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 137

    (90) relational_expr -> additive_expr GTHAN_EQUAL . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    additive_expr                  shift and go to state 179
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 138

    (91) relational_expr -> additive_expr GTHAN . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    additive_expr                  shift and go to state 180
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 139

    (93) additive_expr -> additive_expr PLUS . parsed_plus multiplicative_expr
    (94) parsed_plus -> .

    MINUS           reduce using rule 94 (parsed_plus -> .)
    PLUS            reduce using rule 94 (parsed_plus -> .)
    NOT             reduce using rule 94 (parsed_plus -> .)
    LPAREN          reduce using rule 94 (parsed_plus -> .)
    ID              reduce using rule 94 (parsed_plus -> .)
    CONST_INT       reduce using rule 94 (parsed_plus -> .)
    CONST_REAL      reduce using rule 94 (parsed_plus -> .)
    CONST_CHAR      reduce using rule 94 (parsed_plus -> .)
    TRUE            reduce using rule 94 (parsed_plus -> .)
    FALSE           reduce using rule 94 (parsed_plus -> .)

    parsed_plus                    shift and go to state 181

state 140

    (95) additive_expr -> additive_expr MINUS . parsed_minus multiplicative_expr
    (96) parsed_minus -> .

    MINUS           reduce using rule 96 (parsed_minus -> .)
    PLUS            reduce using rule 96 (parsed_minus -> .)
    NOT             reduce using rule 96 (parsed_minus -> .)
    LPAREN          reduce using rule 96 (parsed_minus -> .)
    ID              reduce using rule 96 (parsed_minus -> .)
    CONST_INT       reduce using rule 96 (parsed_minus -> .)
    CONST_REAL      reduce using rule 96 (parsed_minus -> .)
    CONST_CHAR      reduce using rule 96 (parsed_minus -> .)
    TRUE            reduce using rule 96 (parsed_minus -> .)
    FALSE           reduce using rule 96 (parsed_minus -> .)

    parsed_minus                   shift and go to state 182

state 141

    (106) unary_expr -> PLUS postfix_expr .

    TIMES           reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    DIVIDE          reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    MODULO          reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    LTHAN           reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    GTHAN           reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    PLUS            reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    MINUS           reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    EQUAL           reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    NEQUAL          reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    AND             reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    SEMI            reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    OR              reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    RPAREN          reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    COMMA           reduce using rule 106 (unary_expr -> PLUS postfix_expr .)
    RBRACKET        reduce using rule 106 (unary_expr -> PLUS postfix_expr .)


state 142

    (98) multiplicative_expr -> multiplicative_expr TIMES . parsed_times unary_expr
    (99) parsed_times -> .

    MINUS           reduce using rule 99 (parsed_times -> .)
    PLUS            reduce using rule 99 (parsed_times -> .)
    NOT             reduce using rule 99 (parsed_times -> .)
    LPAREN          reduce using rule 99 (parsed_times -> .)
    ID              reduce using rule 99 (parsed_times -> .)
    CONST_INT       reduce using rule 99 (parsed_times -> .)
    CONST_REAL      reduce using rule 99 (parsed_times -> .)
    CONST_CHAR      reduce using rule 99 (parsed_times -> .)
    TRUE            reduce using rule 99 (parsed_times -> .)
    FALSE           reduce using rule 99 (parsed_times -> .)

    parsed_times                   shift and go to state 183

state 143

    (100) multiplicative_expr -> multiplicative_expr DIVIDE . parsed_divide unary_expr
    (101) parsed_divide -> .

    MINUS           reduce using rule 101 (parsed_divide -> .)
    PLUS            reduce using rule 101 (parsed_divide -> .)
    NOT             reduce using rule 101 (parsed_divide -> .)
    LPAREN          reduce using rule 101 (parsed_divide -> .)
    ID              reduce using rule 101 (parsed_divide -> .)
    CONST_INT       reduce using rule 101 (parsed_divide -> .)
    CONST_REAL      reduce using rule 101 (parsed_divide -> .)
    CONST_CHAR      reduce using rule 101 (parsed_divide -> .)
    TRUE            reduce using rule 101 (parsed_divide -> .)
    FALSE           reduce using rule 101 (parsed_divide -> .)

    parsed_divide                  shift and go to state 184

state 144

    (102) multiplicative_expr -> multiplicative_expr MODULO . parsed_modulo unary_expr
    (103) parsed_modulo -> .

    MINUS           reduce using rule 103 (parsed_modulo -> .)
    PLUS            reduce using rule 103 (parsed_modulo -> .)
    NOT             reduce using rule 103 (parsed_modulo -> .)
    LPAREN          reduce using rule 103 (parsed_modulo -> .)
    ID              reduce using rule 103 (parsed_modulo -> .)
    CONST_INT       reduce using rule 103 (parsed_modulo -> .)
    CONST_REAL      reduce using rule 103 (parsed_modulo -> .)
    CONST_CHAR      reduce using rule 103 (parsed_modulo -> .)
    TRUE            reduce using rule 103 (parsed_modulo -> .)
    FALSE           reduce using rule 103 (parsed_modulo -> .)

    parsed_modulo                  shift and go to state 185

state 145

    (105) unary_expr -> MINUS postfix_expr .

    TIMES           reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    DIVIDE          reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    MODULO          reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    LTHAN           reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    GTHAN           reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    PLUS            reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    MINUS           reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    EQUAL           reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    NEQUAL          reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    AND             reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    SEMI            reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    OR              reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    RPAREN          reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    COMMA           reduce using rule 105 (unary_expr -> MINUS postfix_expr .)
    RBRACKET        reduce using rule 105 (unary_expr -> MINUS postfix_expr .)


state 146

    (107) unary_expr -> NOT postfix_expr .

    TIMES           reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    DIVIDE          reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    MODULO          reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    LTHAN_EQUAL     reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    LTHAN           reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    GTHAN_EQUAL     reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    GTHAN           reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    PLUS            reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    MINUS           reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    EQUAL           reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    NEQUAL          reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    AND             reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    SEMI            reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    OR              reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    RPAREN          reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    COMMA           reduce using rule 107 (unary_expr -> NOT postfix_expr .)
    RBRACKET        reduce using rule 107 (unary_expr -> NOT postfix_expr .)


state 147

    (109) postfix_expr -> LPAREN expr . RPAREN
    (81) expr -> expr . OR and_expr

    RPAREN          shift and go to state 186
    OR              shift and go to state 131


state 148

    (76) while -> WHILE LPAREN expr . RPAREN instruction_block
    (81) expr -> expr . OR and_expr

    RPAREN          shift and go to state 187
    OR              shift and go to state 131


state 149

    (77) for -> FROM LPAREN ID . ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM LPAREN ID . ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    ASGMT           shift and go to state 188


state 150

    (24) single_function_definition_param -> type ID .

    RPAREN          reduce using rule 24 (single_function_definition_param -> type ID .)
    COMMA           reduce using rule 24 (single_function_definition_param -> type ID .)


state 151

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 189
    instruction_block              shift and go to state 190

state 152

    (22) function_definition_params -> function_definition_params COMMA . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (119) type -> . INT
    (120) type -> . REAL
    (121) type -> . CHAR
    (122) type -> . BOOL

    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    single_function_definition_param shift and go to state 191
    type                           shift and go to state 104

state 153

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 192

state 154

    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .

    START           reduce using rule 14 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)
    FUNCTION        reduce using rule 14 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)


state 155

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 193
    instruction_block              shift and go to state 194

state 156

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 195

state 157

    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .

    START           reduce using rule 18 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)
    FUNCTION        reduce using rule 18 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)


state 158

    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .

    SEMI            reduce using rule 34 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .)
    COMMA           reduce using rule 34 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .)


state 159

    (36) single_variable_declaration -> ID dim_definition dim_definition .

    SEMI            reduce using rule 36 (single_variable_declaration -> ID dim_definition dim_definition .)
    COMMA           reduce using rule 36 (single_variable_declaration -> ID dim_definition dim_definition .)


state 160

    (39) dim_definition -> LBRACKET CONST_INT . RBRACKET

    RBRACKET        shift and go to state 196


state 161

    (51) assignment -> variable_access ASGMT parsed_asgmt expr . SEMI
    (81) expr -> expr . OR and_expr

    SEMI            shift and go to state 197
    OR              shift and go to state 131


state 162

    (52) assignment -> variable_access ASGMT parsed_asgmt read .

    RBRACE          reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    ID              reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    READ            reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    PRINT           reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    IF              reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    RETURN          reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    WHILE           reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)
    FROM            reduce using rule 52 (assignment -> variable_access ASGMT parsed_asgmt read .)


state 163

    (60) function_call -> ID LPAREN function_call_params RPAREN . SEMI

    SEMI            shift and go to state 198


state 164

    (62) function_call_params -> function_call_params COMMA . single_function_call_param
    (64) single_function_call_param -> . expr
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    single_function_call_param     shift and go to state 199
    expr                           shift and go to state 118
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 165

    (61) function_call -> ID LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    ID              reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    READ            reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    IF              reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    FROM            reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    TIMES           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    DIVIDE          reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    LTHAN_EQUAL     reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    LTHAN           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    GTHAN_EQUAL     reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    GTHAN           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    EQUAL           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    NEQUAL          reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    AND             reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    OR              reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    COMMA           reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)
    RBRACKET        reduce using rule 61 (function_call -> ID LPAREN RPAREN SEMI .)


state 166

    (56) dims_access -> single_dim_access single_dim_access .

    ASGMT           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    TIMES           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    DIVIDE          reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    MODULO          reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    LTHAN_EQUAL     reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    LTHAN           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    GTHAN_EQUAL     reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    GTHAN           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    PLUS            reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    MINUS           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    EQUAL           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    NEQUAL          reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    AND             reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    SEMI            reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    OR              reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    RPAREN          reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    COMMA           reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)
    RBRACKET        reduce using rule 56 (dims_access -> single_dim_access single_dim_access .)


state 167

    (59) single_dim_access -> LBRACKET expr . RBRACKET
    (81) expr -> expr . OR and_expr

    RBRACKET        shift and go to state 200
    OR              shift and go to state 131


state 168

    (65) read -> READ LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    ID              reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    READ            reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    IF              reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)
    FROM            reduce using rule 65 (read -> READ LPAREN RPAREN SEMI .)


state 169

    (66) print -> PRINT LPAREN print_params RPAREN . SEMI

    SEMI            shift and go to state 201


state 170

    (68) print_params -> print_params COMMA . single_print_param
    (70) single_print_param -> . expr
    (71) single_print_param -> . CONST_STRING
    (81) expr -> . expr OR and_expr
    (82) expr -> . and_expr
    (83) and_expr -> . equality_expr AND equality_expr
    (84) and_expr -> . equality_expr
    (85) equality_expr -> . relational_expr EQUAL relational_expr
    (86) equality_expr -> . relational_expr NEQUAL relational_expr
    (87) equality_expr -> . relational_expr
    (88) relational_expr -> . additive_expr LTHAN_EQUAL additive_expr
    (89) relational_expr -> . additive_expr LTHAN additive_expr
    (90) relational_expr -> . additive_expr GTHAN_EQUAL additive_expr
    (91) relational_expr -> . additive_expr GTHAN additive_expr
    (92) relational_expr -> . additive_expr
    (93) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (97) additive_expr -> . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    CONST_STRING    shift and go to state 128
    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    single_print_param             shift and go to state 202
    expr                           shift and go to state 127
    and_expr                       shift and go to state 81
    equality_expr                  shift and go to state 82
    relational_expr                shift and go to state 83
    additive_expr                  shift and go to state 84
    multiplicative_expr            shift and go to state 86
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 171

    (67) print -> PRINT LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    ID              reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    READ            reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)
    FROM            reduce using rule 67 (print -> PRINT LPAREN RPAREN SEMI .)


state 172

    (72) conditional -> IF LPAREN expr RPAREN . instruction_block ELSE instruction_block
    (73) conditional -> IF LPAREN expr RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 203

state 173

    (81) expr -> expr OR and_expr .

    SEMI            reduce using rule 81 (expr -> expr OR and_expr .)
    OR              reduce using rule 81 (expr -> expr OR and_expr .)
    RPAREN          reduce using rule 81 (expr -> expr OR and_expr .)
    COMMA           reduce using rule 81 (expr -> expr OR and_expr .)
    RBRACKET        reduce using rule 81 (expr -> expr OR and_expr .)


state 174

    (83) and_expr -> equality_expr AND equality_expr .

    SEMI            reduce using rule 83 (and_expr -> equality_expr AND equality_expr .)
    OR              reduce using rule 83 (and_expr -> equality_expr AND equality_expr .)
    RPAREN          reduce using rule 83 (and_expr -> equality_expr AND equality_expr .)
    COMMA           reduce using rule 83 (and_expr -> equality_expr AND equality_expr .)
    RBRACKET        reduce using rule 83 (and_expr -> equality_expr AND equality_expr .)


state 175

    (85) equality_expr -> relational_expr EQUAL relational_expr .

    AND             reduce using rule 85 (equality_expr -> relational_expr EQUAL relational_expr .)
    SEMI            reduce using rule 85 (equality_expr -> relational_expr EQUAL relational_expr .)
    OR              reduce using rule 85 (equality_expr -> relational_expr EQUAL relational_expr .)
    RPAREN          reduce using rule 85 (equality_expr -> relational_expr EQUAL relational_expr .)
    COMMA           reduce using rule 85 (equality_expr -> relational_expr EQUAL relational_expr .)
    RBRACKET        reduce using rule 85 (equality_expr -> relational_expr EQUAL relational_expr .)


state 176

    (86) equality_expr -> relational_expr NEQUAL relational_expr .

    AND             reduce using rule 86 (equality_expr -> relational_expr NEQUAL relational_expr .)
    SEMI            reduce using rule 86 (equality_expr -> relational_expr NEQUAL relational_expr .)
    OR              reduce using rule 86 (equality_expr -> relational_expr NEQUAL relational_expr .)
    RPAREN          reduce using rule 86 (equality_expr -> relational_expr NEQUAL relational_expr .)
    COMMA           reduce using rule 86 (equality_expr -> relational_expr NEQUAL relational_expr .)
    RBRACKET        reduce using rule 86 (equality_expr -> relational_expr NEQUAL relational_expr .)


state 177

    (88) relational_expr -> additive_expr LTHAN_EQUAL additive_expr .
    (93) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    NEQUAL          reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    AND             reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    SEMI            reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    OR              reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    RPAREN          reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    COMMA           reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    RBRACKET        reduce using rule 88 (relational_expr -> additive_expr LTHAN_EQUAL additive_expr .)
    PLUS            shift and go to state 139
    MINUS           shift and go to state 140


state 178

    (89) relational_expr -> additive_expr LTHAN additive_expr .
    (93) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    NEQUAL          reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    AND             reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    SEMI            reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    OR              reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    RPAREN          reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    COMMA           reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    RBRACKET        reduce using rule 89 (relational_expr -> additive_expr LTHAN additive_expr .)
    PLUS            shift and go to state 139
    MINUS           shift and go to state 140


state 179

    (90) relational_expr -> additive_expr GTHAN_EQUAL additive_expr .
    (93) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    NEQUAL          reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    AND             reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    SEMI            reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    OR              reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    RPAREN          reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    COMMA           reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    RBRACKET        reduce using rule 90 (relational_expr -> additive_expr GTHAN_EQUAL additive_expr .)
    PLUS            shift and go to state 139
    MINUS           shift and go to state 140


state 180

    (91) relational_expr -> additive_expr GTHAN additive_expr .
    (93) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (95) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    NEQUAL          reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    AND             reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    SEMI            reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    OR              reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    RPAREN          reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    COMMA           reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    RBRACKET        reduce using rule 91 (relational_expr -> additive_expr GTHAN additive_expr .)
    PLUS            shift and go to state 139
    MINUS           shift and go to state 140


state 181

    (93) additive_expr -> additive_expr PLUS parsed_plus . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    multiplicative_expr            shift and go to state 204
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 182

    (95) additive_expr -> additive_expr MINUS parsed_minus . multiplicative_expr
    (98) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (100) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (104) multiplicative_expr -> . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    multiplicative_expr            shift and go to state 205
    unary_expr                     shift and go to state 88
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 183

    (98) multiplicative_expr -> multiplicative_expr TIMES parsed_times . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    unary_expr                     shift and go to state 206
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 184

    (100) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    unary_expr                     shift and go to state 207
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 185

    (102) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo . unary_expr
    (105) unary_expr -> . MINUS postfix_expr
    (106) unary_expr -> . PLUS postfix_expr
    (107) unary_expr -> . NOT postfix_expr
    (108) unary_expr -> . postfix_expr
    (109) postfix_expr -> . LPAREN expr RPAREN
    (110) postfix_expr -> . variable_access
    (111) postfix_expr -> . function_call
    (112) postfix_expr -> . constant
    (54) variable_access -> . ID parsed_id_variable_access dims_access
    (60) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (61) function_call -> . ID LPAREN RPAREN SEMI
    (113) constant -> . CONST_INT
    (114) constant -> . CONST_REAL
    (115) constant -> . CONST_CHAR
    (116) constant -> . constant_bool
    (117) constant_bool -> . TRUE
    (118) constant_bool -> . FALSE

    MINUS           shift and go to state 87
    PLUS            shift and go to state 85
    NOT             shift and go to state 90
    LPAREN          shift and go to state 91
    ID              shift and go to state 95
    CONST_INT       shift and go to state 96
    CONST_REAL      shift and go to state 97
    CONST_CHAR      shift and go to state 98
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101

    unary_expr                     shift and go to state 208
    postfix_expr                   shift and go to state 89
    variable_access                shift and go to state 92
    function_call                  shift and go to state 93
    constant                       shift and go to state 94
    constant_bool                  shift and go to state 99

state 186

    (109) postfix_expr -> LPAREN expr RPAREN .

    TIMES           reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN_EQUAL     reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN           reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN_EQUAL     reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN           reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    NEQUAL          reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 109 (postfix_expr -> LPAREN expr RPAREN .)


state 187

    (76) while -> WHILE LPAREN expr RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 209

state 188

    (77) for -> FROM LPAREN ID ASGMT . CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM LPAREN ID ASGMT . CONST_INT COLON CONST_INT RPAREN instruction_block

    CONST_INT       shift and go to state 210


state 189

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 211

state 190

    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .

    START           reduce using rule 12 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)
    FUNCTION        reduce using rule 12 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)


state 191

    (22) function_definition_params -> function_definition_params COMMA single_function_definition_param .

    RPAREN          reduce using rule 22 (function_definition_params -> function_definition_params COMMA single_function_definition_param .)
    COMMA           reduce using rule 22 (function_definition_params -> function_definition_params COMMA single_function_definition_param .)


state 192

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 13 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 13 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 193

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 212

state 194

    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .

    START           reduce using rule 16 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)
    FUNCTION        reduce using rule 16 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)


state 195

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 17 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 17 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 196

    (39) dim_definition -> LBRACKET CONST_INT RBRACKET .

    LBRACKET        reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)
    SEMI            reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)
    COMMA           reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)


state 197

    (51) assignment -> variable_access ASGMT parsed_asgmt expr SEMI .

    RBRACE          reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    ID              reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    READ            reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    PRINT           reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    IF              reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    RETURN          reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    WHILE           reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    FROM            reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)


state 198

    (60) function_call -> ID LPAREN function_call_params RPAREN SEMI .

    RBRACE          reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    ID              reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    READ            reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    PRINT           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    IF              reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RETURN          reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    WHILE           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    FROM            reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    TIMES           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    DIVIDE          reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    MODULO          reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    LTHAN_EQUAL     reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    LTHAN           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    GTHAN_EQUAL     reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    GTHAN           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    PLUS            reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    MINUS           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    EQUAL           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    NEQUAL          reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    AND             reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    SEMI            reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    OR              reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RPAREN          reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    COMMA           reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RBRACKET        reduce using rule 60 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)


state 199

    (62) function_call_params -> function_call_params COMMA single_function_call_param .

    RPAREN          reduce using rule 62 (function_call_params -> function_call_params COMMA single_function_call_param .)
    COMMA           reduce using rule 62 (function_call_params -> function_call_params COMMA single_function_call_param .)


state 200

    (59) single_dim_access -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    ASGMT           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    LTHAN_EQUAL     reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    LTHAN           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    GTHAN_EQUAL     reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    GTHAN           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    NEQUAL          reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 59 (single_dim_access -> LBRACKET expr RBRACKET .)


state 201

    (66) print -> PRINT LPAREN print_params RPAREN SEMI .

    RBRACE          reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    ID              reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    READ            reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    PRINT           reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    IF              reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    RETURN          reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    WHILE           reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    FROM            reduce using rule 66 (print -> PRINT LPAREN print_params RPAREN SEMI .)


state 202

    (68) print_params -> print_params COMMA single_print_param .

    RPAREN          reduce using rule 68 (print_params -> print_params COMMA single_print_param .)
    COMMA           reduce using rule 68 (print_params -> print_params COMMA single_print_param .)


state 203

    (72) conditional -> IF LPAREN expr RPAREN instruction_block . ELSE instruction_block
    (73) conditional -> IF LPAREN expr RPAREN instruction_block .

    ELSE            shift and go to state 213
    RBRACE          reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    ID              reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    READ            reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    PRINT           reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    IF              reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    RETURN          reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    WHILE           reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)
    FROM            reduce using rule 73 (conditional -> IF LPAREN expr RPAREN instruction_block .)


state 204

    (93) additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .
    (98) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (100) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    LTHAN           reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN           reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    PLUS            reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    MINUS           reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    EQUAL           reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    NEQUAL          reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    AND             reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    SEMI            reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    OR              reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RPAREN          reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    COMMA           reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RBRACKET        reduce using rule 93 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    MODULO          shift and go to state 144


state 205

    (95) additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .
    (98) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (100) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (102) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    LTHAN           reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN           reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    PLUS            reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    MINUS           reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    EQUAL           reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    NEQUAL          reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    AND             reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    SEMI            reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    OR              reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RPAREN          reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    COMMA           reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RBRACKET        reduce using rule 95 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    TIMES           shift and go to state 142
    DIVIDE          shift and go to state 143
    MODULO          shift and go to state 144


state 206

    (98) multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .

    TIMES           reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    DIVIDE          reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MODULO          reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN_EQUAL     reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN           reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN_EQUAL     reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN           reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    PLUS            reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MINUS           reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    EQUAL           reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    NEQUAL          reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    AND             reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    SEMI            reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    OR              reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RPAREN          reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    COMMA           reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RBRACKET        reduce using rule 98 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)


state 207

    (100) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .

    TIMES           reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    DIVIDE          reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MODULO          reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN_EQUAL     reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN           reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN_EQUAL     reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN           reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    PLUS            reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MINUS           reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    EQUAL           reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    NEQUAL          reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    AND             reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    SEMI            reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    OR              reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RPAREN          reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    COMMA           reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RBRACKET        reduce using rule 100 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)


state 208

    (102) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .

    TIMES           reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    DIVIDE          reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MODULO          reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN_EQUAL     reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN           reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN_EQUAL     reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN           reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    PLUS            reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MINUS           reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    EQUAL           reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    NEQUAL          reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    AND             reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    SEMI            reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    OR              reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RPAREN          reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    COMMA           reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RBRACKET        reduce using rule 102 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)


state 209

    (76) while -> WHILE LPAREN expr RPAREN instruction_block .

    RBRACE          reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    ID              reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    READ            reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    PRINT           reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    IF              reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    RETURN          reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    WHILE           reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    FROM            reduce using rule 76 (while -> WHILE LPAREN expr RPAREN instruction_block .)


state 210

    (77) for -> FROM LPAREN ID ASGMT CONST_INT . COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM LPAREN ID ASGMT CONST_INT . COLON CONST_INT RPAREN instruction_block

    COLON           shift and go to state 214


state 211

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 11 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 11 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 212

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 15 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 15 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 213

    (72) conditional -> IF LPAREN expr RPAREN instruction_block ELSE . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 215

state 214

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON . CONST_INT COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM LPAREN ID ASGMT CONST_INT COLON . CONST_INT RPAREN instruction_block

    CONST_INT       shift and go to state 216


state 215

    (72) conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .

    RBRACE          reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    ID              reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    READ            reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    PRINT           reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    IF              reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    RETURN          reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    WHILE           reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)
    FROM            reduce using rule 72 (conditional -> IF LPAREN expr RPAREN instruction_block ELSE instruction_block .)


state 216

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT . COLON CONST_INT RPAREN instruction_block
    (78) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT . RPAREN instruction_block

    COLON           shift and go to state 217
    RPAREN          shift and go to state 218


state 217

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON . CONST_INT RPAREN instruction_block

    CONST_INT       shift and go to state 219


state 218

    (78) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 220

state 219

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT . RPAREN instruction_block

    RPAREN          shift and go to state 221


state 220

    (78) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .

    RBRACE          reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    ID              reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    READ            reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    PRINT           reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    IF              reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    RETURN          reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    WHILE           reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    FROM            reduce using rule 78 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)


state 221

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 222

state 222

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .

    RBRACE          reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    ID              reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    READ            reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    PRINT           reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    IF              reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    RETURN          reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    WHILE           reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    FROM            reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)

