Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> init start
Rule 2     init -> <empty>
Rule 3     start -> global_variables_declaration functions_definition entry_point_definition
Rule 4     start -> global_variables_declaration entry_point_definition
Rule 5     start -> functions_definition entry_point_definition
Rule 6     start -> entry_point_definition
Rule 7     global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration
Rule 8     parsed_global_scope -> <empty>
Rule 9     functions_definition -> functions_definition single_function_definition
Rule 10    functions_definition -> single_function_definition
Rule 11    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 12    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
Rule 13    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 14    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
Rule 15    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 16    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
Rule 17    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 18    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
Rule 19    parsed_function_id -> <empty>
Rule 20    parsed_function_return_type -> <empty>
Rule 21    parsed_function_void_return_type -> <empty>
Rule 22    function_definition_params -> function_definition_params COMMA single_function_definition_param
Rule 23    function_definition_params -> single_function_definition_param
Rule 24    single_function_definition_param -> type ID
Rule 25    entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 26    entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block
Rule 27    parsed_main_id -> <empty>
Rule 28    local_variables_declaration -> LOCAL variables_declaration
Rule 29    variables_declaration -> VARIABLES COLON distinct_type_variables_declaration
Rule 30    distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration
Rule 31    distinct_type_variables_declaration -> shared_type_variables_declaration
Rule 32    shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI
Rule 33    parsed_type -> <empty>
Rule 34    shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration
Rule 35    shared_type_variables_declaration_list -> single_variable_declaration
Rule 36    single_variable_declaration -> ID dim_definition dim_definition
Rule 37    single_variable_declaration -> ID dim_definition
Rule 38    single_variable_declaration -> ID
Rule 39    dim_definition -> LBRACKET CONST_INT RBRACKET
Rule 40    instruction_block -> LBRACE statements RBRACE
Rule 41    instruction_block -> LBRACE RBRACE
Rule 42    statements -> statements single_statement
Rule 43    statements -> single_statement
Rule 44    single_statement -> assignment
Rule 45    single_statement -> function_call
Rule 46    single_statement -> print
Rule 47    single_statement -> conditional
Rule 48    single_statement -> loop
Rule 49    single_statement -> return
Rule 50    assignment -> variable_access ASGMT expr SEMI
Rule 51    assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI
Rule 52    variable_access -> ID parsed_id_variable_access dims_access
Rule 53    parsed_id_variable_access -> <empty>
Rule 54    dims_access -> single_dim_access single_dim_access
Rule 55    dims_access -> single_dim_access
Rule 56    dims_access -> empty
Rule 57    single_dim_access -> LBRACKET expr RBRACKET
Rule 58    function_call -> ID LPAREN function_call_params RPAREN SEMI
Rule 59    function_call -> ID LPAREN RPAREN SEMI
Rule 60    function_call_params -> function_call_params COMMA single_function_call_param
Rule 61    function_call_params -> single_function_call_param
Rule 62    single_function_call_param -> expr
Rule 63    print -> PRINT LPAREN print_params RPAREN SEMI
Rule 64    print -> PRINT LPAREN RPAREN SEMI
Rule 65    print_params -> print_params COMMA single_print_param
Rule 66    print_params -> single_print_param
Rule 67    single_print_param -> expr
Rule 68    conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
Rule 69    conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block
Rule 70    parsed_if_expr -> <empty>
Rule 71    parsed_else -> <empty>
Rule 72    loop -> while
Rule 73    loop -> for
Rule 74    while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
Rule 75    parsed_while -> <empty>
Rule 76    parsed_while_expr -> <empty>
Rule 77    for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block
Rule 78    for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block
Rule 79    for_init -> ID ASGMT CONST_INT
Rule 80    for_end_value_no_step -> CONST_INT
Rule 81    for_increment -> CONST_INT
Rule 82    for_end_value_step -> expr
Rule 83    for_increment -> MINUS CONST_INT
Rule 84    return -> RETURN expr SEMI
Rule 85    return -> RETURN SEMI
Rule 86    expr -> expr OR and_expr
Rule 87    expr -> and_expr
Rule 88    and_expr -> equality_expr AND equality_expr
Rule 89    and_expr -> equality_expr
Rule 90    equality_expr -> relational_expr EQUAL parsed_equal relational_expr
Rule 91    parsed_equal -> <empty>
Rule 92    equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr
Rule 93    parsed_nequal -> <empty>
Rule 94    equality_expr -> relational_expr
Rule 95    relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
Rule 96    parsed_lthan_equal -> <empty>
Rule 97    relational_expr -> additive_expr LTHAN parsed_lthan additive_expr
Rule 98    parsed_lthan -> <empty>
Rule 99    relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
Rule 100   parsed_gthan_equal -> <empty>
Rule 101   relational_expr -> additive_expr GTHAN parsed_gthan additive_expr
Rule 102   parsed_gthan -> <empty>
Rule 103   relational_expr -> additive_expr
Rule 104   additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr
Rule 105   parsed_plus -> <empty>
Rule 106   additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr
Rule 107   parsed_minus -> <empty>
Rule 108   additive_expr -> multiplicative_expr
Rule 109   multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr
Rule 110   parsed_times -> <empty>
Rule 111   multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr
Rule 112   parsed_divide -> <empty>
Rule 113   multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr
Rule 114   parsed_modulo -> <empty>
Rule 115   multiplicative_expr -> unary_expr
Rule 116   unary_expr -> MINUS postfix_expr
Rule 117   unary_expr -> PLUS postfix_expr
Rule 118   unary_expr -> NOT postfix_expr
Rule 119   unary_expr -> postfix_expr
Rule 120   postfix_expr -> LPAREN expr RPAREN
Rule 121   postfix_expr -> variable_access
Rule 122   postfix_expr -> function_call
Rule 123   postfix_expr -> constant
Rule 124   constant -> CONST_INT
Rule 125   constant -> CONST_REAL
Rule 126   constant -> CONST_CHAR
Rule 127   constant -> CONST_STRING
Rule 128   constant -> constant_bool
Rule 129   constant_bool -> TRUE
Rule 130   constant_bool -> FALSE
Rule 131   type -> INT
Rule 132   type -> REAL
Rule 133   type -> CHAR
Rule 134   type -> BOOL
Rule 135   empty -> <empty>

Terminals, with rules where they appear

AND                  : 88
ASGMT                : 50 51 79
BOOL                 : 134
CHAR                 : 133
COLON                : 29 77 77 78
COMMA                : 22 34 60 65
CONST_CHAR           : 126
CONST_INT            : 39 79 80 81 83 124
CONST_REAL           : 125
CONST_STRING         : 127
DIVIDE               : 111
ELSE                 : 68
EQUAL                : 90
FALSE                : 130
FROM                 : 77 78
FUNCTION             : 11 12 13 14 15 16 17 18
GLOBAL               : 7
GTHAN                : 101
GTHAN_EQUAL          : 99
ID                   : 11 12 13 14 15 16 17 18 24 36 37 38 52 58 59 79
IF                   : 68 69
INT                  : 131
LBRACE               : 40 41
LBRACKET             : 39 57
LOCAL                : 28
LPAREN               : 11 12 13 14 15 16 17 18 25 26 51 58 59 63 64 68 69 74 77 78 120
LTHAN                : 97
LTHAN_EQUAL          : 95
MINUS                : 83 106 116
MODULO               : 113
NEQUAL               : 92
NOT                  : 118
OR                   : 86
PLUS                 : 104 117
PRINT                : 63 64
RBRACE               : 40 41
RBRACKET             : 39 57
READ                 : 51
REAL                 : 132
RETURN               : 84 85
RPAREN               : 11 12 13 14 15 16 17 18 25 26 51 58 59 63 64 68 69 74 77 78 120
SEMI                 : 32 50 51 58 59 63 64 84 85
START                : 25 26
TIMES                : 109
TRUE                 : 129
VARIABLES            : 29
VOID                 : 15 16 17 18
WHILE                : 74
error                : 

Nonterminals, with rules where they appear

additive_expr        : 95 95 97 97 99 99 101 101 103 104 106
and_expr             : 86 87
assignment           : 44
conditional          : 47
constant             : 123
constant_bool        : 128
dim_definition       : 36 36 37
dims_access          : 52
distinct_type_variables_declaration : 29 30
empty                : 56
entry_point_definition : 3 4 5 6
equality_expr        : 88 88 89
expr                 : 50 57 62 67 68 69 74 82 84 86 120
for                  : 73
for_end_value_no_step : 78
for_end_value_step   : 77
for_increment        : 77
for_init             : 77 78
function_call        : 45 122
function_call_params : 58 60
function_definition_params : 11 12 15 16 22
functions_definition : 3 5 9
global_variables_declaration : 3 4
init                 : 1
instruction_block    : 11 12 13 14 15 16 17 18 25 26 68 68 69 74 77 78
local_variables_declaration : 11 13 15 17 25
loop                 : 48
multiplicative_expr  : 104 106 108 109 111 113
parsed_divide        : 111
parsed_else          : 68
parsed_equal         : 90
parsed_function_id   : 11 12 13 14 15 16 17 18
parsed_function_return_type : 11 12 13 14
parsed_function_void_return_type : 15 16 17 18
parsed_global_scope  : 7
parsed_gthan         : 101
parsed_gthan_equal   : 99
parsed_id_variable_access : 52
parsed_if_expr       : 68 69
parsed_lthan         : 97
parsed_lthan_equal   : 95
parsed_main_id       : 25 26
parsed_minus         : 106
parsed_modulo        : 113
parsed_nequal        : 92
parsed_plus          : 104
parsed_times         : 109
parsed_type          : 32
parsed_while         : 74
parsed_while_expr    : 74
postfix_expr         : 116 117 118 119
print                : 46
print_params         : 63 65
program              : 0
relational_expr      : 90 90 92 92 94
return               : 49
shared_type_variables_declaration : 30 31
shared_type_variables_declaration_list : 32 34
single_dim_access    : 54 54 55
single_function_call_param : 60 61
single_function_definition : 9 10
single_function_definition_param : 22 23
single_print_param   : 65 66
single_statement     : 42 43
single_variable_declaration : 34 35
start                : 1
statements           : 40 42
type                 : 11 12 13 14 24 32
unary_expr           : 109 111 113 115
variable_access      : 50 51 121
variables_declaration : 7 28
while                : 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init start
    (2) init -> .

    GLOBAL          reduce using rule 2 (init -> .)
    START           reduce using rule 2 (init -> .)
    FUNCTION        reduce using rule 2 (init -> .)

    program                        shift and go to state 1
    init                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> init . start
    (3) start -> . global_variables_declaration functions_definition entry_point_definition
    (4) start -> . global_variables_declaration entry_point_definition
    (5) start -> . functions_definition entry_point_definition
    (6) start -> . entry_point_definition
    (7) global_variables_declaration -> . GLOBAL parsed_global_scope variables_declaration
    (9) functions_definition -> . functions_definition single_function_definition
    (10) functions_definition -> . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    GLOBAL          shift and go to state 7
    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    start                          shift and go to state 3
    global_variables_declaration   shift and go to state 4
    functions_definition           shift and go to state 5
    entry_point_definition         shift and go to state 6
    single_function_definition     shift and go to state 8

state 3

    (1) program -> init start .

    $end            reduce using rule 1 (program -> init start .)


state 4

    (3) start -> global_variables_declaration . functions_definition entry_point_definition
    (4) start -> global_variables_declaration . entry_point_definition
    (9) functions_definition -> . functions_definition single_function_definition
    (10) functions_definition -> . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    functions_definition           shift and go to state 11
    entry_point_definition         shift and go to state 12
    single_function_definition     shift and go to state 8

state 5

    (5) start -> functions_definition . entry_point_definition
    (9) functions_definition -> functions_definition . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    entry_point_definition         shift and go to state 13
    single_function_definition     shift and go to state 14

state 6

    (6) start -> entry_point_definition .

    $end            reduce using rule 6 (start -> entry_point_definition .)


state 7

    (7) global_variables_declaration -> GLOBAL . parsed_global_scope variables_declaration
    (8) parsed_global_scope -> .

    VARIABLES       reduce using rule 8 (parsed_global_scope -> .)

    parsed_global_scope            shift and go to state 15

state 8

    (10) functions_definition -> single_function_definition .

    START           reduce using rule 10 (functions_definition -> single_function_definition .)
    FUNCTION        reduce using rule 10 (functions_definition -> single_function_definition .)


state 9

    (25) entry_point_definition -> START . parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START . parsed_main_id LPAREN RPAREN instruction_block
    (27) parsed_main_id -> .

    LPAREN          reduce using rule 27 (parsed_main_id -> .)

    parsed_main_id                 shift and go to state 16

state 10

    (11) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (131) type -> . INT
    (132) type -> . REAL
    (133) type -> . CHAR
    (134) type -> . BOOL

    VOID            shift and go to state 18
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 17

state 11

    (3) start -> global_variables_declaration functions_definition . entry_point_definition
    (9) functions_definition -> functions_definition . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    entry_point_definition         shift and go to state 23
    single_function_definition     shift and go to state 14

state 12

    (4) start -> global_variables_declaration entry_point_definition .

    $end            reduce using rule 4 (start -> global_variables_declaration entry_point_definition .)


state 13

    (5) start -> functions_definition entry_point_definition .

    $end            reduce using rule 5 (start -> functions_definition entry_point_definition .)


state 14

    (9) functions_definition -> functions_definition single_function_definition .

    START           reduce using rule 9 (functions_definition -> functions_definition single_function_definition .)
    FUNCTION        reduce using rule 9 (functions_definition -> functions_definition single_function_definition .)


state 15

    (7) global_variables_declaration -> GLOBAL parsed_global_scope . variables_declaration
    (29) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 25

    variables_declaration          shift and go to state 24

state 16

    (25) entry_point_definition -> START parsed_main_id . LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 26


state 17

    (11) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (20) parsed_function_return_type -> .

    ID              reduce using rule 20 (parsed_function_return_type -> .)

    parsed_function_return_type    shift and go to state 27

state 18

    (15) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (21) parsed_function_void_return_type -> .

    ID              reduce using rule 21 (parsed_function_void_return_type -> .)

    parsed_function_void_return_type shift and go to state 28

state 19

    (131) type -> INT .

    ID              reduce using rule 131 (type -> INT .)


state 20

    (132) type -> REAL .

    ID              reduce using rule 132 (type -> REAL .)


state 21

    (133) type -> CHAR .

    ID              reduce using rule 133 (type -> CHAR .)


state 22

    (134) type -> BOOL .

    ID              reduce using rule 134 (type -> BOOL .)


state 23

    (3) start -> global_variables_declaration functions_definition entry_point_definition .

    $end            reduce using rule 3 (start -> global_variables_declaration functions_definition entry_point_definition .)


state 24

    (7) global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .

    START           reduce using rule 7 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)
    FUNCTION        reduce using rule 7 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)


state 25

    (29) variables_declaration -> VARIABLES . COLON distinct_type_variables_declaration

    COLON           shift and go to state 29


state 26

    (25) entry_point_definition -> START parsed_main_id LPAREN . RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id LPAREN . RPAREN instruction_block

    RPAREN          shift and go to state 30


state 27

    (11) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN RPAREN instruction_block

    ID              shift and go to state 31


state 28

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN RPAREN instruction_block

    ID              shift and go to state 32


state 29

    (29) variables_declaration -> VARIABLES COLON . distinct_type_variables_declaration
    (30) distinct_type_variables_declaration -> . distinct_type_variables_declaration shared_type_variables_declaration
    (31) distinct_type_variables_declaration -> . shared_type_variables_declaration
    (32) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (131) type -> . INT
    (132) type -> . REAL
    (133) type -> . CHAR
    (134) type -> . BOOL

    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    distinct_type_variables_declaration shift and go to state 33
    shared_type_variables_declaration shift and go to state 34
    type                           shift and go to state 35

state 30

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN . local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 36
    instruction_block              shift and go to state 37

state 31

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN RPAREN instruction_block
    (19) parsed_function_id -> .

    LPAREN          reduce using rule 19 (parsed_function_id -> .)

    parsed_function_id             shift and go to state 40

state 32

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN RPAREN instruction_block
    (19) parsed_function_id -> .

    LPAREN          reduce using rule 19 (parsed_function_id -> .)

    parsed_function_id             shift and go to state 41

state 33

    (29) variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .
    (30) distinct_type_variables_declaration -> distinct_type_variables_declaration . shared_type_variables_declaration
    (32) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (131) type -> . INT
    (132) type -> . REAL
    (133) type -> . CHAR
    (134) type -> . BOOL

    START           reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    FUNCTION        reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    LBRACE          reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    shared_type_variables_declaration shift and go to state 42
    type                           shift and go to state 35

state 34

    (31) distinct_type_variables_declaration -> shared_type_variables_declaration .

    INT             reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    REAL            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    CHAR            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    BOOL            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    START           reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    FUNCTION        reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    LBRACE          reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)


state 35

    (32) shared_type_variables_declaration -> type . parsed_type shared_type_variables_declaration_list SEMI
    (33) parsed_type -> .

    ID              reduce using rule 33 (parsed_type -> .)

    parsed_type                    shift and go to state 43

state 36

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 44

state 37

    (26) entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block .

    $end            reduce using rule 26 (entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block .)


state 38

    (28) local_variables_declaration -> LOCAL . variables_declaration
    (29) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 25

    variables_declaration          shift and go to state 45

state 39

    (40) instruction_block -> LBRACE . statements RBRACE
    (41) instruction_block -> LBRACE . RBRACE
    (42) statements -> . statements single_statement
    (43) statements -> . single_statement
    (44) single_statement -> . assignment
    (45) single_statement -> . function_call
    (46) single_statement -> . print
    (47) single_statement -> . conditional
    (48) single_statement -> . loop
    (49) single_statement -> . return
    (50) assignment -> . variable_access ASGMT expr SEMI
    (51) assignment -> . variable_access ASGMT READ LPAREN RPAREN SEMI
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (63) print -> . PRINT LPAREN print_params RPAREN SEMI
    (64) print -> . PRINT LPAREN RPAREN SEMI
    (68) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block
    (72) loop -> . while
    (73) loop -> . for
    (84) return -> . RETURN expr SEMI
    (85) return -> . RETURN SEMI
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (74) while -> . WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
    (77) for -> . FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block
    (78) for -> . FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block

    RBRACE          shift and go to state 47
    ID              shift and go to state 56
    PRINT           shift and go to state 57
    IF              shift and go to state 58
    RETURN          shift and go to state 61
    WHILE           shift and go to state 62
    FROM            shift and go to state 63

    statements                     shift and go to state 46
    single_statement               shift and go to state 48
    assignment                     shift and go to state 49
    function_call                  shift and go to state 50
    print                          shift and go to state 51
    conditional                    shift and go to state 52
    loop                           shift and go to state 53
    return                         shift and go to state 54
    variable_access                shift and go to state 55
    while                          shift and go to state 59
    for                            shift and go to state 60

state 40

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 64


state 41

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 65


state 42

    (30) distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .

    INT             reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    REAL            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    CHAR            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    BOOL            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    START           reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    FUNCTION        reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    LBRACE          reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)


state 43

    (32) shared_type_variables_declaration -> type parsed_type . shared_type_variables_declaration_list SEMI
    (34) shared_type_variables_declaration_list -> . shared_type_variables_declaration_list COMMA single_variable_declaration
    (35) shared_type_variables_declaration_list -> . single_variable_declaration
    (36) single_variable_declaration -> . ID dim_definition dim_definition
    (37) single_variable_declaration -> . ID dim_definition
    (38) single_variable_declaration -> . ID

    ID              shift and go to state 68

    shared_type_variables_declaration_list shift and go to state 66
    single_variable_declaration    shift and go to state 67

state 44

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .

    $end            reduce using rule 25 (entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 45

    (28) local_variables_declaration -> LOCAL variables_declaration .

    LBRACE          reduce using rule 28 (local_variables_declaration -> LOCAL variables_declaration .)


state 46

    (40) instruction_block -> LBRACE statements . RBRACE
    (42) statements -> statements . single_statement
    (44) single_statement -> . assignment
    (45) single_statement -> . function_call
    (46) single_statement -> . print
    (47) single_statement -> . conditional
    (48) single_statement -> . loop
    (49) single_statement -> . return
    (50) assignment -> . variable_access ASGMT expr SEMI
    (51) assignment -> . variable_access ASGMT READ LPAREN RPAREN SEMI
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (63) print -> . PRINT LPAREN print_params RPAREN SEMI
    (64) print -> . PRINT LPAREN RPAREN SEMI
    (68) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block
    (72) loop -> . while
    (73) loop -> . for
    (84) return -> . RETURN expr SEMI
    (85) return -> . RETURN SEMI
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (74) while -> . WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
    (77) for -> . FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block
    (78) for -> . FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block

    RBRACE          shift and go to state 69
    ID              shift and go to state 56
    PRINT           shift and go to state 57
    IF              shift and go to state 58
    RETURN          shift and go to state 61
    WHILE           shift and go to state 62
    FROM            shift and go to state 63

    single_statement               shift and go to state 70
    assignment                     shift and go to state 49
    function_call                  shift and go to state 50
    print                          shift and go to state 51
    conditional                    shift and go to state 52
    loop                           shift and go to state 53
    return                         shift and go to state 54
    variable_access                shift and go to state 55
    while                          shift and go to state 59
    for                            shift and go to state 60

state 47

    (41) instruction_block -> LBRACE RBRACE .

    $end            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    START           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    ELSE            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    ID              reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    PRINT           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    IF              reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    RETURN          reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    WHILE           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    FROM            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)


state 48

    (43) statements -> single_statement .

    RBRACE          reduce using rule 43 (statements -> single_statement .)
    ID              reduce using rule 43 (statements -> single_statement .)
    PRINT           reduce using rule 43 (statements -> single_statement .)
    IF              reduce using rule 43 (statements -> single_statement .)
    RETURN          reduce using rule 43 (statements -> single_statement .)
    WHILE           reduce using rule 43 (statements -> single_statement .)
    FROM            reduce using rule 43 (statements -> single_statement .)


state 49

    (44) single_statement -> assignment .

    RBRACE          reduce using rule 44 (single_statement -> assignment .)
    ID              reduce using rule 44 (single_statement -> assignment .)
    PRINT           reduce using rule 44 (single_statement -> assignment .)
    IF              reduce using rule 44 (single_statement -> assignment .)
    RETURN          reduce using rule 44 (single_statement -> assignment .)
    WHILE           reduce using rule 44 (single_statement -> assignment .)
    FROM            reduce using rule 44 (single_statement -> assignment .)


state 50

    (45) single_statement -> function_call .

    RBRACE          reduce using rule 45 (single_statement -> function_call .)
    ID              reduce using rule 45 (single_statement -> function_call .)
    PRINT           reduce using rule 45 (single_statement -> function_call .)
    IF              reduce using rule 45 (single_statement -> function_call .)
    RETURN          reduce using rule 45 (single_statement -> function_call .)
    WHILE           reduce using rule 45 (single_statement -> function_call .)
    FROM            reduce using rule 45 (single_statement -> function_call .)


state 51

    (46) single_statement -> print .

    RBRACE          reduce using rule 46 (single_statement -> print .)
    ID              reduce using rule 46 (single_statement -> print .)
    PRINT           reduce using rule 46 (single_statement -> print .)
    IF              reduce using rule 46 (single_statement -> print .)
    RETURN          reduce using rule 46 (single_statement -> print .)
    WHILE           reduce using rule 46 (single_statement -> print .)
    FROM            reduce using rule 46 (single_statement -> print .)


state 52

    (47) single_statement -> conditional .

    RBRACE          reduce using rule 47 (single_statement -> conditional .)
    ID              reduce using rule 47 (single_statement -> conditional .)
    PRINT           reduce using rule 47 (single_statement -> conditional .)
    IF              reduce using rule 47 (single_statement -> conditional .)
    RETURN          reduce using rule 47 (single_statement -> conditional .)
    WHILE           reduce using rule 47 (single_statement -> conditional .)
    FROM            reduce using rule 47 (single_statement -> conditional .)


state 53

    (48) single_statement -> loop .

    RBRACE          reduce using rule 48 (single_statement -> loop .)
    ID              reduce using rule 48 (single_statement -> loop .)
    PRINT           reduce using rule 48 (single_statement -> loop .)
    IF              reduce using rule 48 (single_statement -> loop .)
    RETURN          reduce using rule 48 (single_statement -> loop .)
    WHILE           reduce using rule 48 (single_statement -> loop .)
    FROM            reduce using rule 48 (single_statement -> loop .)


state 54

    (49) single_statement -> return .

    RBRACE          reduce using rule 49 (single_statement -> return .)
    ID              reduce using rule 49 (single_statement -> return .)
    PRINT           reduce using rule 49 (single_statement -> return .)
    IF              reduce using rule 49 (single_statement -> return .)
    RETURN          reduce using rule 49 (single_statement -> return .)
    WHILE           reduce using rule 49 (single_statement -> return .)
    FROM            reduce using rule 49 (single_statement -> return .)


state 55

    (50) assignment -> variable_access . ASGMT expr SEMI
    (51) assignment -> variable_access . ASGMT READ LPAREN RPAREN SEMI

    ASGMT           shift and go to state 71


state 56

    (58) function_call -> ID . LPAREN function_call_params RPAREN SEMI
    (59) function_call -> ID . LPAREN RPAREN SEMI
    (52) variable_access -> ID . parsed_id_variable_access dims_access
    (53) parsed_id_variable_access -> .

    LPAREN          shift and go to state 72
    LBRACKET        reduce using rule 53 (parsed_id_variable_access -> .)
    ASGMT           reduce using rule 53 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 73

state 57

    (63) print -> PRINT . LPAREN print_params RPAREN SEMI
    (64) print -> PRINT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 74


state 58

    (68) conditional -> IF . LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF . LPAREN expr RPAREN parsed_if_expr instruction_block

    LPAREN          shift and go to state 75


state 59

    (72) loop -> while .

    RBRACE          reduce using rule 72 (loop -> while .)
    ID              reduce using rule 72 (loop -> while .)
    PRINT           reduce using rule 72 (loop -> while .)
    IF              reduce using rule 72 (loop -> while .)
    RETURN          reduce using rule 72 (loop -> while .)
    WHILE           reduce using rule 72 (loop -> while .)
    FROM            reduce using rule 72 (loop -> while .)


state 60

    (73) loop -> for .

    RBRACE          reduce using rule 73 (loop -> for .)
    ID              reduce using rule 73 (loop -> for .)
    PRINT           reduce using rule 73 (loop -> for .)
    IF              reduce using rule 73 (loop -> for .)
    RETURN          reduce using rule 73 (loop -> for .)
    WHILE           reduce using rule 73 (loop -> for .)
    FROM            reduce using rule 73 (loop -> for .)


state 61

    (84) return -> RETURN . expr SEMI
    (85) return -> RETURN . SEMI
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    SEMI            shift and go to state 77
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 76
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 62

    (74) while -> WHILE . parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
    (75) parsed_while -> .

    LPAREN          reduce using rule 75 (parsed_while -> .)

    parsed_while                   shift and go to state 100

state 63

    (77) for -> FROM . LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block
    (78) for -> FROM . LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block

    LPAREN          shift and go to state 101


state 64

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . RPAREN instruction_block
    (22) function_definition_params -> . function_definition_params COMMA single_function_definition_param
    (23) function_definition_params -> . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (131) type -> . INT
    (132) type -> . REAL
    (133) type -> . CHAR
    (134) type -> . BOOL

    RPAREN          shift and go to state 104
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 102
    function_definition_params     shift and go to state 103
    single_function_definition_param shift and go to state 105

state 65

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . RPAREN instruction_block
    (22) function_definition_params -> . function_definition_params COMMA single_function_definition_param
    (23) function_definition_params -> . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (131) type -> . INT
    (132) type -> . REAL
    (133) type -> . CHAR
    (134) type -> . BOOL

    RPAREN          shift and go to state 107
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    function_definition_params     shift and go to state 106
    single_function_definition_param shift and go to state 105
    type                           shift and go to state 102

state 66

    (32) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list . SEMI
    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list . COMMA single_variable_declaration

    SEMI            shift and go to state 108
    COMMA           shift and go to state 109


state 67

    (35) shared_type_variables_declaration_list -> single_variable_declaration .

    SEMI            reduce using rule 35 (shared_type_variables_declaration_list -> single_variable_declaration .)
    COMMA           reduce using rule 35 (shared_type_variables_declaration_list -> single_variable_declaration .)


state 68

    (36) single_variable_declaration -> ID . dim_definition dim_definition
    (37) single_variable_declaration -> ID . dim_definition
    (38) single_variable_declaration -> ID .
    (39) dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 38 (single_variable_declaration -> ID .)
    COMMA           reduce using rule 38 (single_variable_declaration -> ID .)
    LBRACKET        shift and go to state 111

    dim_definition                 shift and go to state 110

state 69

    (40) instruction_block -> LBRACE statements RBRACE .

    $end            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    START           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    ID              reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    IF              reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    FROM            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)


state 70

    (42) statements -> statements single_statement .

    RBRACE          reduce using rule 42 (statements -> statements single_statement .)
    ID              reduce using rule 42 (statements -> statements single_statement .)
    PRINT           reduce using rule 42 (statements -> statements single_statement .)
    IF              reduce using rule 42 (statements -> statements single_statement .)
    RETURN          reduce using rule 42 (statements -> statements single_statement .)
    WHILE           reduce using rule 42 (statements -> statements single_statement .)
    FROM            reduce using rule 42 (statements -> statements single_statement .)


state 71

    (50) assignment -> variable_access ASGMT . expr SEMI
    (51) assignment -> variable_access ASGMT . READ LPAREN RPAREN SEMI
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    READ            shift and go to state 113
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    variable_access                shift and go to state 89
    expr                           shift and go to state 112
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 72

    (58) function_call -> ID LPAREN . function_call_params RPAREN SEMI
    (59) function_call -> ID LPAREN . RPAREN SEMI
    (60) function_call_params -> . function_call_params COMMA single_function_call_param
    (61) function_call_params -> . single_function_call_param
    (62) single_function_call_param -> . expr
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    RPAREN          shift and go to state 115
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    function_call_params           shift and go to state 114
    single_function_call_param     shift and go to state 116
    expr                           shift and go to state 117
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 73

    (52) variable_access -> ID parsed_id_variable_access . dims_access
    (54) dims_access -> . single_dim_access single_dim_access
    (55) dims_access -> . single_dim_access
    (56) dims_access -> . empty
    (57) single_dim_access -> . LBRACKET expr RBRACKET
    (135) empty -> .

    LBRACKET        shift and go to state 121
    ASGMT           reduce using rule 135 (empty -> .)
    TIMES           reduce using rule 135 (empty -> .)
    DIVIDE          reduce using rule 135 (empty -> .)
    MODULO          reduce using rule 135 (empty -> .)
    LTHAN_EQUAL     reduce using rule 135 (empty -> .)
    LTHAN           reduce using rule 135 (empty -> .)
    GTHAN_EQUAL     reduce using rule 135 (empty -> .)
    GTHAN           reduce using rule 135 (empty -> .)
    PLUS            reduce using rule 135 (empty -> .)
    MINUS           reduce using rule 135 (empty -> .)
    EQUAL           reduce using rule 135 (empty -> .)
    NEQUAL          reduce using rule 135 (empty -> .)
    AND             reduce using rule 135 (empty -> .)
    SEMI            reduce using rule 135 (empty -> .)
    OR              reduce using rule 135 (empty -> .)
    RPAREN          reduce using rule 135 (empty -> .)
    COMMA           reduce using rule 135 (empty -> .)
    RBRACKET        reduce using rule 135 (empty -> .)

    dims_access                    shift and go to state 118
    single_dim_access              shift and go to state 119
    empty                          shift and go to state 120

state 74

    (63) print -> PRINT LPAREN . print_params RPAREN SEMI
    (64) print -> PRINT LPAREN . RPAREN SEMI
    (65) print_params -> . print_params COMMA single_print_param
    (66) print_params -> . single_print_param
    (67) single_print_param -> . expr
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    RPAREN          shift and go to state 123
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    print_params                   shift and go to state 122
    single_print_param             shift and go to state 124
    expr                           shift and go to state 125
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 75

    (68) conditional -> IF LPAREN . expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN . expr RPAREN parsed_if_expr instruction_block
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 126
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 76

    (84) return -> RETURN expr . SEMI
    (86) expr -> expr . OR and_expr

    SEMI            shift and go to state 127
    OR              shift and go to state 128


state 77

    (85) return -> RETURN SEMI .

    RBRACE          reduce using rule 85 (return -> RETURN SEMI .)
    ID              reduce using rule 85 (return -> RETURN SEMI .)
    PRINT           reduce using rule 85 (return -> RETURN SEMI .)
    IF              reduce using rule 85 (return -> RETURN SEMI .)
    RETURN          reduce using rule 85 (return -> RETURN SEMI .)
    WHILE           reduce using rule 85 (return -> RETURN SEMI .)
    FROM            reduce using rule 85 (return -> RETURN SEMI .)


state 78

    (87) expr -> and_expr .

    SEMI            reduce using rule 87 (expr -> and_expr .)
    OR              reduce using rule 87 (expr -> and_expr .)
    RPAREN          reduce using rule 87 (expr -> and_expr .)
    COMMA           reduce using rule 87 (expr -> and_expr .)
    RBRACKET        reduce using rule 87 (expr -> and_expr .)


state 79

    (88) and_expr -> equality_expr . AND equality_expr
    (89) and_expr -> equality_expr .

    AND             shift and go to state 129
    SEMI            reduce using rule 89 (and_expr -> equality_expr .)
    OR              reduce using rule 89 (and_expr -> equality_expr .)
    RPAREN          reduce using rule 89 (and_expr -> equality_expr .)
    COMMA           reduce using rule 89 (and_expr -> equality_expr .)
    RBRACKET        reduce using rule 89 (and_expr -> equality_expr .)


state 80

    (90) equality_expr -> relational_expr . EQUAL parsed_equal relational_expr
    (92) equality_expr -> relational_expr . NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> relational_expr .

    EQUAL           shift and go to state 130
    NEQUAL          shift and go to state 131
    AND             reduce using rule 94 (equality_expr -> relational_expr .)
    SEMI            reduce using rule 94 (equality_expr -> relational_expr .)
    OR              reduce using rule 94 (equality_expr -> relational_expr .)
    RPAREN          reduce using rule 94 (equality_expr -> relational_expr .)
    COMMA           reduce using rule 94 (equality_expr -> relational_expr .)
    RBRACKET        reduce using rule 94 (equality_expr -> relational_expr .)


state 81

    (95) relational_expr -> additive_expr . LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> additive_expr . LTHAN parsed_lthan additive_expr
    (99) relational_expr -> additive_expr . GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> additive_expr . GTHAN parsed_gthan additive_expr
    (103) relational_expr -> additive_expr .
    (104) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    LTHAN_EQUAL     shift and go to state 132
    LTHAN           shift and go to state 133
    GTHAN_EQUAL     shift and go to state 134
    GTHAN           shift and go to state 135
    EQUAL           reduce using rule 103 (relational_expr -> additive_expr .)
    NEQUAL          reduce using rule 103 (relational_expr -> additive_expr .)
    AND             reduce using rule 103 (relational_expr -> additive_expr .)
    SEMI            reduce using rule 103 (relational_expr -> additive_expr .)
    OR              reduce using rule 103 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 103 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 103 (relational_expr -> additive_expr .)
    RBRACKET        reduce using rule 103 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137


state 82

    (117) unary_expr -> PLUS . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    postfix_expr                   shift and go to state 138
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 83

    (108) additive_expr -> multiplicative_expr .
    (109) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (111) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 108 (additive_expr -> multiplicative_expr .)
    LTHAN           reduce using rule 108 (additive_expr -> multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 108 (additive_expr -> multiplicative_expr .)
    GTHAN           reduce using rule 108 (additive_expr -> multiplicative_expr .)
    PLUS            reduce using rule 108 (additive_expr -> multiplicative_expr .)
    MINUS           reduce using rule 108 (additive_expr -> multiplicative_expr .)
    EQUAL           reduce using rule 108 (additive_expr -> multiplicative_expr .)
    NEQUAL          reduce using rule 108 (additive_expr -> multiplicative_expr .)
    AND             reduce using rule 108 (additive_expr -> multiplicative_expr .)
    SEMI            reduce using rule 108 (additive_expr -> multiplicative_expr .)
    OR              reduce using rule 108 (additive_expr -> multiplicative_expr .)
    RPAREN          reduce using rule 108 (additive_expr -> multiplicative_expr .)
    COMMA           reduce using rule 108 (additive_expr -> multiplicative_expr .)
    RBRACKET        reduce using rule 108 (additive_expr -> multiplicative_expr .)
    TIMES           shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 84

    (116) unary_expr -> MINUS . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    postfix_expr                   shift and go to state 142
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 85

    (115) multiplicative_expr -> unary_expr .

    TIMES           reduce using rule 115 (multiplicative_expr -> unary_expr .)
    DIVIDE          reduce using rule 115 (multiplicative_expr -> unary_expr .)
    MODULO          reduce using rule 115 (multiplicative_expr -> unary_expr .)
    LTHAN_EQUAL     reduce using rule 115 (multiplicative_expr -> unary_expr .)
    LTHAN           reduce using rule 115 (multiplicative_expr -> unary_expr .)
    GTHAN_EQUAL     reduce using rule 115 (multiplicative_expr -> unary_expr .)
    GTHAN           reduce using rule 115 (multiplicative_expr -> unary_expr .)
    PLUS            reduce using rule 115 (multiplicative_expr -> unary_expr .)
    MINUS           reduce using rule 115 (multiplicative_expr -> unary_expr .)
    EQUAL           reduce using rule 115 (multiplicative_expr -> unary_expr .)
    NEQUAL          reduce using rule 115 (multiplicative_expr -> unary_expr .)
    AND             reduce using rule 115 (multiplicative_expr -> unary_expr .)
    SEMI            reduce using rule 115 (multiplicative_expr -> unary_expr .)
    OR              reduce using rule 115 (multiplicative_expr -> unary_expr .)
    RPAREN          reduce using rule 115 (multiplicative_expr -> unary_expr .)
    COMMA           reduce using rule 115 (multiplicative_expr -> unary_expr .)
    RBRACKET        reduce using rule 115 (multiplicative_expr -> unary_expr .)


state 86

    (119) unary_expr -> postfix_expr .

    TIMES           reduce using rule 119 (unary_expr -> postfix_expr .)
    DIVIDE          reduce using rule 119 (unary_expr -> postfix_expr .)
    MODULO          reduce using rule 119 (unary_expr -> postfix_expr .)
    LTHAN_EQUAL     reduce using rule 119 (unary_expr -> postfix_expr .)
    LTHAN           reduce using rule 119 (unary_expr -> postfix_expr .)
    GTHAN_EQUAL     reduce using rule 119 (unary_expr -> postfix_expr .)
    GTHAN           reduce using rule 119 (unary_expr -> postfix_expr .)
    PLUS            reduce using rule 119 (unary_expr -> postfix_expr .)
    MINUS           reduce using rule 119 (unary_expr -> postfix_expr .)
    EQUAL           reduce using rule 119 (unary_expr -> postfix_expr .)
    NEQUAL          reduce using rule 119 (unary_expr -> postfix_expr .)
    AND             reduce using rule 119 (unary_expr -> postfix_expr .)
    SEMI            reduce using rule 119 (unary_expr -> postfix_expr .)
    OR              reduce using rule 119 (unary_expr -> postfix_expr .)
    RPAREN          reduce using rule 119 (unary_expr -> postfix_expr .)
    COMMA           reduce using rule 119 (unary_expr -> postfix_expr .)
    RBRACKET        reduce using rule 119 (unary_expr -> postfix_expr .)


state 87

    (118) unary_expr -> NOT . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    postfix_expr                   shift and go to state 143
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 88

    (120) postfix_expr -> LPAREN . expr RPAREN
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 144
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 89

    (121) postfix_expr -> variable_access .

    TIMES           reduce using rule 121 (postfix_expr -> variable_access .)
    DIVIDE          reduce using rule 121 (postfix_expr -> variable_access .)
    MODULO          reduce using rule 121 (postfix_expr -> variable_access .)
    LTHAN_EQUAL     reduce using rule 121 (postfix_expr -> variable_access .)
    LTHAN           reduce using rule 121 (postfix_expr -> variable_access .)
    GTHAN_EQUAL     reduce using rule 121 (postfix_expr -> variable_access .)
    GTHAN           reduce using rule 121 (postfix_expr -> variable_access .)
    PLUS            reduce using rule 121 (postfix_expr -> variable_access .)
    MINUS           reduce using rule 121 (postfix_expr -> variable_access .)
    EQUAL           reduce using rule 121 (postfix_expr -> variable_access .)
    NEQUAL          reduce using rule 121 (postfix_expr -> variable_access .)
    AND             reduce using rule 121 (postfix_expr -> variable_access .)
    SEMI            reduce using rule 121 (postfix_expr -> variable_access .)
    OR              reduce using rule 121 (postfix_expr -> variable_access .)
    RPAREN          reduce using rule 121 (postfix_expr -> variable_access .)
    COMMA           reduce using rule 121 (postfix_expr -> variable_access .)
    RBRACKET        reduce using rule 121 (postfix_expr -> variable_access .)


state 90

    (122) postfix_expr -> function_call .

    TIMES           reduce using rule 122 (postfix_expr -> function_call .)
    DIVIDE          reduce using rule 122 (postfix_expr -> function_call .)
    MODULO          reduce using rule 122 (postfix_expr -> function_call .)
    LTHAN_EQUAL     reduce using rule 122 (postfix_expr -> function_call .)
    LTHAN           reduce using rule 122 (postfix_expr -> function_call .)
    GTHAN_EQUAL     reduce using rule 122 (postfix_expr -> function_call .)
    GTHAN           reduce using rule 122 (postfix_expr -> function_call .)
    PLUS            reduce using rule 122 (postfix_expr -> function_call .)
    MINUS           reduce using rule 122 (postfix_expr -> function_call .)
    EQUAL           reduce using rule 122 (postfix_expr -> function_call .)
    NEQUAL          reduce using rule 122 (postfix_expr -> function_call .)
    AND             reduce using rule 122 (postfix_expr -> function_call .)
    SEMI            reduce using rule 122 (postfix_expr -> function_call .)
    OR              reduce using rule 122 (postfix_expr -> function_call .)
    RPAREN          reduce using rule 122 (postfix_expr -> function_call .)
    COMMA           reduce using rule 122 (postfix_expr -> function_call .)
    RBRACKET        reduce using rule 122 (postfix_expr -> function_call .)


state 91

    (123) postfix_expr -> constant .

    TIMES           reduce using rule 123 (postfix_expr -> constant .)
    DIVIDE          reduce using rule 123 (postfix_expr -> constant .)
    MODULO          reduce using rule 123 (postfix_expr -> constant .)
    LTHAN_EQUAL     reduce using rule 123 (postfix_expr -> constant .)
    LTHAN           reduce using rule 123 (postfix_expr -> constant .)
    GTHAN_EQUAL     reduce using rule 123 (postfix_expr -> constant .)
    GTHAN           reduce using rule 123 (postfix_expr -> constant .)
    PLUS            reduce using rule 123 (postfix_expr -> constant .)
    MINUS           reduce using rule 123 (postfix_expr -> constant .)
    EQUAL           reduce using rule 123 (postfix_expr -> constant .)
    NEQUAL          reduce using rule 123 (postfix_expr -> constant .)
    AND             reduce using rule 123 (postfix_expr -> constant .)
    SEMI            reduce using rule 123 (postfix_expr -> constant .)
    OR              reduce using rule 123 (postfix_expr -> constant .)
    RPAREN          reduce using rule 123 (postfix_expr -> constant .)
    COMMA           reduce using rule 123 (postfix_expr -> constant .)
    RBRACKET        reduce using rule 123 (postfix_expr -> constant .)


state 92

    (52) variable_access -> ID . parsed_id_variable_access dims_access
    (58) function_call -> ID . LPAREN function_call_params RPAREN SEMI
    (59) function_call -> ID . LPAREN RPAREN SEMI
    (53) parsed_id_variable_access -> .

    LPAREN          shift and go to state 72
    LBRACKET        reduce using rule 53 (parsed_id_variable_access -> .)
    TIMES           reduce using rule 53 (parsed_id_variable_access -> .)
    DIVIDE          reduce using rule 53 (parsed_id_variable_access -> .)
    MODULO          reduce using rule 53 (parsed_id_variable_access -> .)
    LTHAN_EQUAL     reduce using rule 53 (parsed_id_variable_access -> .)
    LTHAN           reduce using rule 53 (parsed_id_variable_access -> .)
    GTHAN_EQUAL     reduce using rule 53 (parsed_id_variable_access -> .)
    GTHAN           reduce using rule 53 (parsed_id_variable_access -> .)
    PLUS            reduce using rule 53 (parsed_id_variable_access -> .)
    MINUS           reduce using rule 53 (parsed_id_variable_access -> .)
    EQUAL           reduce using rule 53 (parsed_id_variable_access -> .)
    NEQUAL          reduce using rule 53 (parsed_id_variable_access -> .)
    AND             reduce using rule 53 (parsed_id_variable_access -> .)
    SEMI            reduce using rule 53 (parsed_id_variable_access -> .)
    OR              reduce using rule 53 (parsed_id_variable_access -> .)
    RPAREN          reduce using rule 53 (parsed_id_variable_access -> .)
    COMMA           reduce using rule 53 (parsed_id_variable_access -> .)
    RBRACKET        reduce using rule 53 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 73

state 93

    (124) constant -> CONST_INT .

    TIMES           reduce using rule 124 (constant -> CONST_INT .)
    DIVIDE          reduce using rule 124 (constant -> CONST_INT .)
    MODULO          reduce using rule 124 (constant -> CONST_INT .)
    LTHAN_EQUAL     reduce using rule 124 (constant -> CONST_INT .)
    LTHAN           reduce using rule 124 (constant -> CONST_INT .)
    GTHAN_EQUAL     reduce using rule 124 (constant -> CONST_INT .)
    GTHAN           reduce using rule 124 (constant -> CONST_INT .)
    PLUS            reduce using rule 124 (constant -> CONST_INT .)
    MINUS           reduce using rule 124 (constant -> CONST_INT .)
    EQUAL           reduce using rule 124 (constant -> CONST_INT .)
    NEQUAL          reduce using rule 124 (constant -> CONST_INT .)
    AND             reduce using rule 124 (constant -> CONST_INT .)
    SEMI            reduce using rule 124 (constant -> CONST_INT .)
    OR              reduce using rule 124 (constant -> CONST_INT .)
    RPAREN          reduce using rule 124 (constant -> CONST_INT .)
    COMMA           reduce using rule 124 (constant -> CONST_INT .)
    RBRACKET        reduce using rule 124 (constant -> CONST_INT .)


state 94

    (125) constant -> CONST_REAL .

    TIMES           reduce using rule 125 (constant -> CONST_REAL .)
    DIVIDE          reduce using rule 125 (constant -> CONST_REAL .)
    MODULO          reduce using rule 125 (constant -> CONST_REAL .)
    LTHAN_EQUAL     reduce using rule 125 (constant -> CONST_REAL .)
    LTHAN           reduce using rule 125 (constant -> CONST_REAL .)
    GTHAN_EQUAL     reduce using rule 125 (constant -> CONST_REAL .)
    GTHAN           reduce using rule 125 (constant -> CONST_REAL .)
    PLUS            reduce using rule 125 (constant -> CONST_REAL .)
    MINUS           reduce using rule 125 (constant -> CONST_REAL .)
    EQUAL           reduce using rule 125 (constant -> CONST_REAL .)
    NEQUAL          reduce using rule 125 (constant -> CONST_REAL .)
    AND             reduce using rule 125 (constant -> CONST_REAL .)
    SEMI            reduce using rule 125 (constant -> CONST_REAL .)
    OR              reduce using rule 125 (constant -> CONST_REAL .)
    RPAREN          reduce using rule 125 (constant -> CONST_REAL .)
    COMMA           reduce using rule 125 (constant -> CONST_REAL .)
    RBRACKET        reduce using rule 125 (constant -> CONST_REAL .)


state 95

    (126) constant -> CONST_CHAR .

    TIMES           reduce using rule 126 (constant -> CONST_CHAR .)
    DIVIDE          reduce using rule 126 (constant -> CONST_CHAR .)
    MODULO          reduce using rule 126 (constant -> CONST_CHAR .)
    LTHAN_EQUAL     reduce using rule 126 (constant -> CONST_CHAR .)
    LTHAN           reduce using rule 126 (constant -> CONST_CHAR .)
    GTHAN_EQUAL     reduce using rule 126 (constant -> CONST_CHAR .)
    GTHAN           reduce using rule 126 (constant -> CONST_CHAR .)
    PLUS            reduce using rule 126 (constant -> CONST_CHAR .)
    MINUS           reduce using rule 126 (constant -> CONST_CHAR .)
    EQUAL           reduce using rule 126 (constant -> CONST_CHAR .)
    NEQUAL          reduce using rule 126 (constant -> CONST_CHAR .)
    AND             reduce using rule 126 (constant -> CONST_CHAR .)
    SEMI            reduce using rule 126 (constant -> CONST_CHAR .)
    OR              reduce using rule 126 (constant -> CONST_CHAR .)
    RPAREN          reduce using rule 126 (constant -> CONST_CHAR .)
    COMMA           reduce using rule 126 (constant -> CONST_CHAR .)
    RBRACKET        reduce using rule 126 (constant -> CONST_CHAR .)


state 96

    (127) constant -> CONST_STRING .

    TIMES           reduce using rule 127 (constant -> CONST_STRING .)
    DIVIDE          reduce using rule 127 (constant -> CONST_STRING .)
    MODULO          reduce using rule 127 (constant -> CONST_STRING .)
    LTHAN_EQUAL     reduce using rule 127 (constant -> CONST_STRING .)
    LTHAN           reduce using rule 127 (constant -> CONST_STRING .)
    GTHAN_EQUAL     reduce using rule 127 (constant -> CONST_STRING .)
    GTHAN           reduce using rule 127 (constant -> CONST_STRING .)
    PLUS            reduce using rule 127 (constant -> CONST_STRING .)
    MINUS           reduce using rule 127 (constant -> CONST_STRING .)
    EQUAL           reduce using rule 127 (constant -> CONST_STRING .)
    NEQUAL          reduce using rule 127 (constant -> CONST_STRING .)
    AND             reduce using rule 127 (constant -> CONST_STRING .)
    SEMI            reduce using rule 127 (constant -> CONST_STRING .)
    OR              reduce using rule 127 (constant -> CONST_STRING .)
    RPAREN          reduce using rule 127 (constant -> CONST_STRING .)
    COMMA           reduce using rule 127 (constant -> CONST_STRING .)
    RBRACKET        reduce using rule 127 (constant -> CONST_STRING .)


state 97

    (128) constant -> constant_bool .

    TIMES           reduce using rule 128 (constant -> constant_bool .)
    DIVIDE          reduce using rule 128 (constant -> constant_bool .)
    MODULO          reduce using rule 128 (constant -> constant_bool .)
    LTHAN_EQUAL     reduce using rule 128 (constant -> constant_bool .)
    LTHAN           reduce using rule 128 (constant -> constant_bool .)
    GTHAN_EQUAL     reduce using rule 128 (constant -> constant_bool .)
    GTHAN           reduce using rule 128 (constant -> constant_bool .)
    PLUS            reduce using rule 128 (constant -> constant_bool .)
    MINUS           reduce using rule 128 (constant -> constant_bool .)
    EQUAL           reduce using rule 128 (constant -> constant_bool .)
    NEQUAL          reduce using rule 128 (constant -> constant_bool .)
    AND             reduce using rule 128 (constant -> constant_bool .)
    SEMI            reduce using rule 128 (constant -> constant_bool .)
    OR              reduce using rule 128 (constant -> constant_bool .)
    RPAREN          reduce using rule 128 (constant -> constant_bool .)
    COMMA           reduce using rule 128 (constant -> constant_bool .)
    RBRACKET        reduce using rule 128 (constant -> constant_bool .)


state 98

    (129) constant_bool -> TRUE .

    TIMES           reduce using rule 129 (constant_bool -> TRUE .)
    DIVIDE          reduce using rule 129 (constant_bool -> TRUE .)
    MODULO          reduce using rule 129 (constant_bool -> TRUE .)
    LTHAN_EQUAL     reduce using rule 129 (constant_bool -> TRUE .)
    LTHAN           reduce using rule 129 (constant_bool -> TRUE .)
    GTHAN_EQUAL     reduce using rule 129 (constant_bool -> TRUE .)
    GTHAN           reduce using rule 129 (constant_bool -> TRUE .)
    PLUS            reduce using rule 129 (constant_bool -> TRUE .)
    MINUS           reduce using rule 129 (constant_bool -> TRUE .)
    EQUAL           reduce using rule 129 (constant_bool -> TRUE .)
    NEQUAL          reduce using rule 129 (constant_bool -> TRUE .)
    AND             reduce using rule 129 (constant_bool -> TRUE .)
    SEMI            reduce using rule 129 (constant_bool -> TRUE .)
    OR              reduce using rule 129 (constant_bool -> TRUE .)
    RPAREN          reduce using rule 129 (constant_bool -> TRUE .)
    COMMA           reduce using rule 129 (constant_bool -> TRUE .)
    RBRACKET        reduce using rule 129 (constant_bool -> TRUE .)


state 99

    (130) constant_bool -> FALSE .

    TIMES           reduce using rule 130 (constant_bool -> FALSE .)
    DIVIDE          reduce using rule 130 (constant_bool -> FALSE .)
    MODULO          reduce using rule 130 (constant_bool -> FALSE .)
    LTHAN_EQUAL     reduce using rule 130 (constant_bool -> FALSE .)
    LTHAN           reduce using rule 130 (constant_bool -> FALSE .)
    GTHAN_EQUAL     reduce using rule 130 (constant_bool -> FALSE .)
    GTHAN           reduce using rule 130 (constant_bool -> FALSE .)
    PLUS            reduce using rule 130 (constant_bool -> FALSE .)
    MINUS           reduce using rule 130 (constant_bool -> FALSE .)
    EQUAL           reduce using rule 130 (constant_bool -> FALSE .)
    NEQUAL          reduce using rule 130 (constant_bool -> FALSE .)
    AND             reduce using rule 130 (constant_bool -> FALSE .)
    SEMI            reduce using rule 130 (constant_bool -> FALSE .)
    OR              reduce using rule 130 (constant_bool -> FALSE .)
    RPAREN          reduce using rule 130 (constant_bool -> FALSE .)
    COMMA           reduce using rule 130 (constant_bool -> FALSE .)
    RBRACKET        reduce using rule 130 (constant_bool -> FALSE .)


state 100

    (74) while -> WHILE parsed_while . LPAREN expr parsed_while_expr RPAREN instruction_block

    LPAREN          shift and go to state 145


state 101

    (77) for -> FROM LPAREN . for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block
    (78) for -> FROM LPAREN . for_init COLON for_end_value_no_step RPAREN instruction_block
    (79) for_init -> . ID ASGMT CONST_INT

    ID              shift and go to state 147

    for_init                       shift and go to state 146

state 102

    (24) single_function_definition_param -> type . ID

    ID              shift and go to state 148


state 103

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN instruction_block
    (22) function_definition_params -> function_definition_params . COMMA single_function_definition_param

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 150


state 104

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 151
    instruction_block              shift and go to state 152

state 105

    (23) function_definition_params -> single_function_definition_param .

    RPAREN          reduce using rule 23 (function_definition_params -> single_function_definition_param .)
    COMMA           reduce using rule 23 (function_definition_params -> single_function_definition_param .)


state 106

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN instruction_block
    (22) function_definition_params -> function_definition_params . COMMA single_function_definition_param

    RPAREN          shift and go to state 153
    COMMA           shift and go to state 150


state 107

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 154
    instruction_block              shift and go to state 155

state 108

    (32) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .

    INT             reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    REAL            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    CHAR            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    BOOL            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    START           reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    FUNCTION        reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    LBRACE          reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)


state 109

    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA . single_variable_declaration
    (36) single_variable_declaration -> . ID dim_definition dim_definition
    (37) single_variable_declaration -> . ID dim_definition
    (38) single_variable_declaration -> . ID

    ID              shift and go to state 68

    single_variable_declaration    shift and go to state 156

state 110

    (36) single_variable_declaration -> ID dim_definition . dim_definition
    (37) single_variable_declaration -> ID dim_definition .
    (39) dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 37 (single_variable_declaration -> ID dim_definition .)
    COMMA           reduce using rule 37 (single_variable_declaration -> ID dim_definition .)
    LBRACKET        shift and go to state 111

    dim_definition                 shift and go to state 157

state 111

    (39) dim_definition -> LBRACKET . CONST_INT RBRACKET

    CONST_INT       shift and go to state 158


state 112

    (50) assignment -> variable_access ASGMT expr . SEMI
    (86) expr -> expr . OR and_expr

    SEMI            shift and go to state 159
    OR              shift and go to state 128


state 113

    (51) assignment -> variable_access ASGMT READ . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 160


state 114

    (58) function_call -> ID LPAREN function_call_params . RPAREN SEMI
    (60) function_call_params -> function_call_params . COMMA single_function_call_param

    RPAREN          shift and go to state 161
    COMMA           shift and go to state 162


state 115

    (59) function_call -> ID LPAREN RPAREN . SEMI

    SEMI            shift and go to state 163


state 116

    (61) function_call_params -> single_function_call_param .

    RPAREN          reduce using rule 61 (function_call_params -> single_function_call_param .)
    COMMA           reduce using rule 61 (function_call_params -> single_function_call_param .)


state 117

    (62) single_function_call_param -> expr .
    (86) expr -> expr . OR and_expr

    RPAREN          reduce using rule 62 (single_function_call_param -> expr .)
    COMMA           reduce using rule 62 (single_function_call_param -> expr .)
    OR              shift and go to state 128


state 118

    (52) variable_access -> ID parsed_id_variable_access dims_access .

    ASGMT           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    TIMES           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    DIVIDE          reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    MODULO          reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN_EQUAL     reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN_EQUAL     reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    PLUS            reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    MINUS           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    EQUAL           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    NEQUAL          reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    AND             reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    SEMI            reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    OR              reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    RPAREN          reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    COMMA           reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)
    RBRACKET        reduce using rule 52 (variable_access -> ID parsed_id_variable_access dims_access .)


state 119

    (54) dims_access -> single_dim_access . single_dim_access
    (55) dims_access -> single_dim_access .
    (57) single_dim_access -> . LBRACKET expr RBRACKET

    ASGMT           reduce using rule 55 (dims_access -> single_dim_access .)
    TIMES           reduce using rule 55 (dims_access -> single_dim_access .)
    DIVIDE          reduce using rule 55 (dims_access -> single_dim_access .)
    MODULO          reduce using rule 55 (dims_access -> single_dim_access .)
    LTHAN_EQUAL     reduce using rule 55 (dims_access -> single_dim_access .)
    LTHAN           reduce using rule 55 (dims_access -> single_dim_access .)
    GTHAN_EQUAL     reduce using rule 55 (dims_access -> single_dim_access .)
    GTHAN           reduce using rule 55 (dims_access -> single_dim_access .)
    PLUS            reduce using rule 55 (dims_access -> single_dim_access .)
    MINUS           reduce using rule 55 (dims_access -> single_dim_access .)
    EQUAL           reduce using rule 55 (dims_access -> single_dim_access .)
    NEQUAL          reduce using rule 55 (dims_access -> single_dim_access .)
    AND             reduce using rule 55 (dims_access -> single_dim_access .)
    SEMI            reduce using rule 55 (dims_access -> single_dim_access .)
    OR              reduce using rule 55 (dims_access -> single_dim_access .)
    RPAREN          reduce using rule 55 (dims_access -> single_dim_access .)
    COMMA           reduce using rule 55 (dims_access -> single_dim_access .)
    RBRACKET        reduce using rule 55 (dims_access -> single_dim_access .)
    LBRACKET        shift and go to state 121

    single_dim_access              shift and go to state 164

state 120

    (56) dims_access -> empty .

    ASGMT           reduce using rule 56 (dims_access -> empty .)
    TIMES           reduce using rule 56 (dims_access -> empty .)
    DIVIDE          reduce using rule 56 (dims_access -> empty .)
    MODULO          reduce using rule 56 (dims_access -> empty .)
    LTHAN_EQUAL     reduce using rule 56 (dims_access -> empty .)
    LTHAN           reduce using rule 56 (dims_access -> empty .)
    GTHAN_EQUAL     reduce using rule 56 (dims_access -> empty .)
    GTHAN           reduce using rule 56 (dims_access -> empty .)
    PLUS            reduce using rule 56 (dims_access -> empty .)
    MINUS           reduce using rule 56 (dims_access -> empty .)
    EQUAL           reduce using rule 56 (dims_access -> empty .)
    NEQUAL          reduce using rule 56 (dims_access -> empty .)
    AND             reduce using rule 56 (dims_access -> empty .)
    SEMI            reduce using rule 56 (dims_access -> empty .)
    OR              reduce using rule 56 (dims_access -> empty .)
    RPAREN          reduce using rule 56 (dims_access -> empty .)
    COMMA           reduce using rule 56 (dims_access -> empty .)
    RBRACKET        reduce using rule 56 (dims_access -> empty .)


state 121

    (57) single_dim_access -> LBRACKET . expr RBRACKET
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 165
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 122

    (63) print -> PRINT LPAREN print_params . RPAREN SEMI
    (65) print_params -> print_params . COMMA single_print_param

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 167


state 123

    (64) print -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 168


state 124

    (66) print_params -> single_print_param .

    RPAREN          reduce using rule 66 (print_params -> single_print_param .)
    COMMA           reduce using rule 66 (print_params -> single_print_param .)


state 125

    (67) single_print_param -> expr .
    (86) expr -> expr . OR and_expr

    RPAREN          reduce using rule 67 (single_print_param -> expr .)
    COMMA           reduce using rule 67 (single_print_param -> expr .)
    OR              shift and go to state 128


state 126

    (68) conditional -> IF LPAREN expr . RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr . RPAREN parsed_if_expr instruction_block
    (86) expr -> expr . OR and_expr

    RPAREN          shift and go to state 169
    OR              shift and go to state 128


state 127

    (84) return -> RETURN expr SEMI .

    RBRACE          reduce using rule 84 (return -> RETURN expr SEMI .)
    ID              reduce using rule 84 (return -> RETURN expr SEMI .)
    PRINT           reduce using rule 84 (return -> RETURN expr SEMI .)
    IF              reduce using rule 84 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 84 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 84 (return -> RETURN expr SEMI .)
    FROM            reduce using rule 84 (return -> RETURN expr SEMI .)


state 128

    (86) expr -> expr OR . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    and_expr                       shift and go to state 170
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 129

    (88) and_expr -> equality_expr AND . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    equality_expr                  shift and go to state 171
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 130

    (90) equality_expr -> relational_expr EQUAL . parsed_equal relational_expr
    (91) parsed_equal -> .

    MINUS           reduce using rule 91 (parsed_equal -> .)
    PLUS            reduce using rule 91 (parsed_equal -> .)
    NOT             reduce using rule 91 (parsed_equal -> .)
    LPAREN          reduce using rule 91 (parsed_equal -> .)
    ID              reduce using rule 91 (parsed_equal -> .)
    CONST_INT       reduce using rule 91 (parsed_equal -> .)
    CONST_REAL      reduce using rule 91 (parsed_equal -> .)
    CONST_CHAR      reduce using rule 91 (parsed_equal -> .)
    CONST_STRING    reduce using rule 91 (parsed_equal -> .)
    TRUE            reduce using rule 91 (parsed_equal -> .)
    FALSE           reduce using rule 91 (parsed_equal -> .)

    parsed_equal                   shift and go to state 172

state 131

    (92) equality_expr -> relational_expr NEQUAL . parsed_nequal relational_expr
    (93) parsed_nequal -> .

    MINUS           reduce using rule 93 (parsed_nequal -> .)
    PLUS            reduce using rule 93 (parsed_nequal -> .)
    NOT             reduce using rule 93 (parsed_nequal -> .)
    LPAREN          reduce using rule 93 (parsed_nequal -> .)
    ID              reduce using rule 93 (parsed_nequal -> .)
    CONST_INT       reduce using rule 93 (parsed_nequal -> .)
    CONST_REAL      reduce using rule 93 (parsed_nequal -> .)
    CONST_CHAR      reduce using rule 93 (parsed_nequal -> .)
    CONST_STRING    reduce using rule 93 (parsed_nequal -> .)
    TRUE            reduce using rule 93 (parsed_nequal -> .)
    FALSE           reduce using rule 93 (parsed_nequal -> .)

    parsed_nequal                  shift and go to state 173

state 132

    (95) relational_expr -> additive_expr LTHAN_EQUAL . parsed_lthan_equal additive_expr
    (96) parsed_lthan_equal -> .

    MINUS           reduce using rule 96 (parsed_lthan_equal -> .)
    PLUS            reduce using rule 96 (parsed_lthan_equal -> .)
    NOT             reduce using rule 96 (parsed_lthan_equal -> .)
    LPAREN          reduce using rule 96 (parsed_lthan_equal -> .)
    ID              reduce using rule 96 (parsed_lthan_equal -> .)
    CONST_INT       reduce using rule 96 (parsed_lthan_equal -> .)
    CONST_REAL      reduce using rule 96 (parsed_lthan_equal -> .)
    CONST_CHAR      reduce using rule 96 (parsed_lthan_equal -> .)
    CONST_STRING    reduce using rule 96 (parsed_lthan_equal -> .)
    TRUE            reduce using rule 96 (parsed_lthan_equal -> .)
    FALSE           reduce using rule 96 (parsed_lthan_equal -> .)

    parsed_lthan_equal             shift and go to state 174

state 133

    (97) relational_expr -> additive_expr LTHAN . parsed_lthan additive_expr
    (98) parsed_lthan -> .

    MINUS           reduce using rule 98 (parsed_lthan -> .)
    PLUS            reduce using rule 98 (parsed_lthan -> .)
    NOT             reduce using rule 98 (parsed_lthan -> .)
    LPAREN          reduce using rule 98 (parsed_lthan -> .)
    ID              reduce using rule 98 (parsed_lthan -> .)
    CONST_INT       reduce using rule 98 (parsed_lthan -> .)
    CONST_REAL      reduce using rule 98 (parsed_lthan -> .)
    CONST_CHAR      reduce using rule 98 (parsed_lthan -> .)
    CONST_STRING    reduce using rule 98 (parsed_lthan -> .)
    TRUE            reduce using rule 98 (parsed_lthan -> .)
    FALSE           reduce using rule 98 (parsed_lthan -> .)

    parsed_lthan                   shift and go to state 175

state 134

    (99) relational_expr -> additive_expr GTHAN_EQUAL . parsed_gthan_equal additive_expr
    (100) parsed_gthan_equal -> .

    MINUS           reduce using rule 100 (parsed_gthan_equal -> .)
    PLUS            reduce using rule 100 (parsed_gthan_equal -> .)
    NOT             reduce using rule 100 (parsed_gthan_equal -> .)
    LPAREN          reduce using rule 100 (parsed_gthan_equal -> .)
    ID              reduce using rule 100 (parsed_gthan_equal -> .)
    CONST_INT       reduce using rule 100 (parsed_gthan_equal -> .)
    CONST_REAL      reduce using rule 100 (parsed_gthan_equal -> .)
    CONST_CHAR      reduce using rule 100 (parsed_gthan_equal -> .)
    CONST_STRING    reduce using rule 100 (parsed_gthan_equal -> .)
    TRUE            reduce using rule 100 (parsed_gthan_equal -> .)
    FALSE           reduce using rule 100 (parsed_gthan_equal -> .)

    parsed_gthan_equal             shift and go to state 176

state 135

    (101) relational_expr -> additive_expr GTHAN . parsed_gthan additive_expr
    (102) parsed_gthan -> .

    MINUS           reduce using rule 102 (parsed_gthan -> .)
    PLUS            reduce using rule 102 (parsed_gthan -> .)
    NOT             reduce using rule 102 (parsed_gthan -> .)
    LPAREN          reduce using rule 102 (parsed_gthan -> .)
    ID              reduce using rule 102 (parsed_gthan -> .)
    CONST_INT       reduce using rule 102 (parsed_gthan -> .)
    CONST_REAL      reduce using rule 102 (parsed_gthan -> .)
    CONST_CHAR      reduce using rule 102 (parsed_gthan -> .)
    CONST_STRING    reduce using rule 102 (parsed_gthan -> .)
    TRUE            reduce using rule 102 (parsed_gthan -> .)
    FALSE           reduce using rule 102 (parsed_gthan -> .)

    parsed_gthan                   shift and go to state 177

state 136

    (104) additive_expr -> additive_expr PLUS . parsed_plus multiplicative_expr
    (105) parsed_plus -> .

    MINUS           reduce using rule 105 (parsed_plus -> .)
    PLUS            reduce using rule 105 (parsed_plus -> .)
    NOT             reduce using rule 105 (parsed_plus -> .)
    LPAREN          reduce using rule 105 (parsed_plus -> .)
    ID              reduce using rule 105 (parsed_plus -> .)
    CONST_INT       reduce using rule 105 (parsed_plus -> .)
    CONST_REAL      reduce using rule 105 (parsed_plus -> .)
    CONST_CHAR      reduce using rule 105 (parsed_plus -> .)
    CONST_STRING    reduce using rule 105 (parsed_plus -> .)
    TRUE            reduce using rule 105 (parsed_plus -> .)
    FALSE           reduce using rule 105 (parsed_plus -> .)

    parsed_plus                    shift and go to state 178

state 137

    (106) additive_expr -> additive_expr MINUS . parsed_minus multiplicative_expr
    (107) parsed_minus -> .

    MINUS           reduce using rule 107 (parsed_minus -> .)
    PLUS            reduce using rule 107 (parsed_minus -> .)
    NOT             reduce using rule 107 (parsed_minus -> .)
    LPAREN          reduce using rule 107 (parsed_minus -> .)
    ID              reduce using rule 107 (parsed_minus -> .)
    CONST_INT       reduce using rule 107 (parsed_minus -> .)
    CONST_REAL      reduce using rule 107 (parsed_minus -> .)
    CONST_CHAR      reduce using rule 107 (parsed_minus -> .)
    CONST_STRING    reduce using rule 107 (parsed_minus -> .)
    TRUE            reduce using rule 107 (parsed_minus -> .)
    FALSE           reduce using rule 107 (parsed_minus -> .)

    parsed_minus                   shift and go to state 179

state 138

    (117) unary_expr -> PLUS postfix_expr .

    TIMES           reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    DIVIDE          reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    MODULO          reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    LTHAN           reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    GTHAN           reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    PLUS            reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    MINUS           reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    EQUAL           reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    NEQUAL          reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    AND             reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    SEMI            reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    OR              reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    RPAREN          reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    COMMA           reduce using rule 117 (unary_expr -> PLUS postfix_expr .)
    RBRACKET        reduce using rule 117 (unary_expr -> PLUS postfix_expr .)


state 139

    (109) multiplicative_expr -> multiplicative_expr TIMES . parsed_times unary_expr
    (110) parsed_times -> .

    MINUS           reduce using rule 110 (parsed_times -> .)
    PLUS            reduce using rule 110 (parsed_times -> .)
    NOT             reduce using rule 110 (parsed_times -> .)
    LPAREN          reduce using rule 110 (parsed_times -> .)
    ID              reduce using rule 110 (parsed_times -> .)
    CONST_INT       reduce using rule 110 (parsed_times -> .)
    CONST_REAL      reduce using rule 110 (parsed_times -> .)
    CONST_CHAR      reduce using rule 110 (parsed_times -> .)
    CONST_STRING    reduce using rule 110 (parsed_times -> .)
    TRUE            reduce using rule 110 (parsed_times -> .)
    FALSE           reduce using rule 110 (parsed_times -> .)

    parsed_times                   shift and go to state 180

state 140

    (111) multiplicative_expr -> multiplicative_expr DIVIDE . parsed_divide unary_expr
    (112) parsed_divide -> .

    MINUS           reduce using rule 112 (parsed_divide -> .)
    PLUS            reduce using rule 112 (parsed_divide -> .)
    NOT             reduce using rule 112 (parsed_divide -> .)
    LPAREN          reduce using rule 112 (parsed_divide -> .)
    ID              reduce using rule 112 (parsed_divide -> .)
    CONST_INT       reduce using rule 112 (parsed_divide -> .)
    CONST_REAL      reduce using rule 112 (parsed_divide -> .)
    CONST_CHAR      reduce using rule 112 (parsed_divide -> .)
    CONST_STRING    reduce using rule 112 (parsed_divide -> .)
    TRUE            reduce using rule 112 (parsed_divide -> .)
    FALSE           reduce using rule 112 (parsed_divide -> .)

    parsed_divide                  shift and go to state 181

state 141

    (113) multiplicative_expr -> multiplicative_expr MODULO . parsed_modulo unary_expr
    (114) parsed_modulo -> .

    MINUS           reduce using rule 114 (parsed_modulo -> .)
    PLUS            reduce using rule 114 (parsed_modulo -> .)
    NOT             reduce using rule 114 (parsed_modulo -> .)
    LPAREN          reduce using rule 114 (parsed_modulo -> .)
    ID              reduce using rule 114 (parsed_modulo -> .)
    CONST_INT       reduce using rule 114 (parsed_modulo -> .)
    CONST_REAL      reduce using rule 114 (parsed_modulo -> .)
    CONST_CHAR      reduce using rule 114 (parsed_modulo -> .)
    CONST_STRING    reduce using rule 114 (parsed_modulo -> .)
    TRUE            reduce using rule 114 (parsed_modulo -> .)
    FALSE           reduce using rule 114 (parsed_modulo -> .)

    parsed_modulo                  shift and go to state 182

state 142

    (116) unary_expr -> MINUS postfix_expr .

    TIMES           reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    DIVIDE          reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    MODULO          reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    LTHAN           reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    GTHAN           reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    PLUS            reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    MINUS           reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    EQUAL           reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    NEQUAL          reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    AND             reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    SEMI            reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    OR              reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    RPAREN          reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    COMMA           reduce using rule 116 (unary_expr -> MINUS postfix_expr .)
    RBRACKET        reduce using rule 116 (unary_expr -> MINUS postfix_expr .)


state 143

    (118) unary_expr -> NOT postfix_expr .

    TIMES           reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    DIVIDE          reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    MODULO          reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    LTHAN_EQUAL     reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    LTHAN           reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    GTHAN_EQUAL     reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    GTHAN           reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    PLUS            reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    MINUS           reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    EQUAL           reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    NEQUAL          reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    AND             reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    SEMI            reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    OR              reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    RPAREN          reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    COMMA           reduce using rule 118 (unary_expr -> NOT postfix_expr .)
    RBRACKET        reduce using rule 118 (unary_expr -> NOT postfix_expr .)


state 144

    (120) postfix_expr -> LPAREN expr . RPAREN
    (86) expr -> expr . OR and_expr

    RPAREN          shift and go to state 183
    OR              shift and go to state 128


state 145

    (74) while -> WHILE parsed_while LPAREN . expr parsed_while_expr RPAREN instruction_block
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 184
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 146

    (77) for -> FROM LPAREN for_init . COLON for_increment COLON for_end_value_step RPAREN instruction_block
    (78) for -> FROM LPAREN for_init . COLON for_end_value_no_step RPAREN instruction_block

    COLON           shift and go to state 185


state 147

    (79) for_init -> ID . ASGMT CONST_INT

    ASGMT           shift and go to state 186


state 148

    (24) single_function_definition_param -> type ID .

    RPAREN          reduce using rule 24 (single_function_definition_param -> type ID .)
    COMMA           reduce using rule 24 (single_function_definition_param -> type ID .)


state 149

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 187
    instruction_block              shift and go to state 188

state 150

    (22) function_definition_params -> function_definition_params COMMA . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (131) type -> . INT
    (132) type -> . REAL
    (133) type -> . CHAR
    (134) type -> . BOOL

    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    single_function_definition_param shift and go to state 189
    type                           shift and go to state 102

state 151

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 190

state 152

    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .

    START           reduce using rule 14 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)
    FUNCTION        reduce using rule 14 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)


state 153

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 191
    instruction_block              shift and go to state 192

state 154

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 193

state 155

    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .

    START           reduce using rule 18 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)
    FUNCTION        reduce using rule 18 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)


state 156

    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .

    SEMI            reduce using rule 34 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .)
    COMMA           reduce using rule 34 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .)


state 157

    (36) single_variable_declaration -> ID dim_definition dim_definition .

    SEMI            reduce using rule 36 (single_variable_declaration -> ID dim_definition dim_definition .)
    COMMA           reduce using rule 36 (single_variable_declaration -> ID dim_definition dim_definition .)


state 158

    (39) dim_definition -> LBRACKET CONST_INT . RBRACKET

    RBRACKET        shift and go to state 194


state 159

    (50) assignment -> variable_access ASGMT expr SEMI .

    RBRACE          reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)
    ID              reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)
    PRINT           reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)
    IF              reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)
    RETURN          reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)
    WHILE           reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)
    FROM            reduce using rule 50 (assignment -> variable_access ASGMT expr SEMI .)


state 160

    (51) assignment -> variable_access ASGMT READ LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 195


state 161

    (58) function_call -> ID LPAREN function_call_params RPAREN . SEMI

    SEMI            shift and go to state 196


state 162

    (60) function_call_params -> function_call_params COMMA . single_function_call_param
    (62) single_function_call_param -> . expr
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    single_function_call_param     shift and go to state 197
    expr                           shift and go to state 117
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 163

    (59) function_call -> ID LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    ID              reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    IF              reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    FROM            reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    TIMES           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    DIVIDE          reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    LTHAN_EQUAL     reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    LTHAN           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    GTHAN_EQUAL     reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    GTHAN           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    EQUAL           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    NEQUAL          reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    AND             reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    OR              reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    COMMA           reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)
    RBRACKET        reduce using rule 59 (function_call -> ID LPAREN RPAREN SEMI .)


state 164

    (54) dims_access -> single_dim_access single_dim_access .

    ASGMT           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    TIMES           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    DIVIDE          reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    MODULO          reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    LTHAN_EQUAL     reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    LTHAN           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    GTHAN_EQUAL     reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    GTHAN           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    PLUS            reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    MINUS           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    EQUAL           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    NEQUAL          reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    AND             reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    SEMI            reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    OR              reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    RPAREN          reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    COMMA           reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)
    RBRACKET        reduce using rule 54 (dims_access -> single_dim_access single_dim_access .)


state 165

    (57) single_dim_access -> LBRACKET expr . RBRACKET
    (86) expr -> expr . OR and_expr

    RBRACKET        shift and go to state 198
    OR              shift and go to state 128


state 166

    (63) print -> PRINT LPAREN print_params RPAREN . SEMI

    SEMI            shift and go to state 199


state 167

    (65) print_params -> print_params COMMA . single_print_param
    (67) single_print_param -> . expr
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    single_print_param             shift and go to state 200
    expr                           shift and go to state 125
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 168

    (64) print -> PRINT LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    ID              reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    FROM            reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)


state 169

    (68) conditional -> IF LPAREN expr RPAREN . parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr RPAREN . parsed_if_expr instruction_block
    (70) parsed_if_expr -> .

    LBRACE          reduce using rule 70 (parsed_if_expr -> .)

    parsed_if_expr                 shift and go to state 201

state 170

    (86) expr -> expr OR and_expr .

    SEMI            reduce using rule 86 (expr -> expr OR and_expr .)
    OR              reduce using rule 86 (expr -> expr OR and_expr .)
    RPAREN          reduce using rule 86 (expr -> expr OR and_expr .)
    COMMA           reduce using rule 86 (expr -> expr OR and_expr .)
    RBRACKET        reduce using rule 86 (expr -> expr OR and_expr .)


state 171

    (88) and_expr -> equality_expr AND equality_expr .

    SEMI            reduce using rule 88 (and_expr -> equality_expr AND equality_expr .)
    OR              reduce using rule 88 (and_expr -> equality_expr AND equality_expr .)
    RPAREN          reduce using rule 88 (and_expr -> equality_expr AND equality_expr .)
    COMMA           reduce using rule 88 (and_expr -> equality_expr AND equality_expr .)
    RBRACKET        reduce using rule 88 (and_expr -> equality_expr AND equality_expr .)


state 172

    (90) equality_expr -> relational_expr EQUAL parsed_equal . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    relational_expr                shift and go to state 202
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 173

    (92) equality_expr -> relational_expr NEQUAL parsed_nequal . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    relational_expr                shift and go to state 203
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 174

    (95) relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 204
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 175

    (97) relational_expr -> additive_expr LTHAN parsed_lthan . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 205
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 176

    (99) relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 206
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 177

    (101) relational_expr -> additive_expr GTHAN parsed_gthan . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 207
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 178

    (104) additive_expr -> additive_expr PLUS parsed_plus . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    multiplicative_expr            shift and go to state 208
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 179

    (106) additive_expr -> additive_expr MINUS parsed_minus . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    multiplicative_expr            shift and go to state 209
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 180

    (109) multiplicative_expr -> multiplicative_expr TIMES parsed_times . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    unary_expr                     shift and go to state 210
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 181

    (111) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    unary_expr                     shift and go to state 211
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 182

    (113) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    unary_expr                     shift and go to state 212
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 183

    (120) postfix_expr -> LPAREN expr RPAREN .

    TIMES           reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN_EQUAL     reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN           reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN_EQUAL     reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN           reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    NEQUAL          reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 120 (postfix_expr -> LPAREN expr RPAREN .)


state 184

    (74) while -> WHILE parsed_while LPAREN expr . parsed_while_expr RPAREN instruction_block
    (86) expr -> expr . OR and_expr
    (76) parsed_while_expr -> .

    OR              shift and go to state 128
    RPAREN          reduce using rule 76 (parsed_while_expr -> .)

    parsed_while_expr              shift and go to state 213

state 185

    (77) for -> FROM LPAREN for_init COLON . for_increment COLON for_end_value_step RPAREN instruction_block
    (78) for -> FROM LPAREN for_init COLON . for_end_value_no_step RPAREN instruction_block
    (81) for_increment -> . CONST_INT
    (83) for_increment -> . MINUS CONST_INT
    (80) for_end_value_no_step -> . CONST_INT

    CONST_INT       shift and go to state 216
    MINUS           shift and go to state 217

    for_increment                  shift and go to state 214
    for_end_value_no_step          shift and go to state 215

state 186

    (79) for_init -> ID ASGMT . CONST_INT

    CONST_INT       shift and go to state 218


state 187

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 219

state 188

    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .

    START           reduce using rule 12 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)
    FUNCTION        reduce using rule 12 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)


state 189

    (22) function_definition_params -> function_definition_params COMMA single_function_definition_param .

    RPAREN          reduce using rule 22 (function_definition_params -> function_definition_params COMMA single_function_definition_param .)
    COMMA           reduce using rule 22 (function_definition_params -> function_definition_params COMMA single_function_definition_param .)


state 190

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 13 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 13 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 191

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 220

state 192

    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .

    START           reduce using rule 16 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)
    FUNCTION        reduce using rule 16 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)


state 193

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 17 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 17 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 194

    (39) dim_definition -> LBRACKET CONST_INT RBRACKET .

    LBRACKET        reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)
    SEMI            reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)
    COMMA           reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)


state 195

    (51) assignment -> variable_access ASGMT READ LPAREN RPAREN . SEMI

    SEMI            shift and go to state 221


state 196

    (58) function_call -> ID LPAREN function_call_params RPAREN SEMI .

    RBRACE          reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    ID              reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    PRINT           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    IF              reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RETURN          reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    WHILE           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    FROM            reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    TIMES           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    DIVIDE          reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    MODULO          reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    LTHAN_EQUAL     reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    LTHAN           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    GTHAN_EQUAL     reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    GTHAN           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    PLUS            reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    MINUS           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    EQUAL           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    NEQUAL          reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    AND             reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    SEMI            reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    OR              reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RPAREN          reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    COMMA           reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RBRACKET        reduce using rule 58 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)


state 197

    (60) function_call_params -> function_call_params COMMA single_function_call_param .

    RPAREN          reduce using rule 60 (function_call_params -> function_call_params COMMA single_function_call_param .)
    COMMA           reduce using rule 60 (function_call_params -> function_call_params COMMA single_function_call_param .)


state 198

    (57) single_dim_access -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    ASGMT           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    LTHAN_EQUAL     reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    LTHAN           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    GTHAN_EQUAL     reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    GTHAN           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    NEQUAL          reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 57 (single_dim_access -> LBRACKET expr RBRACKET .)


state 199

    (63) print -> PRINT LPAREN print_params RPAREN SEMI .

    RBRACE          reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    ID              reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    PRINT           reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    IF              reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    RETURN          reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    WHILE           reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    FROM            reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)


state 200

    (65) print_params -> print_params COMMA single_print_param .

    RPAREN          reduce using rule 65 (print_params -> print_params COMMA single_print_param .)
    COMMA           reduce using rule 65 (print_params -> print_params COMMA single_print_param .)


state 201

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr . instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expr . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 222

state 202

    (90) equality_expr -> relational_expr EQUAL parsed_equal relational_expr .

    AND             reduce using rule 90 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    SEMI            reduce using rule 90 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    OR              reduce using rule 90 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    RPAREN          reduce using rule 90 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    COMMA           reduce using rule 90 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    RBRACKET        reduce using rule 90 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)


state 203

    (92) equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .

    AND             reduce using rule 92 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    SEMI            reduce using rule 92 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    OR              reduce using rule 92 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    RPAREN          reduce using rule 92 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    COMMA           reduce using rule 92 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    RBRACKET        reduce using rule 92 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)


state 204

    (95) relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .
    (104) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    NEQUAL          reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    AND             reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    SEMI            reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    OR              reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    RPAREN          reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    COMMA           reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    RBRACKET        reduce using rule 95 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137


state 205

    (97) relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .
    (104) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    NEQUAL          reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    AND             reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    SEMI            reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    OR              reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    RPAREN          reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    COMMA           reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    RBRACKET        reduce using rule 97 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137


state 206

    (99) relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .
    (104) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    NEQUAL          reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    AND             reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    SEMI            reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    OR              reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    RPAREN          reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    COMMA           reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    RBRACKET        reduce using rule 99 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137


state 207

    (101) relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .
    (104) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    NEQUAL          reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    AND             reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    SEMI            reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    OR              reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    RPAREN          reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    COMMA           reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    RBRACKET        reduce using rule 101 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137


state 208

    (104) additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .
    (109) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (111) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    LTHAN           reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN           reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    PLUS            reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    MINUS           reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    EQUAL           reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    NEQUAL          reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    AND             reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    SEMI            reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    OR              reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RPAREN          reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    COMMA           reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RBRACKET        reduce using rule 104 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    TIMES           shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 209

    (106) additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .
    (109) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (111) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    LTHAN           reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN           reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    PLUS            reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    MINUS           reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    EQUAL           reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    NEQUAL          reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    AND             reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    SEMI            reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    OR              reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RPAREN          reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    COMMA           reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RBRACKET        reduce using rule 106 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    TIMES           shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 210

    (109) multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .

    TIMES           reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    DIVIDE          reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MODULO          reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN_EQUAL     reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN           reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN_EQUAL     reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN           reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    PLUS            reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MINUS           reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    EQUAL           reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    NEQUAL          reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    AND             reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    SEMI            reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    OR              reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RPAREN          reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    COMMA           reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RBRACKET        reduce using rule 109 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)


state 211

    (111) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .

    TIMES           reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    DIVIDE          reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MODULO          reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN_EQUAL     reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN           reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN_EQUAL     reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN           reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    PLUS            reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MINUS           reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    EQUAL           reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    NEQUAL          reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    AND             reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    SEMI            reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    OR              reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RPAREN          reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    COMMA           reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RBRACKET        reduce using rule 111 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)


state 212

    (113) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .

    TIMES           reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    DIVIDE          reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MODULO          reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN_EQUAL     reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN           reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN_EQUAL     reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN           reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    PLUS            reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MINUS           reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    EQUAL           reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    NEQUAL          reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    AND             reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    SEMI            reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    OR              reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RPAREN          reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    COMMA           reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RBRACKET        reduce using rule 113 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)


state 213

    (74) while -> WHILE parsed_while LPAREN expr parsed_while_expr . RPAREN instruction_block

    RPAREN          shift and go to state 223


state 214

    (77) for -> FROM LPAREN for_init COLON for_increment . COLON for_end_value_step RPAREN instruction_block

    COLON           shift and go to state 224


state 215

    (78) for -> FROM LPAREN for_init COLON for_end_value_no_step . RPAREN instruction_block

    RPAREN          shift and go to state 225


state 216

    (81) for_increment -> CONST_INT .
    (80) for_end_value_no_step -> CONST_INT .

    COLON           reduce using rule 81 (for_increment -> CONST_INT .)
    RPAREN          reduce using rule 80 (for_end_value_no_step -> CONST_INT .)


state 217

    (83) for_increment -> MINUS . CONST_INT

    CONST_INT       shift and go to state 226


state 218

    (79) for_init -> ID ASGMT CONST_INT .

    COLON           reduce using rule 79 (for_init -> ID ASGMT CONST_INT .)


state 219

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 11 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 11 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 220

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 15 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 15 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 221

    (51) assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    ID              reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    IF              reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    FROM            reduce using rule 51 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)


state 222

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block . ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .

    ELSE            shift and go to state 227
    RBRACE          reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    ID              reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    PRINT           reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    IF              reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    RETURN          reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    WHILE           reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    FROM            reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)


state 223

    (74) while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 228

state 224

    (77) for -> FROM LPAREN for_init COLON for_increment COLON . for_end_value_step RPAREN instruction_block
    (82) for_end_value_step -> . expr
    (86) expr -> . expr OR and_expr
    (87) expr -> . and_expr
    (88) and_expr -> . equality_expr AND equality_expr
    (89) and_expr -> . equality_expr
    (90) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (92) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (94) equality_expr -> . relational_expr
    (95) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (97) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (99) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (101) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (103) relational_expr -> . additive_expr
    (104) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (106) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (108) additive_expr -> . multiplicative_expr
    (109) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (111) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (113) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (115) multiplicative_expr -> . unary_expr
    (116) unary_expr -> . MINUS postfix_expr
    (117) unary_expr -> . PLUS postfix_expr
    (118) unary_expr -> . NOT postfix_expr
    (119) unary_expr -> . postfix_expr
    (120) postfix_expr -> . LPAREN expr RPAREN
    (121) postfix_expr -> . variable_access
    (122) postfix_expr -> . function_call
    (123) postfix_expr -> . constant
    (52) variable_access -> . ID parsed_id_variable_access dims_access
    (58) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (59) function_call -> . ID LPAREN RPAREN SEMI
    (124) constant -> . CONST_INT
    (125) constant -> . CONST_REAL
    (126) constant -> . CONST_CHAR
    (127) constant -> . CONST_STRING
    (128) constant -> . constant_bool
    (129) constant_bool -> . TRUE
    (130) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    for_end_value_step             shift and go to state 229
    expr                           shift and go to state 230
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 225

    (78) for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 231

state 226

    (83) for_increment -> MINUS CONST_INT .

    COLON           reduce using rule 83 (for_increment -> MINUS CONST_INT .)


state 227

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE . parsed_else instruction_block
    (71) parsed_else -> .

    LBRACE          reduce using rule 71 (parsed_else -> .)

    parsed_else                    shift and go to state 232

state 228

    (74) while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .

    RBRACE          reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    ID              reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    PRINT           reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    IF              reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    RETURN          reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    WHILE           reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    FROM            reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)


state 229

    (77) for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step . RPAREN instruction_block

    RPAREN          shift and go to state 233


state 230

    (82) for_end_value_step -> expr .
    (86) expr -> expr . OR and_expr

    RPAREN          reduce using rule 82 (for_end_value_step -> expr .)
    OR              shift and go to state 128


state 231

    (78) for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .

    RBRACE          reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)
    ID              reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)
    PRINT           reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)
    IF              reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)
    RETURN          reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)
    WHILE           reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)
    FROM            reduce using rule 78 (for -> FROM LPAREN for_init COLON for_end_value_no_step RPAREN instruction_block .)


state 232

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 234

state 233

    (77) for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 235

state 234

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .

    RBRACE          reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    ID              reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    PRINT           reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    IF              reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    RETURN          reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    WHILE           reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    FROM            reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)


state 235

    (77) for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .

    RBRACE          reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)
    ID              reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)
    PRINT           reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)
    IF              reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)
    RETURN          reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)
    WHILE           reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)
    FROM            reduce using rule 77 (for -> FROM LPAREN for_init COLON for_increment COLON for_end_value_step RPAREN instruction_block .)

