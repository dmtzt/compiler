Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> init start
Rule 2     init -> <empty>
Rule 3     start -> global_variables_declaration functions_definition entry_point_definition
Rule 4     start -> global_variables_declaration entry_point_definition
Rule 5     start -> functions_definition entry_point_definition
Rule 6     start -> entry_point_definition
Rule 7     global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration
Rule 8     parsed_global_scope -> <empty>
Rule 9     functions_definition -> functions_definition single_function_definition
Rule 10    functions_definition -> single_function_definition
Rule 11    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 12    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
Rule 13    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 14    single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
Rule 15    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 16    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
Rule 17    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 18    single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
Rule 19    parsed_function_id -> <empty>
Rule 20    parsed_function_return_type -> <empty>
Rule 21    parsed_function_void_return_type -> <empty>
Rule 22    function_definition_params -> function_definition_params COMMA single_function_definition_param
Rule 23    function_definition_params -> single_function_definition_param
Rule 24    single_function_definition_param -> type ID
Rule 25    entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 26    entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block
Rule 27    parsed_main_id -> <empty>
Rule 28    local_variables_declaration -> LOCAL variables_declaration
Rule 29    variables_declaration -> VARIABLES COLON distinct_type_variables_declaration
Rule 30    distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration
Rule 31    distinct_type_variables_declaration -> shared_type_variables_declaration
Rule 32    shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI
Rule 33    parsed_type -> <empty>
Rule 34    shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration
Rule 35    shared_type_variables_declaration_list -> single_variable_declaration
Rule 36    single_variable_declaration -> ID dim_definition dim_definition
Rule 37    single_variable_declaration -> ID dim_definition
Rule 38    single_variable_declaration -> ID
Rule 39    dim_definition -> LBRACKET CONST_INT RBRACKET
Rule 40    instruction_block -> LBRACE statements RBRACE
Rule 41    instruction_block -> LBRACE RBRACE
Rule 42    statements -> statements single_statement
Rule 43    statements -> single_statement
Rule 44    single_statement -> assignment
Rule 45    single_statement -> function_call
Rule 46    single_statement -> print
Rule 47    single_statement -> conditional
Rule 48    single_statement -> loop
Rule 49    single_statement -> return
Rule 50    assignment -> variable_access ASGMT parsed_asgmt expr SEMI
Rule 51    assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI
Rule 52    parsed_asgmt -> <empty>
Rule 53    variable_access -> ID parsed_id_variable_access dims_access
Rule 54    parsed_id_variable_access -> <empty>
Rule 55    dims_access -> single_dim_access single_dim_access
Rule 56    dims_access -> single_dim_access
Rule 57    dims_access -> empty
Rule 58    single_dim_access -> LBRACKET expr RBRACKET
Rule 59    function_call -> ID LPAREN function_call_params RPAREN SEMI
Rule 60    function_call -> ID LPAREN RPAREN SEMI
Rule 61    function_call_params -> function_call_params COMMA single_function_call_param
Rule 62    function_call_params -> single_function_call_param
Rule 63    single_function_call_param -> expr
Rule 64    print -> PRINT LPAREN print_params RPAREN SEMI
Rule 65    print -> PRINT LPAREN RPAREN SEMI
Rule 66    print_params -> print_params COMMA single_print_param
Rule 67    print_params -> single_print_param
Rule 68    single_print_param -> expr
Rule 69    conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block
Rule 70    conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block
Rule 71    parsed_if_expression -> <empty>
Rule 72    parsed_else -> <empty>
Rule 73    loop -> while
Rule 74    loop -> for
Rule 75    while -> WHILE LPAREN expr RPAREN instruction_block
Rule 76    for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
Rule 77    for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block
Rule 78    return -> RETURN expr SEMI
Rule 79    return -> RETURN SEMI
Rule 80    expr -> expr OR and_expr
Rule 81    expr -> and_expr
Rule 82    and_expr -> equality_expr AND equality_expr
Rule 83    and_expr -> equality_expr
Rule 84    equality_expr -> relational_expr EQUAL parsed_equal relational_expr
Rule 85    parsed_equal -> <empty>
Rule 86    equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr
Rule 87    parsed_nequal -> <empty>
Rule 88    equality_expr -> relational_expr
Rule 89    relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
Rule 90    parsed_lthan_equal -> <empty>
Rule 91    relational_expr -> additive_expr LTHAN parsed_lthan additive_expr
Rule 92    parsed_lthan -> <empty>
Rule 93    relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
Rule 94    parsed_gthan_equal -> <empty>
Rule 95    relational_expr -> additive_expr GTHAN parsed_gthan additive_expr
Rule 96    parsed_gthan -> <empty>
Rule 97    relational_expr -> additive_expr
Rule 98    additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr
Rule 99    parsed_plus -> <empty>
Rule 100   additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr
Rule 101   parsed_minus -> <empty>
Rule 102   additive_expr -> multiplicative_expr
Rule 103   multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr
Rule 104   parsed_times -> <empty>
Rule 105   multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr
Rule 106   parsed_divide -> <empty>
Rule 107   multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr
Rule 108   parsed_modulo -> <empty>
Rule 109   multiplicative_expr -> unary_expr
Rule 110   unary_expr -> MINUS postfix_expr
Rule 111   unary_expr -> PLUS postfix_expr
Rule 112   unary_expr -> NOT postfix_expr
Rule 113   unary_expr -> postfix_expr
Rule 114   postfix_expr -> LPAREN expr RPAREN
Rule 115   postfix_expr -> variable_access
Rule 116   postfix_expr -> function_call
Rule 117   postfix_expr -> constant
Rule 118   constant -> CONST_INT
Rule 119   constant -> CONST_REAL
Rule 120   constant -> CONST_CHAR
Rule 121   constant -> CONST_STRING
Rule 122   constant -> constant_bool
Rule 123   constant_bool -> TRUE
Rule 124   constant_bool -> FALSE
Rule 125   type -> INT
Rule 126   type -> REAL
Rule 127   type -> CHAR
Rule 128   type -> BOOL
Rule 129   empty -> <empty>

Terminals, with rules where they appear

AND                  : 82
ASGMT                : 50 51 76 77
BOOL                 : 128
CHAR                 : 127
COLON                : 29 76 76 77
COMMA                : 22 34 61 66
CONST_CHAR           : 120
CONST_INT            : 39 76 76 76 77 77 118
CONST_REAL           : 119
CONST_STRING         : 121
DIVIDE               : 105
ELSE                 : 69
EQUAL                : 84
FALSE                : 124
FROM                 : 76 77
FUNCTION             : 11 12 13 14 15 16 17 18
GLOBAL               : 7
GTHAN                : 95
GTHAN_EQUAL          : 93
ID                   : 11 12 13 14 15 16 17 18 24 36 37 38 53 59 60 76 77
IF                   : 69 70
INT                  : 125
LBRACE               : 40 41
LBRACKET             : 39 58
LOCAL                : 28
LPAREN               : 11 12 13 14 15 16 17 18 25 26 51 59 60 64 65 69 70 75 76 77 114
LTHAN                : 91
LTHAN_EQUAL          : 89
MINUS                : 100 110
MODULO               : 107
NEQUAL               : 86
NOT                  : 112
OR                   : 80
PLUS                 : 98 111
PRINT                : 64 65
RBRACE               : 40 41
RBRACKET             : 39 58
READ                 : 51
REAL                 : 126
RETURN               : 78 79
RPAREN               : 11 12 13 14 15 16 17 18 25 26 51 59 60 64 65 69 70 75 76 77 114
SEMI                 : 32 50 51 59 60 64 65 78 79
START                : 25 26
TIMES                : 103
TRUE                 : 123
VARIABLES            : 29
VOID                 : 15 16 17 18
WHILE                : 75
error                : 

Nonterminals, with rules where they appear

additive_expr        : 89 89 91 91 93 93 95 95 97 98 100
and_expr             : 80 81
assignment           : 44
conditional          : 47
constant             : 117
constant_bool        : 122
dim_definition       : 36 36 37
dims_access          : 53
distinct_type_variables_declaration : 29 30
empty                : 57
entry_point_definition : 3 4 5 6
equality_expr        : 82 82 83
expr                 : 50 58 63 68 69 70 75 78 80 114
for                  : 74
function_call        : 45 116
function_call_params : 59 61
function_definition_params : 11 12 15 16 22
functions_definition : 3 5 9
global_variables_declaration : 3 4
init                 : 1
instruction_block    : 11 12 13 14 15 16 17 18 25 26 69 69 70 75 76 77
local_variables_declaration : 11 13 15 17 25
loop                 : 48
multiplicative_expr  : 98 100 102 103 105 107
parsed_asgmt         : 50 51
parsed_divide        : 105
parsed_else          : 69
parsed_equal         : 84
parsed_function_id   : 11 12 13 14 15 16 17 18
parsed_function_return_type : 11 12 13 14
parsed_function_void_return_type : 15 16 17 18
parsed_global_scope  : 7
parsed_gthan         : 95
parsed_gthan_equal   : 93
parsed_id_variable_access : 53
parsed_if_expression : 69 70
parsed_lthan         : 91
parsed_lthan_equal   : 89
parsed_main_id       : 25 26
parsed_minus         : 100
parsed_modulo        : 107
parsed_nequal        : 86
parsed_plus          : 98
parsed_times         : 103
parsed_type          : 32
postfix_expr         : 110 111 112 113
print                : 46
print_params         : 64 66
program              : 0
relational_expr      : 84 84 86 86 88
return               : 49
shared_type_variables_declaration : 30 31
shared_type_variables_declaration_list : 32 34
single_dim_access    : 55 55 56
single_function_call_param : 61 62
single_function_definition : 9 10
single_function_definition_param : 22 23
single_print_param   : 66 67
single_statement     : 42 43
single_variable_declaration : 34 35
start                : 1
statements           : 40 42
type                 : 11 12 13 14 24 32
unary_expr           : 103 105 107 109
variable_access      : 50 51 115
variables_declaration : 7 28
while                : 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init start
    (2) init -> .

    GLOBAL          reduce using rule 2 (init -> .)
    START           reduce using rule 2 (init -> .)
    FUNCTION        reduce using rule 2 (init -> .)

    program                        shift and go to state 1
    init                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> init . start
    (3) start -> . global_variables_declaration functions_definition entry_point_definition
    (4) start -> . global_variables_declaration entry_point_definition
    (5) start -> . functions_definition entry_point_definition
    (6) start -> . entry_point_definition
    (7) global_variables_declaration -> . GLOBAL parsed_global_scope variables_declaration
    (9) functions_definition -> . functions_definition single_function_definition
    (10) functions_definition -> . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    GLOBAL          shift and go to state 7
    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    start                          shift and go to state 3
    global_variables_declaration   shift and go to state 4
    functions_definition           shift and go to state 5
    entry_point_definition         shift and go to state 6
    single_function_definition     shift and go to state 8

state 3

    (1) program -> init start .

    $end            reduce using rule 1 (program -> init start .)


state 4

    (3) start -> global_variables_declaration . functions_definition entry_point_definition
    (4) start -> global_variables_declaration . entry_point_definition
    (9) functions_definition -> . functions_definition single_function_definition
    (10) functions_definition -> . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    functions_definition           shift and go to state 11
    entry_point_definition         shift and go to state 12
    single_function_definition     shift and go to state 8

state 5

    (5) start -> functions_definition . entry_point_definition
    (9) functions_definition -> functions_definition . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    entry_point_definition         shift and go to state 13
    single_function_definition     shift and go to state 14

state 6

    (6) start -> entry_point_definition .

    $end            reduce using rule 6 (start -> entry_point_definition .)


state 7

    (7) global_variables_declaration -> GLOBAL . parsed_global_scope variables_declaration
    (8) parsed_global_scope -> .

    VARIABLES       reduce using rule 8 (parsed_global_scope -> .)

    parsed_global_scope            shift and go to state 15

state 8

    (10) functions_definition -> single_function_definition .

    START           reduce using rule 10 (functions_definition -> single_function_definition .)
    FUNCTION        reduce using rule 10 (functions_definition -> single_function_definition .)


state 9

    (25) entry_point_definition -> START . parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START . parsed_main_id LPAREN RPAREN instruction_block
    (27) parsed_main_id -> .

    LPAREN          reduce using rule 27 (parsed_main_id -> .)

    parsed_main_id                 shift and go to state 16

state 10

    (11) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION . type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (125) type -> . INT
    (126) type -> . REAL
    (127) type -> . CHAR
    (128) type -> . BOOL

    VOID            shift and go to state 18
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 17

state 11

    (3) start -> global_variables_declaration functions_definition . entry_point_definition
    (9) functions_definition -> functions_definition . single_function_definition
    (25) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> . START parsed_main_id LPAREN RPAREN instruction_block
    (11) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> . FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (15) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block

    START           shift and go to state 9
    FUNCTION        shift and go to state 10

    entry_point_definition         shift and go to state 23
    single_function_definition     shift and go to state 14

state 12

    (4) start -> global_variables_declaration entry_point_definition .

    $end            reduce using rule 4 (start -> global_variables_declaration entry_point_definition .)


state 13

    (5) start -> functions_definition entry_point_definition .

    $end            reduce using rule 5 (start -> functions_definition entry_point_definition .)


state 14

    (9) functions_definition -> functions_definition single_function_definition .

    START           reduce using rule 9 (functions_definition -> functions_definition single_function_definition .)
    FUNCTION        reduce using rule 9 (functions_definition -> functions_definition single_function_definition .)


state 15

    (7) global_variables_declaration -> GLOBAL parsed_global_scope . variables_declaration
    (29) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 25

    variables_declaration          shift and go to state 24

state 16

    (25) entry_point_definition -> START parsed_main_id . LPAREN RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 26


state 17

    (11) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type . parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (20) parsed_function_return_type -> .

    ID              reduce using rule 20 (parsed_function_return_type -> .)

    parsed_function_return_type    shift and go to state 27

state 18

    (15) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block
    (21) parsed_function_void_return_type -> .

    ID              reduce using rule 21 (parsed_function_void_return_type -> .)

    parsed_function_void_return_type shift and go to state 28

state 19

    (125) type -> INT .

    ID              reduce using rule 125 (type -> INT .)


state 20

    (126) type -> REAL .

    ID              reduce using rule 126 (type -> REAL .)


state 21

    (127) type -> CHAR .

    ID              reduce using rule 127 (type -> CHAR .)


state 22

    (128) type -> BOOL .

    ID              reduce using rule 128 (type -> BOOL .)


state 23

    (3) start -> global_variables_declaration functions_definition entry_point_definition .

    $end            reduce using rule 3 (start -> global_variables_declaration functions_definition entry_point_definition .)


state 24

    (7) global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .

    START           reduce using rule 7 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)
    FUNCTION        reduce using rule 7 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)


state 25

    (29) variables_declaration -> VARIABLES . COLON distinct_type_variables_declaration

    COLON           shift and go to state 29


state 26

    (25) entry_point_definition -> START parsed_main_id LPAREN . RPAREN local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id LPAREN . RPAREN instruction_block

    RPAREN          shift and go to state 30


state 27

    (11) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type . ID parsed_function_id LPAREN RPAREN instruction_block

    ID              shift and go to state 31


state 28

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_function_id LPAREN RPAREN instruction_block

    ID              shift and go to state 32


state 29

    (29) variables_declaration -> VARIABLES COLON . distinct_type_variables_declaration
    (30) distinct_type_variables_declaration -> . distinct_type_variables_declaration shared_type_variables_declaration
    (31) distinct_type_variables_declaration -> . shared_type_variables_declaration
    (32) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (125) type -> . INT
    (126) type -> . REAL
    (127) type -> . CHAR
    (128) type -> . BOOL

    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    distinct_type_variables_declaration shift and go to state 33
    shared_type_variables_declaration shift and go to state 34
    type                           shift and go to state 35

state 30

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN . local_variables_declaration instruction_block
    (26) entry_point_definition -> START parsed_main_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 36
    instruction_block              shift and go to state 37

state 31

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID . parsed_function_id LPAREN RPAREN instruction_block
    (19) parsed_function_id -> .

    LPAREN          reduce using rule 19 (parsed_function_id -> .)

    parsed_function_id             shift and go to state 40

state 32

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_function_id LPAREN RPAREN instruction_block
    (19) parsed_function_id -> .

    LPAREN          reduce using rule 19 (parsed_function_id -> .)

    parsed_function_id             shift and go to state 41

state 33

    (29) variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .
    (30) distinct_type_variables_declaration -> distinct_type_variables_declaration . shared_type_variables_declaration
    (32) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (125) type -> . INT
    (126) type -> . REAL
    (127) type -> . CHAR
    (128) type -> . BOOL

    START           reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    FUNCTION        reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    LBRACE          reduce using rule 29 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    shared_type_variables_declaration shift and go to state 42
    type                           shift and go to state 35

state 34

    (31) distinct_type_variables_declaration -> shared_type_variables_declaration .

    INT             reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    REAL            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    CHAR            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    BOOL            reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    START           reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    FUNCTION        reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    LBRACE          reduce using rule 31 (distinct_type_variables_declaration -> shared_type_variables_declaration .)


state 35

    (32) shared_type_variables_declaration -> type . parsed_type shared_type_variables_declaration_list SEMI
    (33) parsed_type -> .

    ID              reduce using rule 33 (parsed_type -> .)

    parsed_type                    shift and go to state 43

state 36

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 44

state 37

    (26) entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block .

    $end            reduce using rule 26 (entry_point_definition -> START parsed_main_id LPAREN RPAREN instruction_block .)


state 38

    (28) local_variables_declaration -> LOCAL . variables_declaration
    (29) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 25

    variables_declaration          shift and go to state 45

state 39

    (40) instruction_block -> LBRACE . statements RBRACE
    (41) instruction_block -> LBRACE . RBRACE
    (42) statements -> . statements single_statement
    (43) statements -> . single_statement
    (44) single_statement -> . assignment
    (45) single_statement -> . function_call
    (46) single_statement -> . print
    (47) single_statement -> . conditional
    (48) single_statement -> . loop
    (49) single_statement -> . return
    (50) assignment -> . variable_access ASGMT parsed_asgmt expr SEMI
    (51) assignment -> . variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (64) print -> . PRINT LPAREN print_params RPAREN SEMI
    (65) print -> . PRINT LPAREN RPAREN SEMI
    (69) conditional -> . IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block
    (70) conditional -> . IF LPAREN expr RPAREN parsed_if_expression instruction_block
    (73) loop -> . while
    (74) loop -> . for
    (78) return -> . RETURN expr SEMI
    (79) return -> . RETURN SEMI
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (75) while -> . WHILE LPAREN expr RPAREN instruction_block
    (76) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    RBRACE          shift and go to state 47
    ID              shift and go to state 56
    PRINT           shift and go to state 57
    IF              shift and go to state 58
    RETURN          shift and go to state 61
    WHILE           shift and go to state 62
    FROM            shift and go to state 63

    statements                     shift and go to state 46
    single_statement               shift and go to state 48
    assignment                     shift and go to state 49
    function_call                  shift and go to state 50
    print                          shift and go to state 51
    conditional                    shift and go to state 52
    loop                           shift and go to state 53
    return                         shift and go to state 54
    variable_access                shift and go to state 55
    while                          shift and go to state 59
    for                            shift and go to state 60

state 40

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 64


state 41

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id . LPAREN RPAREN instruction_block

    LPAREN          shift and go to state 65


state 42

    (30) distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .

    INT             reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    REAL            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    CHAR            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    BOOL            reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    START           reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    FUNCTION        reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    LBRACE          reduce using rule 30 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)


state 43

    (32) shared_type_variables_declaration -> type parsed_type . shared_type_variables_declaration_list SEMI
    (34) shared_type_variables_declaration_list -> . shared_type_variables_declaration_list COMMA single_variable_declaration
    (35) shared_type_variables_declaration_list -> . single_variable_declaration
    (36) single_variable_declaration -> . ID dim_definition dim_definition
    (37) single_variable_declaration -> . ID dim_definition
    (38) single_variable_declaration -> . ID

    ID              shift and go to state 68

    shared_type_variables_declaration_list shift and go to state 66
    single_variable_declaration    shift and go to state 67

state 44

    (25) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .

    $end            reduce using rule 25 (entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 45

    (28) local_variables_declaration -> LOCAL variables_declaration .

    LBRACE          reduce using rule 28 (local_variables_declaration -> LOCAL variables_declaration .)


state 46

    (40) instruction_block -> LBRACE statements . RBRACE
    (42) statements -> statements . single_statement
    (44) single_statement -> . assignment
    (45) single_statement -> . function_call
    (46) single_statement -> . print
    (47) single_statement -> . conditional
    (48) single_statement -> . loop
    (49) single_statement -> . return
    (50) assignment -> . variable_access ASGMT parsed_asgmt expr SEMI
    (51) assignment -> . variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (64) print -> . PRINT LPAREN print_params RPAREN SEMI
    (65) print -> . PRINT LPAREN RPAREN SEMI
    (69) conditional -> . IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block
    (70) conditional -> . IF LPAREN expr RPAREN parsed_if_expression instruction_block
    (73) loop -> . while
    (74) loop -> . for
    (78) return -> . RETURN expr SEMI
    (79) return -> . RETURN SEMI
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (75) while -> . WHILE LPAREN expr RPAREN instruction_block
    (76) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> . FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    RBRACE          shift and go to state 69
    ID              shift and go to state 56
    PRINT           shift and go to state 57
    IF              shift and go to state 58
    RETURN          shift and go to state 61
    WHILE           shift and go to state 62
    FROM            shift and go to state 63

    single_statement               shift and go to state 70
    assignment                     shift and go to state 49
    function_call                  shift and go to state 50
    print                          shift and go to state 51
    conditional                    shift and go to state 52
    loop                           shift and go to state 53
    return                         shift and go to state 54
    variable_access                shift and go to state 55
    while                          shift and go to state 59
    for                            shift and go to state 60

state 47

    (41) instruction_block -> LBRACE RBRACE .

    $end            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    START           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    ID              reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    PRINT           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    IF              reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    RETURN          reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    WHILE           reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    FROM            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)
    ELSE            reduce using rule 41 (instruction_block -> LBRACE RBRACE .)


state 48

    (43) statements -> single_statement .

    RBRACE          reduce using rule 43 (statements -> single_statement .)
    ID              reduce using rule 43 (statements -> single_statement .)
    PRINT           reduce using rule 43 (statements -> single_statement .)
    IF              reduce using rule 43 (statements -> single_statement .)
    RETURN          reduce using rule 43 (statements -> single_statement .)
    WHILE           reduce using rule 43 (statements -> single_statement .)
    FROM            reduce using rule 43 (statements -> single_statement .)


state 49

    (44) single_statement -> assignment .

    RBRACE          reduce using rule 44 (single_statement -> assignment .)
    ID              reduce using rule 44 (single_statement -> assignment .)
    PRINT           reduce using rule 44 (single_statement -> assignment .)
    IF              reduce using rule 44 (single_statement -> assignment .)
    RETURN          reduce using rule 44 (single_statement -> assignment .)
    WHILE           reduce using rule 44 (single_statement -> assignment .)
    FROM            reduce using rule 44 (single_statement -> assignment .)


state 50

    (45) single_statement -> function_call .

    RBRACE          reduce using rule 45 (single_statement -> function_call .)
    ID              reduce using rule 45 (single_statement -> function_call .)
    PRINT           reduce using rule 45 (single_statement -> function_call .)
    IF              reduce using rule 45 (single_statement -> function_call .)
    RETURN          reduce using rule 45 (single_statement -> function_call .)
    WHILE           reduce using rule 45 (single_statement -> function_call .)
    FROM            reduce using rule 45 (single_statement -> function_call .)


state 51

    (46) single_statement -> print .

    RBRACE          reduce using rule 46 (single_statement -> print .)
    ID              reduce using rule 46 (single_statement -> print .)
    PRINT           reduce using rule 46 (single_statement -> print .)
    IF              reduce using rule 46 (single_statement -> print .)
    RETURN          reduce using rule 46 (single_statement -> print .)
    WHILE           reduce using rule 46 (single_statement -> print .)
    FROM            reduce using rule 46 (single_statement -> print .)


state 52

    (47) single_statement -> conditional .

    RBRACE          reduce using rule 47 (single_statement -> conditional .)
    ID              reduce using rule 47 (single_statement -> conditional .)
    PRINT           reduce using rule 47 (single_statement -> conditional .)
    IF              reduce using rule 47 (single_statement -> conditional .)
    RETURN          reduce using rule 47 (single_statement -> conditional .)
    WHILE           reduce using rule 47 (single_statement -> conditional .)
    FROM            reduce using rule 47 (single_statement -> conditional .)


state 53

    (48) single_statement -> loop .

    RBRACE          reduce using rule 48 (single_statement -> loop .)
    ID              reduce using rule 48 (single_statement -> loop .)
    PRINT           reduce using rule 48 (single_statement -> loop .)
    IF              reduce using rule 48 (single_statement -> loop .)
    RETURN          reduce using rule 48 (single_statement -> loop .)
    WHILE           reduce using rule 48 (single_statement -> loop .)
    FROM            reduce using rule 48 (single_statement -> loop .)


state 54

    (49) single_statement -> return .

    RBRACE          reduce using rule 49 (single_statement -> return .)
    ID              reduce using rule 49 (single_statement -> return .)
    PRINT           reduce using rule 49 (single_statement -> return .)
    IF              reduce using rule 49 (single_statement -> return .)
    RETURN          reduce using rule 49 (single_statement -> return .)
    WHILE           reduce using rule 49 (single_statement -> return .)
    FROM            reduce using rule 49 (single_statement -> return .)


state 55

    (50) assignment -> variable_access . ASGMT parsed_asgmt expr SEMI
    (51) assignment -> variable_access . ASGMT parsed_asgmt READ LPAREN RPAREN SEMI

    ASGMT           shift and go to state 71


state 56

    (59) function_call -> ID . LPAREN function_call_params RPAREN SEMI
    (60) function_call -> ID . LPAREN RPAREN SEMI
    (53) variable_access -> ID . parsed_id_variable_access dims_access
    (54) parsed_id_variable_access -> .

    LPAREN          shift and go to state 72
    LBRACKET        reduce using rule 54 (parsed_id_variable_access -> .)
    ASGMT           reduce using rule 54 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 73

state 57

    (64) print -> PRINT . LPAREN print_params RPAREN SEMI
    (65) print -> PRINT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 74


state 58

    (69) conditional -> IF . LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block
    (70) conditional -> IF . LPAREN expr RPAREN parsed_if_expression instruction_block

    LPAREN          shift and go to state 75


state 59

    (73) loop -> while .

    RBRACE          reduce using rule 73 (loop -> while .)
    ID              reduce using rule 73 (loop -> while .)
    PRINT           reduce using rule 73 (loop -> while .)
    IF              reduce using rule 73 (loop -> while .)
    RETURN          reduce using rule 73 (loop -> while .)
    WHILE           reduce using rule 73 (loop -> while .)
    FROM            reduce using rule 73 (loop -> while .)


state 60

    (74) loop -> for .

    RBRACE          reduce using rule 74 (loop -> for .)
    ID              reduce using rule 74 (loop -> for .)
    PRINT           reduce using rule 74 (loop -> for .)
    IF              reduce using rule 74 (loop -> for .)
    RETURN          reduce using rule 74 (loop -> for .)
    WHILE           reduce using rule 74 (loop -> for .)
    FROM            reduce using rule 74 (loop -> for .)


state 61

    (78) return -> RETURN . expr SEMI
    (79) return -> RETURN . SEMI
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    SEMI            shift and go to state 77
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 76
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 62

    (75) while -> WHILE . LPAREN expr RPAREN instruction_block

    LPAREN          shift and go to state 100


state 63

    (76) for -> FROM . LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM . LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    LPAREN          shift and go to state 101


state 64

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN instruction_block
    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN . RPAREN instruction_block
    (22) function_definition_params -> . function_definition_params COMMA single_function_definition_param
    (23) function_definition_params -> . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (125) type -> . INT
    (126) type -> . REAL
    (127) type -> . CHAR
    (128) type -> . BOOL

    RPAREN          shift and go to state 104
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 102
    function_definition_params     shift and go to state 103
    single_function_definition_param shift and go to state 105

state 65

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . function_definition_params RPAREN instruction_block
    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN . RPAREN instruction_block
    (22) function_definition_params -> . function_definition_params COMMA single_function_definition_param
    (23) function_definition_params -> . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (125) type -> . INT
    (126) type -> . REAL
    (127) type -> . CHAR
    (128) type -> . BOOL

    RPAREN          shift and go to state 107
    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    function_definition_params     shift and go to state 106
    single_function_definition_param shift and go to state 105
    type                           shift and go to state 102

state 66

    (32) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list . SEMI
    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list . COMMA single_variable_declaration

    SEMI            shift and go to state 108
    COMMA           shift and go to state 109


state 67

    (35) shared_type_variables_declaration_list -> single_variable_declaration .

    SEMI            reduce using rule 35 (shared_type_variables_declaration_list -> single_variable_declaration .)
    COMMA           reduce using rule 35 (shared_type_variables_declaration_list -> single_variable_declaration .)


state 68

    (36) single_variable_declaration -> ID . dim_definition dim_definition
    (37) single_variable_declaration -> ID . dim_definition
    (38) single_variable_declaration -> ID .
    (39) dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 38 (single_variable_declaration -> ID .)
    COMMA           reduce using rule 38 (single_variable_declaration -> ID .)
    LBRACKET        shift and go to state 111

    dim_definition                 shift and go to state 110

state 69

    (40) instruction_block -> LBRACE statements RBRACE .

    $end            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    START           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    ID              reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    IF              reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    FROM            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 40 (instruction_block -> LBRACE statements RBRACE .)


state 70

    (42) statements -> statements single_statement .

    RBRACE          reduce using rule 42 (statements -> statements single_statement .)
    ID              reduce using rule 42 (statements -> statements single_statement .)
    PRINT           reduce using rule 42 (statements -> statements single_statement .)
    IF              reduce using rule 42 (statements -> statements single_statement .)
    RETURN          reduce using rule 42 (statements -> statements single_statement .)
    WHILE           reduce using rule 42 (statements -> statements single_statement .)
    FROM            reduce using rule 42 (statements -> statements single_statement .)


state 71

    (50) assignment -> variable_access ASGMT . parsed_asgmt expr SEMI
    (51) assignment -> variable_access ASGMT . parsed_asgmt READ LPAREN RPAREN SEMI
    (52) parsed_asgmt -> .

    READ            reduce using rule 52 (parsed_asgmt -> .)
    MINUS           reduce using rule 52 (parsed_asgmt -> .)
    PLUS            reduce using rule 52 (parsed_asgmt -> .)
    NOT             reduce using rule 52 (parsed_asgmt -> .)
    LPAREN          reduce using rule 52 (parsed_asgmt -> .)
    ID              reduce using rule 52 (parsed_asgmt -> .)
    CONST_INT       reduce using rule 52 (parsed_asgmt -> .)
    CONST_REAL      reduce using rule 52 (parsed_asgmt -> .)
    CONST_CHAR      reduce using rule 52 (parsed_asgmt -> .)
    CONST_STRING    reduce using rule 52 (parsed_asgmt -> .)
    TRUE            reduce using rule 52 (parsed_asgmt -> .)
    FALSE           reduce using rule 52 (parsed_asgmt -> .)

    parsed_asgmt                   shift and go to state 112

state 72

    (59) function_call -> ID LPAREN . function_call_params RPAREN SEMI
    (60) function_call -> ID LPAREN . RPAREN SEMI
    (61) function_call_params -> . function_call_params COMMA single_function_call_param
    (62) function_call_params -> . single_function_call_param
    (63) single_function_call_param -> . expr
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    RPAREN          shift and go to state 114
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    function_call_params           shift and go to state 113
    single_function_call_param     shift and go to state 115
    expr                           shift and go to state 116
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 73

    (53) variable_access -> ID parsed_id_variable_access . dims_access
    (55) dims_access -> . single_dim_access single_dim_access
    (56) dims_access -> . single_dim_access
    (57) dims_access -> . empty
    (58) single_dim_access -> . LBRACKET expr RBRACKET
    (129) empty -> .

    LBRACKET        shift and go to state 120
    ASGMT           reduce using rule 129 (empty -> .)
    TIMES           reduce using rule 129 (empty -> .)
    DIVIDE          reduce using rule 129 (empty -> .)
    MODULO          reduce using rule 129 (empty -> .)
    LTHAN_EQUAL     reduce using rule 129 (empty -> .)
    LTHAN           reduce using rule 129 (empty -> .)
    GTHAN_EQUAL     reduce using rule 129 (empty -> .)
    GTHAN           reduce using rule 129 (empty -> .)
    PLUS            reduce using rule 129 (empty -> .)
    MINUS           reduce using rule 129 (empty -> .)
    EQUAL           reduce using rule 129 (empty -> .)
    NEQUAL          reduce using rule 129 (empty -> .)
    AND             reduce using rule 129 (empty -> .)
    SEMI            reduce using rule 129 (empty -> .)
    OR              reduce using rule 129 (empty -> .)
    RPAREN          reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    RBRACKET        reduce using rule 129 (empty -> .)

    dims_access                    shift and go to state 117
    single_dim_access              shift and go to state 118
    empty                          shift and go to state 119

state 74

    (64) print -> PRINT LPAREN . print_params RPAREN SEMI
    (65) print -> PRINT LPAREN . RPAREN SEMI
    (66) print_params -> . print_params COMMA single_print_param
    (67) print_params -> . single_print_param
    (68) single_print_param -> . expr
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    RPAREN          shift and go to state 122
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    print_params                   shift and go to state 121
    single_print_param             shift and go to state 123
    expr                           shift and go to state 124
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 75

    (69) conditional -> IF LPAREN . expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block
    (70) conditional -> IF LPAREN . expr RPAREN parsed_if_expression instruction_block
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 125
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 76

    (78) return -> RETURN expr . SEMI
    (80) expr -> expr . OR and_expr

    SEMI            shift and go to state 126
    OR              shift and go to state 127


state 77

    (79) return -> RETURN SEMI .

    RBRACE          reduce using rule 79 (return -> RETURN SEMI .)
    ID              reduce using rule 79 (return -> RETURN SEMI .)
    PRINT           reduce using rule 79 (return -> RETURN SEMI .)
    IF              reduce using rule 79 (return -> RETURN SEMI .)
    RETURN          reduce using rule 79 (return -> RETURN SEMI .)
    WHILE           reduce using rule 79 (return -> RETURN SEMI .)
    FROM            reduce using rule 79 (return -> RETURN SEMI .)


state 78

    (81) expr -> and_expr .

    SEMI            reduce using rule 81 (expr -> and_expr .)
    OR              reduce using rule 81 (expr -> and_expr .)
    RPAREN          reduce using rule 81 (expr -> and_expr .)
    COMMA           reduce using rule 81 (expr -> and_expr .)
    RBRACKET        reduce using rule 81 (expr -> and_expr .)


state 79

    (82) and_expr -> equality_expr . AND equality_expr
    (83) and_expr -> equality_expr .

    AND             shift and go to state 128
    SEMI            reduce using rule 83 (and_expr -> equality_expr .)
    OR              reduce using rule 83 (and_expr -> equality_expr .)
    RPAREN          reduce using rule 83 (and_expr -> equality_expr .)
    COMMA           reduce using rule 83 (and_expr -> equality_expr .)
    RBRACKET        reduce using rule 83 (and_expr -> equality_expr .)


state 80

    (84) equality_expr -> relational_expr . EQUAL parsed_equal relational_expr
    (86) equality_expr -> relational_expr . NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> relational_expr .

    EQUAL           shift and go to state 129
    NEQUAL          shift and go to state 130
    AND             reduce using rule 88 (equality_expr -> relational_expr .)
    SEMI            reduce using rule 88 (equality_expr -> relational_expr .)
    OR              reduce using rule 88 (equality_expr -> relational_expr .)
    RPAREN          reduce using rule 88 (equality_expr -> relational_expr .)
    COMMA           reduce using rule 88 (equality_expr -> relational_expr .)
    RBRACKET        reduce using rule 88 (equality_expr -> relational_expr .)


state 81

    (89) relational_expr -> additive_expr . LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> additive_expr . LTHAN parsed_lthan additive_expr
    (93) relational_expr -> additive_expr . GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> additive_expr . GTHAN parsed_gthan additive_expr
    (97) relational_expr -> additive_expr .
    (98) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    LTHAN_EQUAL     shift and go to state 131
    LTHAN           shift and go to state 132
    GTHAN_EQUAL     shift and go to state 133
    GTHAN           shift and go to state 134
    EQUAL           reduce using rule 97 (relational_expr -> additive_expr .)
    NEQUAL          reduce using rule 97 (relational_expr -> additive_expr .)
    AND             reduce using rule 97 (relational_expr -> additive_expr .)
    SEMI            reduce using rule 97 (relational_expr -> additive_expr .)
    OR              reduce using rule 97 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 97 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 97 (relational_expr -> additive_expr .)
    RBRACKET        reduce using rule 97 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 82

    (111) unary_expr -> PLUS . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    postfix_expr                   shift and go to state 137
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 83

    (102) additive_expr -> multiplicative_expr .
    (103) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (105) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 102 (additive_expr -> multiplicative_expr .)
    LTHAN           reduce using rule 102 (additive_expr -> multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 102 (additive_expr -> multiplicative_expr .)
    GTHAN           reduce using rule 102 (additive_expr -> multiplicative_expr .)
    PLUS            reduce using rule 102 (additive_expr -> multiplicative_expr .)
    MINUS           reduce using rule 102 (additive_expr -> multiplicative_expr .)
    EQUAL           reduce using rule 102 (additive_expr -> multiplicative_expr .)
    NEQUAL          reduce using rule 102 (additive_expr -> multiplicative_expr .)
    AND             reduce using rule 102 (additive_expr -> multiplicative_expr .)
    SEMI            reduce using rule 102 (additive_expr -> multiplicative_expr .)
    OR              reduce using rule 102 (additive_expr -> multiplicative_expr .)
    RPAREN          reduce using rule 102 (additive_expr -> multiplicative_expr .)
    COMMA           reduce using rule 102 (additive_expr -> multiplicative_expr .)
    RBRACKET        reduce using rule 102 (additive_expr -> multiplicative_expr .)
    TIMES           shift and go to state 138
    DIVIDE          shift and go to state 139
    MODULO          shift and go to state 140


state 84

    (110) unary_expr -> MINUS . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    postfix_expr                   shift and go to state 141
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 85

    (109) multiplicative_expr -> unary_expr .

    TIMES           reduce using rule 109 (multiplicative_expr -> unary_expr .)
    DIVIDE          reduce using rule 109 (multiplicative_expr -> unary_expr .)
    MODULO          reduce using rule 109 (multiplicative_expr -> unary_expr .)
    LTHAN_EQUAL     reduce using rule 109 (multiplicative_expr -> unary_expr .)
    LTHAN           reduce using rule 109 (multiplicative_expr -> unary_expr .)
    GTHAN_EQUAL     reduce using rule 109 (multiplicative_expr -> unary_expr .)
    GTHAN           reduce using rule 109 (multiplicative_expr -> unary_expr .)
    PLUS            reduce using rule 109 (multiplicative_expr -> unary_expr .)
    MINUS           reduce using rule 109 (multiplicative_expr -> unary_expr .)
    EQUAL           reduce using rule 109 (multiplicative_expr -> unary_expr .)
    NEQUAL          reduce using rule 109 (multiplicative_expr -> unary_expr .)
    AND             reduce using rule 109 (multiplicative_expr -> unary_expr .)
    SEMI            reduce using rule 109 (multiplicative_expr -> unary_expr .)
    OR              reduce using rule 109 (multiplicative_expr -> unary_expr .)
    RPAREN          reduce using rule 109 (multiplicative_expr -> unary_expr .)
    COMMA           reduce using rule 109 (multiplicative_expr -> unary_expr .)
    RBRACKET        reduce using rule 109 (multiplicative_expr -> unary_expr .)


state 86

    (113) unary_expr -> postfix_expr .

    TIMES           reduce using rule 113 (unary_expr -> postfix_expr .)
    DIVIDE          reduce using rule 113 (unary_expr -> postfix_expr .)
    MODULO          reduce using rule 113 (unary_expr -> postfix_expr .)
    LTHAN_EQUAL     reduce using rule 113 (unary_expr -> postfix_expr .)
    LTHAN           reduce using rule 113 (unary_expr -> postfix_expr .)
    GTHAN_EQUAL     reduce using rule 113 (unary_expr -> postfix_expr .)
    GTHAN           reduce using rule 113 (unary_expr -> postfix_expr .)
    PLUS            reduce using rule 113 (unary_expr -> postfix_expr .)
    MINUS           reduce using rule 113 (unary_expr -> postfix_expr .)
    EQUAL           reduce using rule 113 (unary_expr -> postfix_expr .)
    NEQUAL          reduce using rule 113 (unary_expr -> postfix_expr .)
    AND             reduce using rule 113 (unary_expr -> postfix_expr .)
    SEMI            reduce using rule 113 (unary_expr -> postfix_expr .)
    OR              reduce using rule 113 (unary_expr -> postfix_expr .)
    RPAREN          reduce using rule 113 (unary_expr -> postfix_expr .)
    COMMA           reduce using rule 113 (unary_expr -> postfix_expr .)
    RBRACKET        reduce using rule 113 (unary_expr -> postfix_expr .)


state 87

    (112) unary_expr -> NOT . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    postfix_expr                   shift and go to state 142
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 88

    (114) postfix_expr -> LPAREN . expr RPAREN
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 143
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 89

    (115) postfix_expr -> variable_access .

    TIMES           reduce using rule 115 (postfix_expr -> variable_access .)
    DIVIDE          reduce using rule 115 (postfix_expr -> variable_access .)
    MODULO          reduce using rule 115 (postfix_expr -> variable_access .)
    LTHAN_EQUAL     reduce using rule 115 (postfix_expr -> variable_access .)
    LTHAN           reduce using rule 115 (postfix_expr -> variable_access .)
    GTHAN_EQUAL     reduce using rule 115 (postfix_expr -> variable_access .)
    GTHAN           reduce using rule 115 (postfix_expr -> variable_access .)
    PLUS            reduce using rule 115 (postfix_expr -> variable_access .)
    MINUS           reduce using rule 115 (postfix_expr -> variable_access .)
    EQUAL           reduce using rule 115 (postfix_expr -> variable_access .)
    NEQUAL          reduce using rule 115 (postfix_expr -> variable_access .)
    AND             reduce using rule 115 (postfix_expr -> variable_access .)
    SEMI            reduce using rule 115 (postfix_expr -> variable_access .)
    OR              reduce using rule 115 (postfix_expr -> variable_access .)
    RPAREN          reduce using rule 115 (postfix_expr -> variable_access .)
    COMMA           reduce using rule 115 (postfix_expr -> variable_access .)
    RBRACKET        reduce using rule 115 (postfix_expr -> variable_access .)


state 90

    (116) postfix_expr -> function_call .

    TIMES           reduce using rule 116 (postfix_expr -> function_call .)
    DIVIDE          reduce using rule 116 (postfix_expr -> function_call .)
    MODULO          reduce using rule 116 (postfix_expr -> function_call .)
    LTHAN_EQUAL     reduce using rule 116 (postfix_expr -> function_call .)
    LTHAN           reduce using rule 116 (postfix_expr -> function_call .)
    GTHAN_EQUAL     reduce using rule 116 (postfix_expr -> function_call .)
    GTHAN           reduce using rule 116 (postfix_expr -> function_call .)
    PLUS            reduce using rule 116 (postfix_expr -> function_call .)
    MINUS           reduce using rule 116 (postfix_expr -> function_call .)
    EQUAL           reduce using rule 116 (postfix_expr -> function_call .)
    NEQUAL          reduce using rule 116 (postfix_expr -> function_call .)
    AND             reduce using rule 116 (postfix_expr -> function_call .)
    SEMI            reduce using rule 116 (postfix_expr -> function_call .)
    OR              reduce using rule 116 (postfix_expr -> function_call .)
    RPAREN          reduce using rule 116 (postfix_expr -> function_call .)
    COMMA           reduce using rule 116 (postfix_expr -> function_call .)
    RBRACKET        reduce using rule 116 (postfix_expr -> function_call .)


state 91

    (117) postfix_expr -> constant .

    TIMES           reduce using rule 117 (postfix_expr -> constant .)
    DIVIDE          reduce using rule 117 (postfix_expr -> constant .)
    MODULO          reduce using rule 117 (postfix_expr -> constant .)
    LTHAN_EQUAL     reduce using rule 117 (postfix_expr -> constant .)
    LTHAN           reduce using rule 117 (postfix_expr -> constant .)
    GTHAN_EQUAL     reduce using rule 117 (postfix_expr -> constant .)
    GTHAN           reduce using rule 117 (postfix_expr -> constant .)
    PLUS            reduce using rule 117 (postfix_expr -> constant .)
    MINUS           reduce using rule 117 (postfix_expr -> constant .)
    EQUAL           reduce using rule 117 (postfix_expr -> constant .)
    NEQUAL          reduce using rule 117 (postfix_expr -> constant .)
    AND             reduce using rule 117 (postfix_expr -> constant .)
    SEMI            reduce using rule 117 (postfix_expr -> constant .)
    OR              reduce using rule 117 (postfix_expr -> constant .)
    RPAREN          reduce using rule 117 (postfix_expr -> constant .)
    COMMA           reduce using rule 117 (postfix_expr -> constant .)
    RBRACKET        reduce using rule 117 (postfix_expr -> constant .)


state 92

    (53) variable_access -> ID . parsed_id_variable_access dims_access
    (59) function_call -> ID . LPAREN function_call_params RPAREN SEMI
    (60) function_call -> ID . LPAREN RPAREN SEMI
    (54) parsed_id_variable_access -> .

    LPAREN          shift and go to state 72
    LBRACKET        reduce using rule 54 (parsed_id_variable_access -> .)
    TIMES           reduce using rule 54 (parsed_id_variable_access -> .)
    DIVIDE          reduce using rule 54 (parsed_id_variable_access -> .)
    MODULO          reduce using rule 54 (parsed_id_variable_access -> .)
    LTHAN_EQUAL     reduce using rule 54 (parsed_id_variable_access -> .)
    LTHAN           reduce using rule 54 (parsed_id_variable_access -> .)
    GTHAN_EQUAL     reduce using rule 54 (parsed_id_variable_access -> .)
    GTHAN           reduce using rule 54 (parsed_id_variable_access -> .)
    PLUS            reduce using rule 54 (parsed_id_variable_access -> .)
    MINUS           reduce using rule 54 (parsed_id_variable_access -> .)
    EQUAL           reduce using rule 54 (parsed_id_variable_access -> .)
    NEQUAL          reduce using rule 54 (parsed_id_variable_access -> .)
    AND             reduce using rule 54 (parsed_id_variable_access -> .)
    SEMI            reduce using rule 54 (parsed_id_variable_access -> .)
    OR              reduce using rule 54 (parsed_id_variable_access -> .)
    RPAREN          reduce using rule 54 (parsed_id_variable_access -> .)
    COMMA           reduce using rule 54 (parsed_id_variable_access -> .)
    RBRACKET        reduce using rule 54 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 73

state 93

    (118) constant -> CONST_INT .

    TIMES           reduce using rule 118 (constant -> CONST_INT .)
    DIVIDE          reduce using rule 118 (constant -> CONST_INT .)
    MODULO          reduce using rule 118 (constant -> CONST_INT .)
    LTHAN_EQUAL     reduce using rule 118 (constant -> CONST_INT .)
    LTHAN           reduce using rule 118 (constant -> CONST_INT .)
    GTHAN_EQUAL     reduce using rule 118 (constant -> CONST_INT .)
    GTHAN           reduce using rule 118 (constant -> CONST_INT .)
    PLUS            reduce using rule 118 (constant -> CONST_INT .)
    MINUS           reduce using rule 118 (constant -> CONST_INT .)
    EQUAL           reduce using rule 118 (constant -> CONST_INT .)
    NEQUAL          reduce using rule 118 (constant -> CONST_INT .)
    AND             reduce using rule 118 (constant -> CONST_INT .)
    SEMI            reduce using rule 118 (constant -> CONST_INT .)
    OR              reduce using rule 118 (constant -> CONST_INT .)
    RPAREN          reduce using rule 118 (constant -> CONST_INT .)
    COMMA           reduce using rule 118 (constant -> CONST_INT .)
    RBRACKET        reduce using rule 118 (constant -> CONST_INT .)


state 94

    (119) constant -> CONST_REAL .

    TIMES           reduce using rule 119 (constant -> CONST_REAL .)
    DIVIDE          reduce using rule 119 (constant -> CONST_REAL .)
    MODULO          reduce using rule 119 (constant -> CONST_REAL .)
    LTHAN_EQUAL     reduce using rule 119 (constant -> CONST_REAL .)
    LTHAN           reduce using rule 119 (constant -> CONST_REAL .)
    GTHAN_EQUAL     reduce using rule 119 (constant -> CONST_REAL .)
    GTHAN           reduce using rule 119 (constant -> CONST_REAL .)
    PLUS            reduce using rule 119 (constant -> CONST_REAL .)
    MINUS           reduce using rule 119 (constant -> CONST_REAL .)
    EQUAL           reduce using rule 119 (constant -> CONST_REAL .)
    NEQUAL          reduce using rule 119 (constant -> CONST_REAL .)
    AND             reduce using rule 119 (constant -> CONST_REAL .)
    SEMI            reduce using rule 119 (constant -> CONST_REAL .)
    OR              reduce using rule 119 (constant -> CONST_REAL .)
    RPAREN          reduce using rule 119 (constant -> CONST_REAL .)
    COMMA           reduce using rule 119 (constant -> CONST_REAL .)
    RBRACKET        reduce using rule 119 (constant -> CONST_REAL .)


state 95

    (120) constant -> CONST_CHAR .

    TIMES           reduce using rule 120 (constant -> CONST_CHAR .)
    DIVIDE          reduce using rule 120 (constant -> CONST_CHAR .)
    MODULO          reduce using rule 120 (constant -> CONST_CHAR .)
    LTHAN_EQUAL     reduce using rule 120 (constant -> CONST_CHAR .)
    LTHAN           reduce using rule 120 (constant -> CONST_CHAR .)
    GTHAN_EQUAL     reduce using rule 120 (constant -> CONST_CHAR .)
    GTHAN           reduce using rule 120 (constant -> CONST_CHAR .)
    PLUS            reduce using rule 120 (constant -> CONST_CHAR .)
    MINUS           reduce using rule 120 (constant -> CONST_CHAR .)
    EQUAL           reduce using rule 120 (constant -> CONST_CHAR .)
    NEQUAL          reduce using rule 120 (constant -> CONST_CHAR .)
    AND             reduce using rule 120 (constant -> CONST_CHAR .)
    SEMI            reduce using rule 120 (constant -> CONST_CHAR .)
    OR              reduce using rule 120 (constant -> CONST_CHAR .)
    RPAREN          reduce using rule 120 (constant -> CONST_CHAR .)
    COMMA           reduce using rule 120 (constant -> CONST_CHAR .)
    RBRACKET        reduce using rule 120 (constant -> CONST_CHAR .)


state 96

    (121) constant -> CONST_STRING .

    TIMES           reduce using rule 121 (constant -> CONST_STRING .)
    DIVIDE          reduce using rule 121 (constant -> CONST_STRING .)
    MODULO          reduce using rule 121 (constant -> CONST_STRING .)
    LTHAN_EQUAL     reduce using rule 121 (constant -> CONST_STRING .)
    LTHAN           reduce using rule 121 (constant -> CONST_STRING .)
    GTHAN_EQUAL     reduce using rule 121 (constant -> CONST_STRING .)
    GTHAN           reduce using rule 121 (constant -> CONST_STRING .)
    PLUS            reduce using rule 121 (constant -> CONST_STRING .)
    MINUS           reduce using rule 121 (constant -> CONST_STRING .)
    EQUAL           reduce using rule 121 (constant -> CONST_STRING .)
    NEQUAL          reduce using rule 121 (constant -> CONST_STRING .)
    AND             reduce using rule 121 (constant -> CONST_STRING .)
    SEMI            reduce using rule 121 (constant -> CONST_STRING .)
    OR              reduce using rule 121 (constant -> CONST_STRING .)
    RPAREN          reduce using rule 121 (constant -> CONST_STRING .)
    COMMA           reduce using rule 121 (constant -> CONST_STRING .)
    RBRACKET        reduce using rule 121 (constant -> CONST_STRING .)


state 97

    (122) constant -> constant_bool .

    TIMES           reduce using rule 122 (constant -> constant_bool .)
    DIVIDE          reduce using rule 122 (constant -> constant_bool .)
    MODULO          reduce using rule 122 (constant -> constant_bool .)
    LTHAN_EQUAL     reduce using rule 122 (constant -> constant_bool .)
    LTHAN           reduce using rule 122 (constant -> constant_bool .)
    GTHAN_EQUAL     reduce using rule 122 (constant -> constant_bool .)
    GTHAN           reduce using rule 122 (constant -> constant_bool .)
    PLUS            reduce using rule 122 (constant -> constant_bool .)
    MINUS           reduce using rule 122 (constant -> constant_bool .)
    EQUAL           reduce using rule 122 (constant -> constant_bool .)
    NEQUAL          reduce using rule 122 (constant -> constant_bool .)
    AND             reduce using rule 122 (constant -> constant_bool .)
    SEMI            reduce using rule 122 (constant -> constant_bool .)
    OR              reduce using rule 122 (constant -> constant_bool .)
    RPAREN          reduce using rule 122 (constant -> constant_bool .)
    COMMA           reduce using rule 122 (constant -> constant_bool .)
    RBRACKET        reduce using rule 122 (constant -> constant_bool .)


state 98

    (123) constant_bool -> TRUE .

    TIMES           reduce using rule 123 (constant_bool -> TRUE .)
    DIVIDE          reduce using rule 123 (constant_bool -> TRUE .)
    MODULO          reduce using rule 123 (constant_bool -> TRUE .)
    LTHAN_EQUAL     reduce using rule 123 (constant_bool -> TRUE .)
    LTHAN           reduce using rule 123 (constant_bool -> TRUE .)
    GTHAN_EQUAL     reduce using rule 123 (constant_bool -> TRUE .)
    GTHAN           reduce using rule 123 (constant_bool -> TRUE .)
    PLUS            reduce using rule 123 (constant_bool -> TRUE .)
    MINUS           reduce using rule 123 (constant_bool -> TRUE .)
    EQUAL           reduce using rule 123 (constant_bool -> TRUE .)
    NEQUAL          reduce using rule 123 (constant_bool -> TRUE .)
    AND             reduce using rule 123 (constant_bool -> TRUE .)
    SEMI            reduce using rule 123 (constant_bool -> TRUE .)
    OR              reduce using rule 123 (constant_bool -> TRUE .)
    RPAREN          reduce using rule 123 (constant_bool -> TRUE .)
    COMMA           reduce using rule 123 (constant_bool -> TRUE .)
    RBRACKET        reduce using rule 123 (constant_bool -> TRUE .)


state 99

    (124) constant_bool -> FALSE .

    TIMES           reduce using rule 124 (constant_bool -> FALSE .)
    DIVIDE          reduce using rule 124 (constant_bool -> FALSE .)
    MODULO          reduce using rule 124 (constant_bool -> FALSE .)
    LTHAN_EQUAL     reduce using rule 124 (constant_bool -> FALSE .)
    LTHAN           reduce using rule 124 (constant_bool -> FALSE .)
    GTHAN_EQUAL     reduce using rule 124 (constant_bool -> FALSE .)
    GTHAN           reduce using rule 124 (constant_bool -> FALSE .)
    PLUS            reduce using rule 124 (constant_bool -> FALSE .)
    MINUS           reduce using rule 124 (constant_bool -> FALSE .)
    EQUAL           reduce using rule 124 (constant_bool -> FALSE .)
    NEQUAL          reduce using rule 124 (constant_bool -> FALSE .)
    AND             reduce using rule 124 (constant_bool -> FALSE .)
    SEMI            reduce using rule 124 (constant_bool -> FALSE .)
    OR              reduce using rule 124 (constant_bool -> FALSE .)
    RPAREN          reduce using rule 124 (constant_bool -> FALSE .)
    COMMA           reduce using rule 124 (constant_bool -> FALSE .)
    RBRACKET        reduce using rule 124 (constant_bool -> FALSE .)


state 100

    (75) while -> WHILE LPAREN . expr RPAREN instruction_block
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 144
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 101

    (76) for -> FROM LPAREN . ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM LPAREN . ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    ID              shift and go to state 145


state 102

    (24) single_function_definition_param -> type . ID

    ID              shift and go to state 146


state 103

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN instruction_block
    (22) function_definition_params -> function_definition_params . COMMA single_function_definition_param

    RPAREN          shift and go to state 147
    COMMA           shift and go to state 148


state 104

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 149
    instruction_block              shift and go to state 150

state 105

    (23) function_definition_params -> single_function_definition_param .

    RPAREN          reduce using rule 23 (function_definition_params -> single_function_definition_param .)
    COMMA           reduce using rule 23 (function_definition_params -> single_function_definition_param .)


state 106

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params . RPAREN instruction_block
    (22) function_definition_params -> function_definition_params . COMMA single_function_definition_param

    RPAREN          shift and go to state 151
    COMMA           shift and go to state 148


state 107

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 152
    instruction_block              shift and go to state 153

state 108

    (32) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .

    INT             reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    REAL            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    CHAR            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    BOOL            reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    START           reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    FUNCTION        reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    LBRACE          reduce using rule 32 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)


state 109

    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA . single_variable_declaration
    (36) single_variable_declaration -> . ID dim_definition dim_definition
    (37) single_variable_declaration -> . ID dim_definition
    (38) single_variable_declaration -> . ID

    ID              shift and go to state 68

    single_variable_declaration    shift and go to state 154

state 110

    (36) single_variable_declaration -> ID dim_definition . dim_definition
    (37) single_variable_declaration -> ID dim_definition .
    (39) dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 37 (single_variable_declaration -> ID dim_definition .)
    COMMA           reduce using rule 37 (single_variable_declaration -> ID dim_definition .)
    LBRACKET        shift and go to state 111

    dim_definition                 shift and go to state 155

state 111

    (39) dim_definition -> LBRACKET . CONST_INT RBRACKET

    CONST_INT       shift and go to state 156


state 112

    (50) assignment -> variable_access ASGMT parsed_asgmt . expr SEMI
    (51) assignment -> variable_access ASGMT parsed_asgmt . READ LPAREN RPAREN SEMI
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    READ            shift and go to state 158
    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    variable_access                shift and go to state 89
    expr                           shift and go to state 157
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 113

    (59) function_call -> ID LPAREN function_call_params . RPAREN SEMI
    (61) function_call_params -> function_call_params . COMMA single_function_call_param

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 114

    (60) function_call -> ID LPAREN RPAREN . SEMI

    SEMI            shift and go to state 161


state 115

    (62) function_call_params -> single_function_call_param .

    RPAREN          reduce using rule 62 (function_call_params -> single_function_call_param .)
    COMMA           reduce using rule 62 (function_call_params -> single_function_call_param .)


state 116

    (63) single_function_call_param -> expr .
    (80) expr -> expr . OR and_expr

    RPAREN          reduce using rule 63 (single_function_call_param -> expr .)
    COMMA           reduce using rule 63 (single_function_call_param -> expr .)
    OR              shift and go to state 127


state 117

    (53) variable_access -> ID parsed_id_variable_access dims_access .

    ASGMT           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    TIMES           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    DIVIDE          reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    MODULO          reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN_EQUAL     reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN_EQUAL     reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    PLUS            reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    MINUS           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    EQUAL           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    NEQUAL          reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    AND             reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    SEMI            reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    OR              reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    RPAREN          reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    COMMA           reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)
    RBRACKET        reduce using rule 53 (variable_access -> ID parsed_id_variable_access dims_access .)


state 118

    (55) dims_access -> single_dim_access . single_dim_access
    (56) dims_access -> single_dim_access .
    (58) single_dim_access -> . LBRACKET expr RBRACKET

    ASGMT           reduce using rule 56 (dims_access -> single_dim_access .)
    TIMES           reduce using rule 56 (dims_access -> single_dim_access .)
    DIVIDE          reduce using rule 56 (dims_access -> single_dim_access .)
    MODULO          reduce using rule 56 (dims_access -> single_dim_access .)
    LTHAN_EQUAL     reduce using rule 56 (dims_access -> single_dim_access .)
    LTHAN           reduce using rule 56 (dims_access -> single_dim_access .)
    GTHAN_EQUAL     reduce using rule 56 (dims_access -> single_dim_access .)
    GTHAN           reduce using rule 56 (dims_access -> single_dim_access .)
    PLUS            reduce using rule 56 (dims_access -> single_dim_access .)
    MINUS           reduce using rule 56 (dims_access -> single_dim_access .)
    EQUAL           reduce using rule 56 (dims_access -> single_dim_access .)
    NEQUAL          reduce using rule 56 (dims_access -> single_dim_access .)
    AND             reduce using rule 56 (dims_access -> single_dim_access .)
    SEMI            reduce using rule 56 (dims_access -> single_dim_access .)
    OR              reduce using rule 56 (dims_access -> single_dim_access .)
    RPAREN          reduce using rule 56 (dims_access -> single_dim_access .)
    COMMA           reduce using rule 56 (dims_access -> single_dim_access .)
    RBRACKET        reduce using rule 56 (dims_access -> single_dim_access .)
    LBRACKET        shift and go to state 120

    single_dim_access              shift and go to state 162

state 119

    (57) dims_access -> empty .

    ASGMT           reduce using rule 57 (dims_access -> empty .)
    TIMES           reduce using rule 57 (dims_access -> empty .)
    DIVIDE          reduce using rule 57 (dims_access -> empty .)
    MODULO          reduce using rule 57 (dims_access -> empty .)
    LTHAN_EQUAL     reduce using rule 57 (dims_access -> empty .)
    LTHAN           reduce using rule 57 (dims_access -> empty .)
    GTHAN_EQUAL     reduce using rule 57 (dims_access -> empty .)
    GTHAN           reduce using rule 57 (dims_access -> empty .)
    PLUS            reduce using rule 57 (dims_access -> empty .)
    MINUS           reduce using rule 57 (dims_access -> empty .)
    EQUAL           reduce using rule 57 (dims_access -> empty .)
    NEQUAL          reduce using rule 57 (dims_access -> empty .)
    AND             reduce using rule 57 (dims_access -> empty .)
    SEMI            reduce using rule 57 (dims_access -> empty .)
    OR              reduce using rule 57 (dims_access -> empty .)
    RPAREN          reduce using rule 57 (dims_access -> empty .)
    COMMA           reduce using rule 57 (dims_access -> empty .)
    RBRACKET        reduce using rule 57 (dims_access -> empty .)


state 120

    (58) single_dim_access -> LBRACKET . expr RBRACKET
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    expr                           shift and go to state 163
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 121

    (64) print -> PRINT LPAREN print_params . RPAREN SEMI
    (66) print_params -> print_params . COMMA single_print_param

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 165


state 122

    (65) print -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 166


state 123

    (67) print_params -> single_print_param .

    RPAREN          reduce using rule 67 (print_params -> single_print_param .)
    COMMA           reduce using rule 67 (print_params -> single_print_param .)


state 124

    (68) single_print_param -> expr .
    (80) expr -> expr . OR and_expr

    RPAREN          reduce using rule 68 (single_print_param -> expr .)
    COMMA           reduce using rule 68 (single_print_param -> expr .)
    OR              shift and go to state 127


state 125

    (69) conditional -> IF LPAREN expr . RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block
    (70) conditional -> IF LPAREN expr . RPAREN parsed_if_expression instruction_block
    (80) expr -> expr . OR and_expr

    RPAREN          shift and go to state 167
    OR              shift and go to state 127


state 126

    (78) return -> RETURN expr SEMI .

    RBRACE          reduce using rule 78 (return -> RETURN expr SEMI .)
    ID              reduce using rule 78 (return -> RETURN expr SEMI .)
    PRINT           reduce using rule 78 (return -> RETURN expr SEMI .)
    IF              reduce using rule 78 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 78 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 78 (return -> RETURN expr SEMI .)
    FROM            reduce using rule 78 (return -> RETURN expr SEMI .)


state 127

    (80) expr -> expr OR . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    and_expr                       shift and go to state 168
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 128

    (82) and_expr -> equality_expr AND . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    equality_expr                  shift and go to state 169
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 129

    (84) equality_expr -> relational_expr EQUAL . parsed_equal relational_expr
    (85) parsed_equal -> .

    MINUS           reduce using rule 85 (parsed_equal -> .)
    PLUS            reduce using rule 85 (parsed_equal -> .)
    NOT             reduce using rule 85 (parsed_equal -> .)
    LPAREN          reduce using rule 85 (parsed_equal -> .)
    ID              reduce using rule 85 (parsed_equal -> .)
    CONST_INT       reduce using rule 85 (parsed_equal -> .)
    CONST_REAL      reduce using rule 85 (parsed_equal -> .)
    CONST_CHAR      reduce using rule 85 (parsed_equal -> .)
    CONST_STRING    reduce using rule 85 (parsed_equal -> .)
    TRUE            reduce using rule 85 (parsed_equal -> .)
    FALSE           reduce using rule 85 (parsed_equal -> .)

    parsed_equal                   shift and go to state 170

state 130

    (86) equality_expr -> relational_expr NEQUAL . parsed_nequal relational_expr
    (87) parsed_nequal -> .

    MINUS           reduce using rule 87 (parsed_nequal -> .)
    PLUS            reduce using rule 87 (parsed_nequal -> .)
    NOT             reduce using rule 87 (parsed_nequal -> .)
    LPAREN          reduce using rule 87 (parsed_nequal -> .)
    ID              reduce using rule 87 (parsed_nequal -> .)
    CONST_INT       reduce using rule 87 (parsed_nequal -> .)
    CONST_REAL      reduce using rule 87 (parsed_nequal -> .)
    CONST_CHAR      reduce using rule 87 (parsed_nequal -> .)
    CONST_STRING    reduce using rule 87 (parsed_nequal -> .)
    TRUE            reduce using rule 87 (parsed_nequal -> .)
    FALSE           reduce using rule 87 (parsed_nequal -> .)

    parsed_nequal                  shift and go to state 171

state 131

    (89) relational_expr -> additive_expr LTHAN_EQUAL . parsed_lthan_equal additive_expr
    (90) parsed_lthan_equal -> .

    MINUS           reduce using rule 90 (parsed_lthan_equal -> .)
    PLUS            reduce using rule 90 (parsed_lthan_equal -> .)
    NOT             reduce using rule 90 (parsed_lthan_equal -> .)
    LPAREN          reduce using rule 90 (parsed_lthan_equal -> .)
    ID              reduce using rule 90 (parsed_lthan_equal -> .)
    CONST_INT       reduce using rule 90 (parsed_lthan_equal -> .)
    CONST_REAL      reduce using rule 90 (parsed_lthan_equal -> .)
    CONST_CHAR      reduce using rule 90 (parsed_lthan_equal -> .)
    CONST_STRING    reduce using rule 90 (parsed_lthan_equal -> .)
    TRUE            reduce using rule 90 (parsed_lthan_equal -> .)
    FALSE           reduce using rule 90 (parsed_lthan_equal -> .)

    parsed_lthan_equal             shift and go to state 172

state 132

    (91) relational_expr -> additive_expr LTHAN . parsed_lthan additive_expr
    (92) parsed_lthan -> .

    MINUS           reduce using rule 92 (parsed_lthan -> .)
    PLUS            reduce using rule 92 (parsed_lthan -> .)
    NOT             reduce using rule 92 (parsed_lthan -> .)
    LPAREN          reduce using rule 92 (parsed_lthan -> .)
    ID              reduce using rule 92 (parsed_lthan -> .)
    CONST_INT       reduce using rule 92 (parsed_lthan -> .)
    CONST_REAL      reduce using rule 92 (parsed_lthan -> .)
    CONST_CHAR      reduce using rule 92 (parsed_lthan -> .)
    CONST_STRING    reduce using rule 92 (parsed_lthan -> .)
    TRUE            reduce using rule 92 (parsed_lthan -> .)
    FALSE           reduce using rule 92 (parsed_lthan -> .)

    parsed_lthan                   shift and go to state 173

state 133

    (93) relational_expr -> additive_expr GTHAN_EQUAL . parsed_gthan_equal additive_expr
    (94) parsed_gthan_equal -> .

    MINUS           reduce using rule 94 (parsed_gthan_equal -> .)
    PLUS            reduce using rule 94 (parsed_gthan_equal -> .)
    NOT             reduce using rule 94 (parsed_gthan_equal -> .)
    LPAREN          reduce using rule 94 (parsed_gthan_equal -> .)
    ID              reduce using rule 94 (parsed_gthan_equal -> .)
    CONST_INT       reduce using rule 94 (parsed_gthan_equal -> .)
    CONST_REAL      reduce using rule 94 (parsed_gthan_equal -> .)
    CONST_CHAR      reduce using rule 94 (parsed_gthan_equal -> .)
    CONST_STRING    reduce using rule 94 (parsed_gthan_equal -> .)
    TRUE            reduce using rule 94 (parsed_gthan_equal -> .)
    FALSE           reduce using rule 94 (parsed_gthan_equal -> .)

    parsed_gthan_equal             shift and go to state 174

state 134

    (95) relational_expr -> additive_expr GTHAN . parsed_gthan additive_expr
    (96) parsed_gthan -> .

    MINUS           reduce using rule 96 (parsed_gthan -> .)
    PLUS            reduce using rule 96 (parsed_gthan -> .)
    NOT             reduce using rule 96 (parsed_gthan -> .)
    LPAREN          reduce using rule 96 (parsed_gthan -> .)
    ID              reduce using rule 96 (parsed_gthan -> .)
    CONST_INT       reduce using rule 96 (parsed_gthan -> .)
    CONST_REAL      reduce using rule 96 (parsed_gthan -> .)
    CONST_CHAR      reduce using rule 96 (parsed_gthan -> .)
    CONST_STRING    reduce using rule 96 (parsed_gthan -> .)
    TRUE            reduce using rule 96 (parsed_gthan -> .)
    FALSE           reduce using rule 96 (parsed_gthan -> .)

    parsed_gthan                   shift and go to state 175

state 135

    (98) additive_expr -> additive_expr PLUS . parsed_plus multiplicative_expr
    (99) parsed_plus -> .

    MINUS           reduce using rule 99 (parsed_plus -> .)
    PLUS            reduce using rule 99 (parsed_plus -> .)
    NOT             reduce using rule 99 (parsed_plus -> .)
    LPAREN          reduce using rule 99 (parsed_plus -> .)
    ID              reduce using rule 99 (parsed_plus -> .)
    CONST_INT       reduce using rule 99 (parsed_plus -> .)
    CONST_REAL      reduce using rule 99 (parsed_plus -> .)
    CONST_CHAR      reduce using rule 99 (parsed_plus -> .)
    CONST_STRING    reduce using rule 99 (parsed_plus -> .)
    TRUE            reduce using rule 99 (parsed_plus -> .)
    FALSE           reduce using rule 99 (parsed_plus -> .)

    parsed_plus                    shift and go to state 176

state 136

    (100) additive_expr -> additive_expr MINUS . parsed_minus multiplicative_expr
    (101) parsed_minus -> .

    MINUS           reduce using rule 101 (parsed_minus -> .)
    PLUS            reduce using rule 101 (parsed_minus -> .)
    NOT             reduce using rule 101 (parsed_minus -> .)
    LPAREN          reduce using rule 101 (parsed_minus -> .)
    ID              reduce using rule 101 (parsed_minus -> .)
    CONST_INT       reduce using rule 101 (parsed_minus -> .)
    CONST_REAL      reduce using rule 101 (parsed_minus -> .)
    CONST_CHAR      reduce using rule 101 (parsed_minus -> .)
    CONST_STRING    reduce using rule 101 (parsed_minus -> .)
    TRUE            reduce using rule 101 (parsed_minus -> .)
    FALSE           reduce using rule 101 (parsed_minus -> .)

    parsed_minus                   shift and go to state 177

state 137

    (111) unary_expr -> PLUS postfix_expr .

    TIMES           reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    DIVIDE          reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    MODULO          reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    LTHAN           reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    GTHAN           reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    PLUS            reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    MINUS           reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    EQUAL           reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    NEQUAL          reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    AND             reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    SEMI            reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    OR              reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    RPAREN          reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    COMMA           reduce using rule 111 (unary_expr -> PLUS postfix_expr .)
    RBRACKET        reduce using rule 111 (unary_expr -> PLUS postfix_expr .)


state 138

    (103) multiplicative_expr -> multiplicative_expr TIMES . parsed_times unary_expr
    (104) parsed_times -> .

    MINUS           reduce using rule 104 (parsed_times -> .)
    PLUS            reduce using rule 104 (parsed_times -> .)
    NOT             reduce using rule 104 (parsed_times -> .)
    LPAREN          reduce using rule 104 (parsed_times -> .)
    ID              reduce using rule 104 (parsed_times -> .)
    CONST_INT       reduce using rule 104 (parsed_times -> .)
    CONST_REAL      reduce using rule 104 (parsed_times -> .)
    CONST_CHAR      reduce using rule 104 (parsed_times -> .)
    CONST_STRING    reduce using rule 104 (parsed_times -> .)
    TRUE            reduce using rule 104 (parsed_times -> .)
    FALSE           reduce using rule 104 (parsed_times -> .)

    parsed_times                   shift and go to state 178

state 139

    (105) multiplicative_expr -> multiplicative_expr DIVIDE . parsed_divide unary_expr
    (106) parsed_divide -> .

    MINUS           reduce using rule 106 (parsed_divide -> .)
    PLUS            reduce using rule 106 (parsed_divide -> .)
    NOT             reduce using rule 106 (parsed_divide -> .)
    LPAREN          reduce using rule 106 (parsed_divide -> .)
    ID              reduce using rule 106 (parsed_divide -> .)
    CONST_INT       reduce using rule 106 (parsed_divide -> .)
    CONST_REAL      reduce using rule 106 (parsed_divide -> .)
    CONST_CHAR      reduce using rule 106 (parsed_divide -> .)
    CONST_STRING    reduce using rule 106 (parsed_divide -> .)
    TRUE            reduce using rule 106 (parsed_divide -> .)
    FALSE           reduce using rule 106 (parsed_divide -> .)

    parsed_divide                  shift and go to state 179

state 140

    (107) multiplicative_expr -> multiplicative_expr MODULO . parsed_modulo unary_expr
    (108) parsed_modulo -> .

    MINUS           reduce using rule 108 (parsed_modulo -> .)
    PLUS            reduce using rule 108 (parsed_modulo -> .)
    NOT             reduce using rule 108 (parsed_modulo -> .)
    LPAREN          reduce using rule 108 (parsed_modulo -> .)
    ID              reduce using rule 108 (parsed_modulo -> .)
    CONST_INT       reduce using rule 108 (parsed_modulo -> .)
    CONST_REAL      reduce using rule 108 (parsed_modulo -> .)
    CONST_CHAR      reduce using rule 108 (parsed_modulo -> .)
    CONST_STRING    reduce using rule 108 (parsed_modulo -> .)
    TRUE            reduce using rule 108 (parsed_modulo -> .)
    FALSE           reduce using rule 108 (parsed_modulo -> .)

    parsed_modulo                  shift and go to state 180

state 141

    (110) unary_expr -> MINUS postfix_expr .

    TIMES           reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    DIVIDE          reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    MODULO          reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    LTHAN           reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    GTHAN           reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    PLUS            reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    MINUS           reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    EQUAL           reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    NEQUAL          reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    AND             reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    SEMI            reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    OR              reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    RPAREN          reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    COMMA           reduce using rule 110 (unary_expr -> MINUS postfix_expr .)
    RBRACKET        reduce using rule 110 (unary_expr -> MINUS postfix_expr .)


state 142

    (112) unary_expr -> NOT postfix_expr .

    TIMES           reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    DIVIDE          reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    MODULO          reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    LTHAN_EQUAL     reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    LTHAN           reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    GTHAN_EQUAL     reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    GTHAN           reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    PLUS            reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    MINUS           reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    EQUAL           reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    NEQUAL          reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    AND             reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    SEMI            reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    OR              reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    RPAREN          reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    COMMA           reduce using rule 112 (unary_expr -> NOT postfix_expr .)
    RBRACKET        reduce using rule 112 (unary_expr -> NOT postfix_expr .)


state 143

    (114) postfix_expr -> LPAREN expr . RPAREN
    (80) expr -> expr . OR and_expr

    RPAREN          shift and go to state 181
    OR              shift and go to state 127


state 144

    (75) while -> WHILE LPAREN expr . RPAREN instruction_block
    (80) expr -> expr . OR and_expr

    RPAREN          shift and go to state 182
    OR              shift and go to state 127


state 145

    (76) for -> FROM LPAREN ID . ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM LPAREN ID . ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block

    ASGMT           shift and go to state 183


state 146

    (24) single_function_definition_param -> type ID .

    RPAREN          reduce using rule 24 (single_function_definition_param -> type ID .)
    COMMA           reduce using rule 24 (single_function_definition_param -> type ID .)


state 147

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 184
    instruction_block              shift and go to state 185

state 148

    (22) function_definition_params -> function_definition_params COMMA . single_function_definition_param
    (24) single_function_definition_param -> . type ID
    (125) type -> . INT
    (126) type -> . REAL
    (127) type -> . CHAR
    (128) type -> . BOOL

    INT             shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    BOOL            shift and go to state 22

    single_function_definition_param shift and go to state 186
    type                           shift and go to state 102

state 149

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 187

state 150

    (14) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .

    START           reduce using rule 14 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)
    FUNCTION        reduce using rule 14 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)


state 151

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN . instruction_block
    (28) local_variables_declaration -> . LOCAL variables_declaration
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LOCAL           shift and go to state 38
    LBRACE          shift and go to state 39

    local_variables_declaration    shift and go to state 188
    instruction_block              shift and go to state 189

state 152

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 190

state 153

    (18) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .

    START           reduce using rule 18 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)
    FUNCTION        reduce using rule 18 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN instruction_block .)


state 154

    (34) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .

    SEMI            reduce using rule 34 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .)
    COMMA           reduce using rule 34 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA single_variable_declaration .)


state 155

    (36) single_variable_declaration -> ID dim_definition dim_definition .

    SEMI            reduce using rule 36 (single_variable_declaration -> ID dim_definition dim_definition .)
    COMMA           reduce using rule 36 (single_variable_declaration -> ID dim_definition dim_definition .)


state 156

    (39) dim_definition -> LBRACKET CONST_INT . RBRACKET

    RBRACKET        shift and go to state 191


state 157

    (50) assignment -> variable_access ASGMT parsed_asgmt expr . SEMI
    (80) expr -> expr . OR and_expr

    SEMI            shift and go to state 192
    OR              shift and go to state 127


state 158

    (51) assignment -> variable_access ASGMT parsed_asgmt READ . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 193


state 159

    (59) function_call -> ID LPAREN function_call_params RPAREN . SEMI

    SEMI            shift and go to state 194


state 160

    (61) function_call_params -> function_call_params COMMA . single_function_call_param
    (63) single_function_call_param -> . expr
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    single_function_call_param     shift and go to state 195
    expr                           shift and go to state 116
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 161

    (60) function_call -> ID LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    ID              reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    IF              reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    FROM            reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    TIMES           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    DIVIDE          reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    LTHAN_EQUAL     reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    LTHAN           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    GTHAN_EQUAL     reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    GTHAN           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    EQUAL           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    NEQUAL          reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    AND             reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    OR              reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    COMMA           reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)
    RBRACKET        reduce using rule 60 (function_call -> ID LPAREN RPAREN SEMI .)


state 162

    (55) dims_access -> single_dim_access single_dim_access .

    ASGMT           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    TIMES           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    DIVIDE          reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    MODULO          reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    LTHAN_EQUAL     reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    LTHAN           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    GTHAN_EQUAL     reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    GTHAN           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    PLUS            reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    MINUS           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    EQUAL           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    NEQUAL          reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    AND             reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    SEMI            reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    OR              reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    RPAREN          reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    COMMA           reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)
    RBRACKET        reduce using rule 55 (dims_access -> single_dim_access single_dim_access .)


state 163

    (58) single_dim_access -> LBRACKET expr . RBRACKET
    (80) expr -> expr . OR and_expr

    RBRACKET        shift and go to state 196
    OR              shift and go to state 127


state 164

    (64) print -> PRINT LPAREN print_params RPAREN . SEMI

    SEMI            shift and go to state 197


state 165

    (66) print_params -> print_params COMMA . single_print_param
    (68) single_print_param -> . expr
    (80) expr -> . expr OR and_expr
    (81) expr -> . and_expr
    (82) and_expr -> . equality_expr AND equality_expr
    (83) and_expr -> . equality_expr
    (84) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (86) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (88) equality_expr -> . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    single_print_param             shift and go to state 198
    expr                           shift and go to state 124
    and_expr                       shift and go to state 78
    equality_expr                  shift and go to state 79
    relational_expr                shift and go to state 80
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 166

    (65) print -> PRINT LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)
    ID              reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)
    FROM            reduce using rule 65 (print -> PRINT LPAREN RPAREN SEMI .)


state 167

    (69) conditional -> IF LPAREN expr RPAREN . parsed_if_expression instruction_block ELSE parsed_else instruction_block
    (70) conditional -> IF LPAREN expr RPAREN . parsed_if_expression instruction_block
    (71) parsed_if_expression -> .

    LBRACE          reduce using rule 71 (parsed_if_expression -> .)

    parsed_if_expression           shift and go to state 199

state 168

    (80) expr -> expr OR and_expr .

    SEMI            reduce using rule 80 (expr -> expr OR and_expr .)
    OR              reduce using rule 80 (expr -> expr OR and_expr .)
    RPAREN          reduce using rule 80 (expr -> expr OR and_expr .)
    COMMA           reduce using rule 80 (expr -> expr OR and_expr .)
    RBRACKET        reduce using rule 80 (expr -> expr OR and_expr .)


state 169

    (82) and_expr -> equality_expr AND equality_expr .

    SEMI            reduce using rule 82 (and_expr -> equality_expr AND equality_expr .)
    OR              reduce using rule 82 (and_expr -> equality_expr AND equality_expr .)
    RPAREN          reduce using rule 82 (and_expr -> equality_expr AND equality_expr .)
    COMMA           reduce using rule 82 (and_expr -> equality_expr AND equality_expr .)
    RBRACKET        reduce using rule 82 (and_expr -> equality_expr AND equality_expr .)


state 170

    (84) equality_expr -> relational_expr EQUAL parsed_equal . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    relational_expr                shift and go to state 200
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 171

    (86) equality_expr -> relational_expr NEQUAL parsed_nequal . relational_expr
    (89) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (91) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (93) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (95) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (97) relational_expr -> . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    relational_expr                shift and go to state 201
    additive_expr                  shift and go to state 81
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 172

    (89) relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 202
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 173

    (91) relational_expr -> additive_expr LTHAN parsed_lthan . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 203
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 174

    (93) relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 204
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 175

    (95) relational_expr -> additive_expr GTHAN parsed_gthan . additive_expr
    (98) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (102) additive_expr -> . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    additive_expr                  shift and go to state 205
    multiplicative_expr            shift and go to state 83
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 176

    (98) additive_expr -> additive_expr PLUS parsed_plus . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    multiplicative_expr            shift and go to state 206
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 177

    (100) additive_expr -> additive_expr MINUS parsed_minus . multiplicative_expr
    (103) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (105) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (109) multiplicative_expr -> . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    multiplicative_expr            shift and go to state 207
    unary_expr                     shift and go to state 85
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 178

    (103) multiplicative_expr -> multiplicative_expr TIMES parsed_times . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    unary_expr                     shift and go to state 208
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 179

    (105) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    unary_expr                     shift and go to state 209
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 180

    (107) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo . unary_expr
    (110) unary_expr -> . MINUS postfix_expr
    (111) unary_expr -> . PLUS postfix_expr
    (112) unary_expr -> . NOT postfix_expr
    (113) unary_expr -> . postfix_expr
    (114) postfix_expr -> . LPAREN expr RPAREN
    (115) postfix_expr -> . variable_access
    (116) postfix_expr -> . function_call
    (117) postfix_expr -> . constant
    (53) variable_access -> . ID parsed_id_variable_access dims_access
    (59) function_call -> . ID LPAREN function_call_params RPAREN SEMI
    (60) function_call -> . ID LPAREN RPAREN SEMI
    (118) constant -> . CONST_INT
    (119) constant -> . CONST_REAL
    (120) constant -> . CONST_CHAR
    (121) constant -> . CONST_STRING
    (122) constant -> . constant_bool
    (123) constant_bool -> . TRUE
    (124) constant_bool -> . FALSE

    MINUS           shift and go to state 84
    PLUS            shift and go to state 82
    NOT             shift and go to state 87
    LPAREN          shift and go to state 88
    ID              shift and go to state 92
    CONST_INT       shift and go to state 93
    CONST_REAL      shift and go to state 94
    CONST_CHAR      shift and go to state 95
    CONST_STRING    shift and go to state 96
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    unary_expr                     shift and go to state 210
    postfix_expr                   shift and go to state 86
    variable_access                shift and go to state 89
    function_call                  shift and go to state 90
    constant                       shift and go to state 91
    constant_bool                  shift and go to state 97

state 181

    (114) postfix_expr -> LPAREN expr RPAREN .

    TIMES           reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN_EQUAL     reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN           reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN_EQUAL     reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN           reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    NEQUAL          reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 114 (postfix_expr -> LPAREN expr RPAREN .)


state 182

    (75) while -> WHILE LPAREN expr RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 211

state 183

    (76) for -> FROM LPAREN ID ASGMT . CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM LPAREN ID ASGMT . CONST_INT COLON CONST_INT RPAREN instruction_block

    CONST_INT       shift and go to state 212


state 184

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 213

state 185

    (12) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .

    START           reduce using rule 12 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)
    FUNCTION        reduce using rule 12 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)


state 186

    (22) function_definition_params -> function_definition_params COMMA single_function_definition_param .

    RPAREN          reduce using rule 22 (function_definition_params -> function_definition_params COMMA single_function_definition_param .)
    COMMA           reduce using rule 22 (function_definition_params -> function_definition_params COMMA single_function_definition_param .)


state 187

    (13) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 13 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 13 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 188

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 214

state 189

    (16) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .

    START           reduce using rule 16 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)
    FUNCTION        reduce using rule 16 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN instruction_block .)


state 190

    (17) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 17 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 17 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 191

    (39) dim_definition -> LBRACKET CONST_INT RBRACKET .

    LBRACKET        reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)
    SEMI            reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)
    COMMA           reduce using rule 39 (dim_definition -> LBRACKET CONST_INT RBRACKET .)


state 192

    (50) assignment -> variable_access ASGMT parsed_asgmt expr SEMI .

    RBRACE          reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    ID              reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    PRINT           reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    IF              reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    RETURN          reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    WHILE           reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)
    FROM            reduce using rule 50 (assignment -> variable_access ASGMT parsed_asgmt expr SEMI .)


state 193

    (51) assignment -> variable_access ASGMT parsed_asgmt READ LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 215


state 194

    (59) function_call -> ID LPAREN function_call_params RPAREN SEMI .

    RBRACE          reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    ID              reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    PRINT           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    IF              reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RETURN          reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    WHILE           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    FROM            reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    TIMES           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    DIVIDE          reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    MODULO          reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    LTHAN_EQUAL     reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    LTHAN           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    GTHAN_EQUAL     reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    GTHAN           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    PLUS            reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    MINUS           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    EQUAL           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    NEQUAL          reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    AND             reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    SEMI            reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    OR              reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RPAREN          reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    COMMA           reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)
    RBRACKET        reduce using rule 59 (function_call -> ID LPAREN function_call_params RPAREN SEMI .)


state 195

    (61) function_call_params -> function_call_params COMMA single_function_call_param .

    RPAREN          reduce using rule 61 (function_call_params -> function_call_params COMMA single_function_call_param .)
    COMMA           reduce using rule 61 (function_call_params -> function_call_params COMMA single_function_call_param .)


state 196

    (58) single_dim_access -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    ASGMT           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    LTHAN_EQUAL     reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    LTHAN           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    GTHAN_EQUAL     reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    GTHAN           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    NEQUAL          reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 58 (single_dim_access -> LBRACKET expr RBRACKET .)


state 197

    (64) print -> PRINT LPAREN print_params RPAREN SEMI .

    RBRACE          reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    ID              reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    PRINT           reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    IF              reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    RETURN          reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    WHILE           reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    FROM            reduce using rule 64 (print -> PRINT LPAREN print_params RPAREN SEMI .)


state 198

    (66) print_params -> print_params COMMA single_print_param .

    RPAREN          reduce using rule 66 (print_params -> print_params COMMA single_print_param .)
    COMMA           reduce using rule 66 (print_params -> print_params COMMA single_print_param .)


state 199

    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expression . instruction_block ELSE parsed_else instruction_block
    (70) conditional -> IF LPAREN expr RPAREN parsed_if_expression . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 216

state 200

    (84) equality_expr -> relational_expr EQUAL parsed_equal relational_expr .

    AND             reduce using rule 84 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    SEMI            reduce using rule 84 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    OR              reduce using rule 84 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    RPAREN          reduce using rule 84 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    COMMA           reduce using rule 84 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    RBRACKET        reduce using rule 84 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)


state 201

    (86) equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .

    AND             reduce using rule 86 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    SEMI            reduce using rule 86 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    OR              reduce using rule 86 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    RPAREN          reduce using rule 86 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    COMMA           reduce using rule 86 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    RBRACKET        reduce using rule 86 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)


state 202

    (89) relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .
    (98) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    NEQUAL          reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    AND             reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    SEMI            reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    OR              reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    RPAREN          reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    COMMA           reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    RBRACKET        reduce using rule 89 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 203

    (91) relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .
    (98) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    NEQUAL          reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    AND             reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    SEMI            reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    OR              reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    RPAREN          reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    COMMA           reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    RBRACKET        reduce using rule 91 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 204

    (93) relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .
    (98) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    NEQUAL          reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    AND             reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    SEMI            reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    OR              reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    RPAREN          reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    COMMA           reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    RBRACKET        reduce using rule 93 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 205

    (95) relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .
    (98) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (100) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    NEQUAL          reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    AND             reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    SEMI            reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    OR              reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    RPAREN          reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    COMMA           reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    RBRACKET        reduce using rule 95 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 206

    (98) additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .
    (103) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (105) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    LTHAN           reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN           reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    PLUS            reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    MINUS           reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    EQUAL           reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    NEQUAL          reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    AND             reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    SEMI            reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    OR              reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RPAREN          reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    COMMA           reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RBRACKET        reduce using rule 98 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    TIMES           shift and go to state 138
    DIVIDE          shift and go to state 139
    MODULO          shift and go to state 140


state 207

    (100) additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .
    (103) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (105) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (107) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    LTHAN           reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN           reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    PLUS            reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    MINUS           reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    EQUAL           reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    NEQUAL          reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    AND             reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    SEMI            reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    OR              reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RPAREN          reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    COMMA           reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RBRACKET        reduce using rule 100 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    TIMES           shift and go to state 138
    DIVIDE          shift and go to state 139
    MODULO          shift and go to state 140


state 208

    (103) multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .

    TIMES           reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    DIVIDE          reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MODULO          reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN_EQUAL     reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN           reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN_EQUAL     reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN           reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    PLUS            reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MINUS           reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    EQUAL           reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    NEQUAL          reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    AND             reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    SEMI            reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    OR              reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RPAREN          reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    COMMA           reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RBRACKET        reduce using rule 103 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)


state 209

    (105) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .

    TIMES           reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    DIVIDE          reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MODULO          reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN_EQUAL     reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN           reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN_EQUAL     reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN           reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    PLUS            reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MINUS           reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    EQUAL           reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    NEQUAL          reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    AND             reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    SEMI            reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    OR              reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RPAREN          reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    COMMA           reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RBRACKET        reduce using rule 105 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)


state 210

    (107) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .

    TIMES           reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    DIVIDE          reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MODULO          reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN_EQUAL     reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN           reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN_EQUAL     reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN           reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    PLUS            reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MINUS           reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    EQUAL           reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    NEQUAL          reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    AND             reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    SEMI            reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    OR              reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RPAREN          reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    COMMA           reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RBRACKET        reduce using rule 107 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)


state 211

    (75) while -> WHILE LPAREN expr RPAREN instruction_block .

    RBRACE          reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    ID              reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    PRINT           reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    IF              reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    RETURN          reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    WHILE           reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)
    FROM            reduce using rule 75 (while -> WHILE LPAREN expr RPAREN instruction_block .)


state 212

    (76) for -> FROM LPAREN ID ASGMT CONST_INT . COLON CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM LPAREN ID ASGMT CONST_INT . COLON CONST_INT RPAREN instruction_block

    COLON           shift and go to state 217


state 213

    (11) single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 11 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 11 (single_function_definition -> FUNCTION type parsed_function_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 214

    (15) single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 15 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 15 (single_function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 215

    (51) assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN . SEMI

    SEMI            shift and go to state 218


state 216

    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block . ELSE parsed_else instruction_block
    (70) conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .

    ELSE            shift and go to state 219
    RBRACE          reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)
    ID              reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)
    PRINT           reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)
    IF              reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)
    RETURN          reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)
    WHILE           reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)
    FROM            reduce using rule 70 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block .)


state 217

    (76) for -> FROM LPAREN ID ASGMT CONST_INT COLON . CONST_INT COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON . CONST_INT RPAREN instruction_block

    CONST_INT       shift and go to state 220


state 218

    (51) assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)
    ID              reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)
    IF              reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)
    FROM            reduce using rule 51 (assignment -> variable_access ASGMT parsed_asgmt READ LPAREN RPAREN SEMI .)


state 219

    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE . parsed_else instruction_block
    (72) parsed_else -> .

    LBRACE          reduce using rule 72 (parsed_else -> .)

    parsed_else                    shift and go to state 221

state 220

    (76) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT . COLON CONST_INT RPAREN instruction_block
    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT . RPAREN instruction_block

    COLON           shift and go to state 222
    RPAREN          shift and go to state 223


state 221

    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 224

state 222

    (76) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON . CONST_INT RPAREN instruction_block

    CONST_INT       shift and go to state 225


state 223

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 226

state 224

    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .

    RBRACE          reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)
    ID              reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)
    PRINT           reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)
    IF              reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)
    RETURN          reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)
    WHILE           reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)
    FROM            reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expression instruction_block ELSE parsed_else instruction_block .)


state 225

    (76) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT . RPAREN instruction_block

    RPAREN          shift and go to state 227


state 226

    (77) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .

    RBRACE          reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    ID              reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    PRINT           reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    IF              reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    RETURN          reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    WHILE           reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)
    FROM            reduce using rule 77 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT RPAREN instruction_block .)


state 227

    (76) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN . instruction_block
    (40) instruction_block -> . LBRACE statements RBRACE
    (41) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 39

    instruction_block              shift and go to state 228

state 228

    (76) for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .

    RBRACE          reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    ID              reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    PRINT           reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    IF              reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    RETURN          reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    WHILE           reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)
    FROM            reduce using rule 76 (for -> FROM LPAREN ID ASGMT CONST_INT COLON CONST_INT COLON CONST_INT RPAREN instruction_block .)

