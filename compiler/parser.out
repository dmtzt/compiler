Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> init start
Rule 2     init -> <empty>
Rule 3     start -> global_variables_declaration functions_definition entry_point_definition
Rule 4     global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration
Rule 5     global_variables_declaration -> empty
Rule 6     parsed_global_scope -> <empty>
Rule 7     functions_definition -> functions_definition function_definition
Rule 8     functions_definition -> function_definition
Rule 9     function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 10    function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 11    function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
Rule 12    function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 13    function_definition -> empty
Rule 14    parsed_type_function_id -> <empty>
Rule 15    parsed_void_function_id -> <empty>
Rule 16    parsed_function_return_type -> <empty>
Rule 17    parsed_function_void_return_type -> <empty>
Rule 18    function_definition_params -> function_definition_params COMMA function_definition_param
Rule 19    function_definition_params -> function_definition_param
Rule 20    function_definition_param -> type ID
Rule 21    entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
Rule 22    parsed_main_id -> <empty>
Rule 23    local_variables_declaration -> LOCAL variables_declaration
Rule 24    local_variables_declaration -> empty
Rule 25    variables_declaration -> VARIABLES COLON distinct_type_variables_declaration
Rule 26    distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration
Rule 27    distinct_type_variables_declaration -> shared_type_variables_declaration
Rule 28    shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI
Rule 29    parsed_type -> <empty>
Rule 30    shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA variable_declaration
Rule 31    shared_type_variables_declaration_list -> variable_declaration
Rule 32    variable_declaration -> variable_id_declaration variable_dim_definition variable_dim_definition
Rule 33    variable_declaration -> variable_id_declaration variable_dim_definition
Rule 34    variable_declaration -> variable_id_declaration
Rule 35    variable_id_declaration -> ID
Rule 36    variable_dim_definition -> LBRACKET CONST_INT RBRACKET
Rule 37    instruction_block -> LBRACE statements RBRACE
Rule 38    instruction_block -> LBRACE RBRACE
Rule 39    statements -> statements single_statement
Rule 40    statements -> single_statement
Rule 41    single_statement -> assignment
Rule 42    single_statement -> function_call_stmt
Rule 43    single_statement -> print
Rule 44    single_statement -> conditional
Rule 45    single_statement -> loop
Rule 46    single_statement -> return
Rule 47    assignment -> assignment_no_semi SEMI
Rule 48    assignment_no_semi -> variable_access ASGMT expr
Rule 49    assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI
Rule 50    variable_access -> ID parsed_id_variable_access dims_access
Rule 51    parsed_id_variable_access -> <empty>
Rule 52    dims_access -> dims_access dim_access
Rule 53    dims_access -> dim_access
Rule 54    dims_access -> empty
Rule 55    dim_access -> LBRACKET expr RBRACKET
Rule 56    function_call_stmt -> function_call SEMI
Rule 57    function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN
Rule 58    function_call -> ID parsed_function_call_id LPAREN RPAREN
Rule 59    parsed_function_call_id -> <empty>
Rule 60    function_call_params -> function_call_params COMMA single_function_call_param
Rule 61    function_call_params -> single_function_call_param
Rule 62    single_function_call_param -> expr
Rule 63    print -> PRINT LPAREN print_params RPAREN SEMI
Rule 64    print -> PRINT LPAREN RPAREN SEMI
Rule 65    print_params -> print_params COMMA print_param
Rule 66    print_params -> print_param
Rule 67    print_param -> expr
Rule 68    conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
Rule 69    conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block
Rule 70    parsed_if_expr -> <empty>
Rule 71    parsed_else -> <empty>
Rule 72    loop -> while
Rule 73    loop -> for
Rule 74    while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
Rule 75    parsed_while -> <empty>
Rule 76    parsed_while_expr -> <empty>
Rule 77    for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block
Rule 78    for_initialization -> assignment_no_semi
Rule 79    for_condition -> expr
Rule 80    for_update -> assignment_no_semi
Rule 81    return -> RETURN expr SEMI
Rule 82    return -> RETURN SEMI
Rule 83    expr -> expr OR and_expr
Rule 84    expr -> and_expr
Rule 85    and_expr -> equality_expr AND equality_expr
Rule 86    and_expr -> equality_expr
Rule 87    equality_expr -> relational_expr EQUAL parsed_equal relational_expr
Rule 88    parsed_equal -> <empty>
Rule 89    equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr
Rule 90    parsed_nequal -> <empty>
Rule 91    equality_expr -> relational_expr
Rule 92    relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
Rule 93    parsed_lthan_equal -> <empty>
Rule 94    relational_expr -> additive_expr LTHAN parsed_lthan additive_expr
Rule 95    parsed_lthan -> <empty>
Rule 96    relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
Rule 97    parsed_gthan_equal -> <empty>
Rule 98    relational_expr -> additive_expr GTHAN parsed_gthan additive_expr
Rule 99    parsed_gthan -> <empty>
Rule 100   relational_expr -> additive_expr
Rule 101   additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr
Rule 102   parsed_plus -> <empty>
Rule 103   additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr
Rule 104   parsed_minus -> <empty>
Rule 105   additive_expr -> multiplicative_expr
Rule 106   multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr
Rule 107   parsed_times -> <empty>
Rule 108   multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr
Rule 109   parsed_divide -> <empty>
Rule 110   multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr
Rule 111   parsed_modulo -> <empty>
Rule 112   multiplicative_expr -> unary_expr
Rule 113   unary_expr -> MINUS postfix_expr
Rule 114   unary_expr -> PLUS postfix_expr
Rule 115   unary_expr -> NOT postfix_expr
Rule 116   unary_expr -> postfix_expr
Rule 117   postfix_expr -> LPAREN expr RPAREN
Rule 118   postfix_expr -> variable_access
Rule 119   postfix_expr -> function_call
Rule 120   postfix_expr -> constant
Rule 121   constant -> CONST_INT
Rule 122   constant -> CONST_REAL
Rule 123   constant -> CONST_CHAR
Rule 124   constant -> CONST_STRING
Rule 125   constant -> constant_bool
Rule 126   constant_bool -> TRUE
Rule 127   constant_bool -> FALSE
Rule 128   type -> INT
Rule 129   type -> REAL
Rule 130   type -> CHAR
Rule 131   type -> BOOL
Rule 132   empty -> <empty>

Terminals, with rules where they appear

AND                  : 85
ASGMT                : 48 49
BOOL                 : 131
CHAR                 : 130
COLON                : 25
COMMA                : 18 30 60 65
CONST_CHAR           : 123
CONST_INT            : 36 121
CONST_REAL           : 122
CONST_STRING         : 124
DIVIDE               : 108
ELSE                 : 68
EQUAL                : 87
FALSE                : 127
FROM                 : 77
FUNCTION             : 9 10 11 12
GLOBAL               : 4
GTHAN                : 98
GTHAN_EQUAL          : 96
ID                   : 9 10 11 12 20 35 50 57 58
IF                   : 68 69
INT                  : 128
LBRACE               : 37 38
LBRACKET             : 36 55
LOCAL                : 23
LPAREN               : 9 10 11 12 21 49 57 58 63 64 68 69 74 77 117
LTHAN                : 94
LTHAN_EQUAL          : 92
MINUS                : 103 113
MODULO               : 110
NEQUAL               : 89
NOT                  : 115
OR                   : 83
PLUS                 : 101 114
PRINT                : 63 64
RBRACE               : 37 38
RBRACKET             : 36 55
READ                 : 49
REAL                 : 129
RETURN               : 81 82
RPAREN               : 9 10 11 12 21 49 57 58 63 64 68 69 74 77 117
SEMI                 : 28 47 49 56 63 64 77 77 81 82
START                : 21
TIMES                : 106
TRUE                 : 126
VARIABLES            : 25
VOID                 : 11 12
WHILE                : 74
error                : 

Nonterminals, with rules where they appear

additive_expr        : 92 92 94 94 96 96 98 98 100 101 103
and_expr             : 83 84
assignment           : 41
assignment_no_semi   : 47 78 80
conditional          : 44
constant             : 120
constant_bool        : 125
dim_access           : 52 53
dims_access          : 50 52
distinct_type_variables_declaration : 25 26
empty                : 5 13 24 54
entry_point_definition : 3
equality_expr        : 85 85 86
expr                 : 48 55 62 67 68 69 74 79 81 83 117
for                  : 73
for_condition        : 77
for_initialization   : 77
for_update           : 77
function_call        : 56 119
function_call_params : 57 60
function_call_stmt   : 42
function_definition  : 7 8
function_definition_param : 18 19
function_definition_params : 9 11 18
functions_definition : 3 7
global_variables_declaration : 3
init                 : 1
instruction_block    : 9 10 11 12 21 68 68 69 74 77
local_variables_declaration : 9 10 11 12 21
loop                 : 45
multiplicative_expr  : 101 103 105 106 108 110
parsed_divide        : 108
parsed_else          : 68
parsed_equal         : 87
parsed_function_call_id : 57 58
parsed_function_return_type : 9 10
parsed_function_void_return_type : 11 12
parsed_global_scope  : 4
parsed_gthan         : 98
parsed_gthan_equal   : 96
parsed_id_variable_access : 50
parsed_if_expr       : 68 69
parsed_lthan         : 94
parsed_lthan_equal   : 92
parsed_main_id       : 21
parsed_minus         : 103
parsed_modulo        : 110
parsed_nequal        : 89
parsed_plus          : 101
parsed_times         : 106
parsed_type          : 28
parsed_type_function_id : 9 10
parsed_void_function_id : 11 12
parsed_while         : 74
parsed_while_expr    : 74
postfix_expr         : 113 114 115 116
print                : 43
print_param          : 65 66
print_params         : 63 65
program              : 0
relational_expr      : 87 87 89 89 91
return               : 46
shared_type_variables_declaration : 26 27
shared_type_variables_declaration_list : 28 30
single_function_call_param : 60 61
single_statement     : 39 40
start                : 1
statements           : 37 39
type                 : 9 10 20 28
unary_expr           : 106 108 110 112
variable_access      : 48 49 118
variable_declaration : 30 31
variable_dim_definition : 32 32 33
variable_id_declaration : 32 33 34
variables_declaration : 4 23
while                : 72

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . init start
    (2) init -> .

    GLOBAL          reduce using rule 2 (init -> .)
    FUNCTION        reduce using rule 2 (init -> .)
    START           reduce using rule 2 (init -> .)

    program                        shift and go to state 1
    init                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> init . start
    (3) start -> . global_variables_declaration functions_definition entry_point_definition
    (4) global_variables_declaration -> . GLOBAL parsed_global_scope variables_declaration
    (5) global_variables_declaration -> . empty
    (132) empty -> .

    GLOBAL          shift and go to state 5
    FUNCTION        reduce using rule 132 (empty -> .)
    START           reduce using rule 132 (empty -> .)

    start                          shift and go to state 3
    global_variables_declaration   shift and go to state 4
    empty                          shift and go to state 6

state 3

    (1) program -> init start .

    $end            reduce using rule 1 (program -> init start .)


state 4

    (3) start -> global_variables_declaration . functions_definition entry_point_definition
    (7) functions_definition -> . functions_definition function_definition
    (8) functions_definition -> . function_definition
    (9) function_definition -> . FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> . FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (11) function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (13) function_definition -> . empty
    (132) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 9
    START           reduce using rule 132 (empty -> .)

  ! FUNCTION        [ reduce using rule 132 (empty -> .) ]

    functions_definition           shift and go to state 7
    function_definition            shift and go to state 8
    empty                          shift and go to state 10

state 5

    (4) global_variables_declaration -> GLOBAL . parsed_global_scope variables_declaration
    (6) parsed_global_scope -> .

    VARIABLES       reduce using rule 6 (parsed_global_scope -> .)

    parsed_global_scope            shift and go to state 11

state 6

    (5) global_variables_declaration -> empty .

    FUNCTION        reduce using rule 5 (global_variables_declaration -> empty .)
    START           reduce using rule 5 (global_variables_declaration -> empty .)


state 7

    (3) start -> global_variables_declaration functions_definition . entry_point_definition
    (7) functions_definition -> functions_definition . function_definition
    (21) entry_point_definition -> . START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (9) function_definition -> . FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> . FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (11) function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> . FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (13) function_definition -> . empty
    (132) empty -> .

  ! shift/reduce conflict for START resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
    START           shift and go to state 14
    FUNCTION        shift and go to state 9

  ! START           [ reduce using rule 132 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 132 (empty -> .) ]

    entry_point_definition         shift and go to state 12
    function_definition            shift and go to state 13
    empty                          shift and go to state 10

state 8

    (8) functions_definition -> function_definition .

    START           reduce using rule 8 (functions_definition -> function_definition .)
    FUNCTION        reduce using rule 8 (functions_definition -> function_definition .)


state 9

    (9) function_definition -> FUNCTION . type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> FUNCTION . type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (11) function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> FUNCTION . VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (128) type -> . INT
    (129) type -> . REAL
    (130) type -> . CHAR
    (131) type -> . BOOL

    VOID            shift and go to state 16
    INT             shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 15

state 10

    (13) function_definition -> empty .

    START           reduce using rule 13 (function_definition -> empty .)
    FUNCTION        reduce using rule 13 (function_definition -> empty .)


state 11

    (4) global_variables_declaration -> GLOBAL parsed_global_scope . variables_declaration
    (25) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 22

    variables_declaration          shift and go to state 21

state 12

    (3) start -> global_variables_declaration functions_definition entry_point_definition .

    $end            reduce using rule 3 (start -> global_variables_declaration functions_definition entry_point_definition .)


state 13

    (7) functions_definition -> functions_definition function_definition .

    START           reduce using rule 7 (functions_definition -> functions_definition function_definition .)
    FUNCTION        reduce using rule 7 (functions_definition -> functions_definition function_definition .)


state 14

    (21) entry_point_definition -> START . parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block
    (22) parsed_main_id -> .

    LPAREN          reduce using rule 22 (parsed_main_id -> .)

    parsed_main_id                 shift and go to state 23

state 15

    (9) function_definition -> FUNCTION type . parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> FUNCTION type . parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (16) parsed_function_return_type -> .

    ID              reduce using rule 16 (parsed_function_return_type -> .)

    parsed_function_return_type    shift and go to state 24

state 16

    (11) function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> FUNCTION VOID . parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (17) parsed_function_void_return_type -> .

    ID              reduce using rule 17 (parsed_function_void_return_type -> .)

    parsed_function_void_return_type shift and go to state 25

state 17

    (128) type -> INT .

    ID              reduce using rule 128 (type -> INT .)


state 18

    (129) type -> REAL .

    ID              reduce using rule 129 (type -> REAL .)


state 19

    (130) type -> CHAR .

    ID              reduce using rule 130 (type -> CHAR .)


state 20

    (131) type -> BOOL .

    ID              reduce using rule 131 (type -> BOOL .)


state 21

    (4) global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .

    FUNCTION        reduce using rule 4 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)
    START           reduce using rule 4 (global_variables_declaration -> GLOBAL parsed_global_scope variables_declaration .)


state 22

    (25) variables_declaration -> VARIABLES . COLON distinct_type_variables_declaration

    COLON           shift and go to state 26


state 23

    (21) entry_point_definition -> START parsed_main_id . LPAREN RPAREN local_variables_declaration instruction_block

    LPAREN          shift and go to state 27


state 24

    (9) function_definition -> FUNCTION type parsed_function_return_type . ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> FUNCTION type parsed_function_return_type . ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block

    ID              shift and go to state 28


state 25

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type . ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block

    ID              shift and go to state 29


state 26

    (25) variables_declaration -> VARIABLES COLON . distinct_type_variables_declaration
    (26) distinct_type_variables_declaration -> . distinct_type_variables_declaration shared_type_variables_declaration
    (27) distinct_type_variables_declaration -> . shared_type_variables_declaration
    (28) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (128) type -> . INT
    (129) type -> . REAL
    (130) type -> . CHAR
    (131) type -> . BOOL

    INT             shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    distinct_type_variables_declaration shift and go to state 30
    shared_type_variables_declaration shift and go to state 31
    type                           shift and go to state 32

state 27

    (21) entry_point_definition -> START parsed_main_id LPAREN . RPAREN local_variables_declaration instruction_block

    RPAREN          shift and go to state 33


state 28

    (9) function_definition -> FUNCTION type parsed_function_return_type ID . parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> FUNCTION type parsed_function_return_type ID . parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (14) parsed_type_function_id -> .

    LPAREN          reduce using rule 14 (parsed_type_function_id -> .)

    parsed_type_function_id        shift and go to state 34

state 29

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type ID . parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block
    (15) parsed_void_function_id -> .

    LPAREN          reduce using rule 15 (parsed_void_function_id -> .)

    parsed_void_function_id        shift and go to state 35

state 30

    (25) variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .
    (26) distinct_type_variables_declaration -> distinct_type_variables_declaration . shared_type_variables_declaration
    (28) shared_type_variables_declaration -> . type parsed_type shared_type_variables_declaration_list SEMI
    (128) type -> . INT
    (129) type -> . REAL
    (130) type -> . CHAR
    (131) type -> . BOOL

    FUNCTION        reduce using rule 25 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    START           reduce using rule 25 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    LBRACE          reduce using rule 25 (variables_declaration -> VARIABLES COLON distinct_type_variables_declaration .)
    INT             shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    shared_type_variables_declaration shift and go to state 36
    type                           shift and go to state 32

state 31

    (27) distinct_type_variables_declaration -> shared_type_variables_declaration .

    INT             reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    REAL            reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    CHAR            reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    BOOL            reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    FUNCTION        reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    START           reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)
    LBRACE          reduce using rule 27 (distinct_type_variables_declaration -> shared_type_variables_declaration .)


state 32

    (28) shared_type_variables_declaration -> type . parsed_type shared_type_variables_declaration_list SEMI
    (29) parsed_type -> .

    ID              reduce using rule 29 (parsed_type -> .)

    parsed_type                    shift and go to state 37

state 33

    (21) entry_point_definition -> START parsed_main_id LPAREN RPAREN . local_variables_declaration instruction_block
    (23) local_variables_declaration -> . LOCAL variables_declaration
    (24) local_variables_declaration -> . empty
    (132) empty -> .

    LOCAL           shift and go to state 39
    LBRACE          reduce using rule 132 (empty -> .)

    local_variables_declaration    shift and go to state 38
    empty                          shift and go to state 40

state 34

    (9) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id . LPAREN RPAREN local_variables_declaration instruction_block

    LPAREN          shift and go to state 41


state 35

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id . LPAREN function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id . LPAREN RPAREN local_variables_declaration instruction_block

    LPAREN          shift and go to state 42


state 36

    (26) distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .

    INT             reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    REAL            reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    CHAR            reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    BOOL            reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    FUNCTION        reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    START           reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)
    LBRACE          reduce using rule 26 (distinct_type_variables_declaration -> distinct_type_variables_declaration shared_type_variables_declaration .)


state 37

    (28) shared_type_variables_declaration -> type parsed_type . shared_type_variables_declaration_list SEMI
    (30) shared_type_variables_declaration_list -> . shared_type_variables_declaration_list COMMA variable_declaration
    (31) shared_type_variables_declaration_list -> . variable_declaration
    (32) variable_declaration -> . variable_id_declaration variable_dim_definition variable_dim_definition
    (33) variable_declaration -> . variable_id_declaration variable_dim_definition
    (34) variable_declaration -> . variable_id_declaration
    (35) variable_id_declaration -> . ID

    ID              shift and go to state 46

    shared_type_variables_declaration_list shift and go to state 43
    variable_declaration           shift and go to state 44
    variable_id_declaration        shift and go to state 45

state 38

    (21) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 47

state 39

    (23) local_variables_declaration -> LOCAL . variables_declaration
    (25) variables_declaration -> . VARIABLES COLON distinct_type_variables_declaration

    VARIABLES       shift and go to state 22

    variables_declaration          shift and go to state 49

state 40

    (24) local_variables_declaration -> empty .

    LBRACE          reduce using rule 24 (local_variables_declaration -> empty .)


state 41

    (9) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (10) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (18) function_definition_params -> . function_definition_params COMMA function_definition_param
    (19) function_definition_params -> . function_definition_param
    (20) function_definition_param -> . type ID
    (128) type -> . INT
    (129) type -> . REAL
    (130) type -> . CHAR
    (131) type -> . BOOL

    RPAREN          shift and go to state 52
    INT             shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 50
    function_definition_params     shift and go to state 51
    function_definition_param      shift and go to state 53

state 42

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN . function_definition_params RPAREN local_variables_declaration instruction_block
    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN . RPAREN local_variables_declaration instruction_block
    (18) function_definition_params -> . function_definition_params COMMA function_definition_param
    (19) function_definition_params -> . function_definition_param
    (20) function_definition_param -> . type ID
    (128) type -> . INT
    (129) type -> . REAL
    (130) type -> . CHAR
    (131) type -> . BOOL

    RPAREN          shift and go to state 55
    INT             shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    function_definition_params     shift and go to state 54
    function_definition_param      shift and go to state 53
    type                           shift and go to state 50

state 43

    (28) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list . SEMI
    (30) shared_type_variables_declaration_list -> shared_type_variables_declaration_list . COMMA variable_declaration

    SEMI            shift and go to state 56
    COMMA           shift and go to state 57


state 44

    (31) shared_type_variables_declaration_list -> variable_declaration .

    SEMI            reduce using rule 31 (shared_type_variables_declaration_list -> variable_declaration .)
    COMMA           reduce using rule 31 (shared_type_variables_declaration_list -> variable_declaration .)


state 45

    (32) variable_declaration -> variable_id_declaration . variable_dim_definition variable_dim_definition
    (33) variable_declaration -> variable_id_declaration . variable_dim_definition
    (34) variable_declaration -> variable_id_declaration .
    (36) variable_dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 34 (variable_declaration -> variable_id_declaration .)
    COMMA           reduce using rule 34 (variable_declaration -> variable_id_declaration .)
    LBRACKET        shift and go to state 59

    variable_dim_definition        shift and go to state 58

state 46

    (35) variable_id_declaration -> ID .

    LBRACKET        reduce using rule 35 (variable_id_declaration -> ID .)
    SEMI            reduce using rule 35 (variable_id_declaration -> ID .)
    COMMA           reduce using rule 35 (variable_id_declaration -> ID .)


state 47

    (21) entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .

    $end            reduce using rule 21 (entry_point_definition -> START parsed_main_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 48

    (37) instruction_block -> LBRACE . statements RBRACE
    (38) instruction_block -> LBRACE . RBRACE
    (39) statements -> . statements single_statement
    (40) statements -> . single_statement
    (41) single_statement -> . assignment
    (42) single_statement -> . function_call_stmt
    (43) single_statement -> . print
    (44) single_statement -> . conditional
    (45) single_statement -> . loop
    (46) single_statement -> . return
    (47) assignment -> . assignment_no_semi SEMI
    (49) assignment -> . variable_access ASGMT READ LPAREN RPAREN SEMI
    (56) function_call_stmt -> . function_call SEMI
    (63) print -> . PRINT LPAREN print_params RPAREN SEMI
    (64) print -> . PRINT LPAREN RPAREN SEMI
    (68) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block
    (72) loop -> . while
    (73) loop -> . for
    (81) return -> . RETURN expr SEMI
    (82) return -> . RETURN SEMI
    (48) assignment_no_semi -> . variable_access ASGMT expr
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (74) while -> . WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
    (77) for -> . FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block

    RBRACE          shift and go to state 61
    PRINT           shift and go to state 72
    IF              shift and go to state 73
    RETURN          shift and go to state 76
    ID              shift and go to state 77
    WHILE           shift and go to state 78
    FROM            shift and go to state 79

    statements                     shift and go to state 60
    single_statement               shift and go to state 62
    assignment                     shift and go to state 63
    function_call_stmt             shift and go to state 64
    print                          shift and go to state 65
    conditional                    shift and go to state 66
    loop                           shift and go to state 67
    return                         shift and go to state 68
    assignment_no_semi             shift and go to state 69
    variable_access                shift and go to state 70
    function_call                  shift and go to state 71
    while                          shift and go to state 74
    for                            shift and go to state 75

state 49

    (23) local_variables_declaration -> LOCAL variables_declaration .

    LBRACE          reduce using rule 23 (local_variables_declaration -> LOCAL variables_declaration .)


state 50

    (20) function_definition_param -> type . ID

    ID              shift and go to state 80


state 51

    (9) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (18) function_definition_params -> function_definition_params . COMMA function_definition_param

    RPAREN          shift and go to state 81
    COMMA           shift and go to state 82


state 52

    (10) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (23) local_variables_declaration -> . LOCAL variables_declaration
    (24) local_variables_declaration -> . empty
    (132) empty -> .

    LOCAL           shift and go to state 39
    LBRACE          reduce using rule 132 (empty -> .)

    local_variables_declaration    shift and go to state 83
    empty                          shift and go to state 40

state 53

    (19) function_definition_params -> function_definition_param .

    RPAREN          reduce using rule 19 (function_definition_params -> function_definition_param .)
    COMMA           reduce using rule 19 (function_definition_params -> function_definition_param .)


state 54

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params . RPAREN local_variables_declaration instruction_block
    (18) function_definition_params -> function_definition_params . COMMA function_definition_param

    RPAREN          shift and go to state 84
    COMMA           shift and go to state 82


state 55

    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN . local_variables_declaration instruction_block
    (23) local_variables_declaration -> . LOCAL variables_declaration
    (24) local_variables_declaration -> . empty
    (132) empty -> .

    LOCAL           shift and go to state 39
    LBRACE          reduce using rule 132 (empty -> .)

    local_variables_declaration    shift and go to state 85
    empty                          shift and go to state 40

state 56

    (28) shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .

    INT             reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    REAL            reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    CHAR            reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    BOOL            reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    FUNCTION        reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    START           reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)
    LBRACE          reduce using rule 28 (shared_type_variables_declaration -> type parsed_type shared_type_variables_declaration_list SEMI .)


state 57

    (30) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA . variable_declaration
    (32) variable_declaration -> . variable_id_declaration variable_dim_definition variable_dim_definition
    (33) variable_declaration -> . variable_id_declaration variable_dim_definition
    (34) variable_declaration -> . variable_id_declaration
    (35) variable_id_declaration -> . ID

    ID              shift and go to state 46

    variable_declaration           shift and go to state 86
    variable_id_declaration        shift and go to state 45

state 58

    (32) variable_declaration -> variable_id_declaration variable_dim_definition . variable_dim_definition
    (33) variable_declaration -> variable_id_declaration variable_dim_definition .
    (36) variable_dim_definition -> . LBRACKET CONST_INT RBRACKET

    SEMI            reduce using rule 33 (variable_declaration -> variable_id_declaration variable_dim_definition .)
    COMMA           reduce using rule 33 (variable_declaration -> variable_id_declaration variable_dim_definition .)
    LBRACKET        shift and go to state 59

    variable_dim_definition        shift and go to state 87

state 59

    (36) variable_dim_definition -> LBRACKET . CONST_INT RBRACKET

    CONST_INT       shift and go to state 88


state 60

    (37) instruction_block -> LBRACE statements . RBRACE
    (39) statements -> statements . single_statement
    (41) single_statement -> . assignment
    (42) single_statement -> . function_call_stmt
    (43) single_statement -> . print
    (44) single_statement -> . conditional
    (45) single_statement -> . loop
    (46) single_statement -> . return
    (47) assignment -> . assignment_no_semi SEMI
    (49) assignment -> . variable_access ASGMT READ LPAREN RPAREN SEMI
    (56) function_call_stmt -> . function_call SEMI
    (63) print -> . PRINT LPAREN print_params RPAREN SEMI
    (64) print -> . PRINT LPAREN RPAREN SEMI
    (68) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> . IF LPAREN expr RPAREN parsed_if_expr instruction_block
    (72) loop -> . while
    (73) loop -> . for
    (81) return -> . RETURN expr SEMI
    (82) return -> . RETURN SEMI
    (48) assignment_no_semi -> . variable_access ASGMT expr
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (74) while -> . WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
    (77) for -> . FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block

    RBRACE          shift and go to state 89
    PRINT           shift and go to state 72
    IF              shift and go to state 73
    RETURN          shift and go to state 76
    ID              shift and go to state 77
    WHILE           shift and go to state 78
    FROM            shift and go to state 79

    single_statement               shift and go to state 90
    assignment                     shift and go to state 63
    function_call_stmt             shift and go to state 64
    print                          shift and go to state 65
    conditional                    shift and go to state 66
    loop                           shift and go to state 67
    return                         shift and go to state 68
    assignment_no_semi             shift and go to state 69
    variable_access                shift and go to state 70
    function_call                  shift and go to state 71
    while                          shift and go to state 74
    for                            shift and go to state 75

state 61

    (38) instruction_block -> LBRACE RBRACE .

    $end            reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    START           reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    ELSE            reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    PRINT           reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    IF              reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    RETURN          reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    ID              reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    WHILE           reduce using rule 38 (instruction_block -> LBRACE RBRACE .)
    FROM            reduce using rule 38 (instruction_block -> LBRACE RBRACE .)


state 62

    (40) statements -> single_statement .

    RBRACE          reduce using rule 40 (statements -> single_statement .)
    PRINT           reduce using rule 40 (statements -> single_statement .)
    IF              reduce using rule 40 (statements -> single_statement .)
    RETURN          reduce using rule 40 (statements -> single_statement .)
    ID              reduce using rule 40 (statements -> single_statement .)
    WHILE           reduce using rule 40 (statements -> single_statement .)
    FROM            reduce using rule 40 (statements -> single_statement .)


state 63

    (41) single_statement -> assignment .

    RBRACE          reduce using rule 41 (single_statement -> assignment .)
    PRINT           reduce using rule 41 (single_statement -> assignment .)
    IF              reduce using rule 41 (single_statement -> assignment .)
    RETURN          reduce using rule 41 (single_statement -> assignment .)
    ID              reduce using rule 41 (single_statement -> assignment .)
    WHILE           reduce using rule 41 (single_statement -> assignment .)
    FROM            reduce using rule 41 (single_statement -> assignment .)


state 64

    (42) single_statement -> function_call_stmt .

    RBRACE          reduce using rule 42 (single_statement -> function_call_stmt .)
    PRINT           reduce using rule 42 (single_statement -> function_call_stmt .)
    IF              reduce using rule 42 (single_statement -> function_call_stmt .)
    RETURN          reduce using rule 42 (single_statement -> function_call_stmt .)
    ID              reduce using rule 42 (single_statement -> function_call_stmt .)
    WHILE           reduce using rule 42 (single_statement -> function_call_stmt .)
    FROM            reduce using rule 42 (single_statement -> function_call_stmt .)


state 65

    (43) single_statement -> print .

    RBRACE          reduce using rule 43 (single_statement -> print .)
    PRINT           reduce using rule 43 (single_statement -> print .)
    IF              reduce using rule 43 (single_statement -> print .)
    RETURN          reduce using rule 43 (single_statement -> print .)
    ID              reduce using rule 43 (single_statement -> print .)
    WHILE           reduce using rule 43 (single_statement -> print .)
    FROM            reduce using rule 43 (single_statement -> print .)


state 66

    (44) single_statement -> conditional .

    RBRACE          reduce using rule 44 (single_statement -> conditional .)
    PRINT           reduce using rule 44 (single_statement -> conditional .)
    IF              reduce using rule 44 (single_statement -> conditional .)
    RETURN          reduce using rule 44 (single_statement -> conditional .)
    ID              reduce using rule 44 (single_statement -> conditional .)
    WHILE           reduce using rule 44 (single_statement -> conditional .)
    FROM            reduce using rule 44 (single_statement -> conditional .)


state 67

    (45) single_statement -> loop .

    RBRACE          reduce using rule 45 (single_statement -> loop .)
    PRINT           reduce using rule 45 (single_statement -> loop .)
    IF              reduce using rule 45 (single_statement -> loop .)
    RETURN          reduce using rule 45 (single_statement -> loop .)
    ID              reduce using rule 45 (single_statement -> loop .)
    WHILE           reduce using rule 45 (single_statement -> loop .)
    FROM            reduce using rule 45 (single_statement -> loop .)


state 68

    (46) single_statement -> return .

    RBRACE          reduce using rule 46 (single_statement -> return .)
    PRINT           reduce using rule 46 (single_statement -> return .)
    IF              reduce using rule 46 (single_statement -> return .)
    RETURN          reduce using rule 46 (single_statement -> return .)
    ID              reduce using rule 46 (single_statement -> return .)
    WHILE           reduce using rule 46 (single_statement -> return .)
    FROM            reduce using rule 46 (single_statement -> return .)


state 69

    (47) assignment -> assignment_no_semi . SEMI

    SEMI            shift and go to state 91


state 70

    (49) assignment -> variable_access . ASGMT READ LPAREN RPAREN SEMI
    (48) assignment_no_semi -> variable_access . ASGMT expr

    ASGMT           shift and go to state 92


state 71

    (56) function_call_stmt -> function_call . SEMI

    SEMI            shift and go to state 93


state 72

    (63) print -> PRINT . LPAREN print_params RPAREN SEMI
    (64) print -> PRINT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 94


state 73

    (68) conditional -> IF . LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF . LPAREN expr RPAREN parsed_if_expr instruction_block

    LPAREN          shift and go to state 95


state 74

    (72) loop -> while .

    RBRACE          reduce using rule 72 (loop -> while .)
    PRINT           reduce using rule 72 (loop -> while .)
    IF              reduce using rule 72 (loop -> while .)
    RETURN          reduce using rule 72 (loop -> while .)
    ID              reduce using rule 72 (loop -> while .)
    WHILE           reduce using rule 72 (loop -> while .)
    FROM            reduce using rule 72 (loop -> while .)


state 75

    (73) loop -> for .

    RBRACE          reduce using rule 73 (loop -> for .)
    PRINT           reduce using rule 73 (loop -> for .)
    IF              reduce using rule 73 (loop -> for .)
    RETURN          reduce using rule 73 (loop -> for .)
    ID              reduce using rule 73 (loop -> for .)
    WHILE           reduce using rule 73 (loop -> for .)
    FROM            reduce using rule 73 (loop -> for .)


state 76

    (81) return -> RETURN . expr SEMI
    (82) return -> RETURN . SEMI
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    SEMI            shift and go to state 97
    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    expr                           shift and go to state 96
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 77

    (50) variable_access -> ID . parsed_id_variable_access dims_access
    (57) function_call -> ID . parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> ID . parsed_function_call_id LPAREN RPAREN
    (51) parsed_id_variable_access -> .
    (59) parsed_function_call_id -> .

    LBRACKET        reduce using rule 51 (parsed_id_variable_access -> .)
    ASGMT           reduce using rule 51 (parsed_id_variable_access -> .)
    TIMES           reduce using rule 51 (parsed_id_variable_access -> .)
    DIVIDE          reduce using rule 51 (parsed_id_variable_access -> .)
    MODULO          reduce using rule 51 (parsed_id_variable_access -> .)
    LTHAN_EQUAL     reduce using rule 51 (parsed_id_variable_access -> .)
    LTHAN           reduce using rule 51 (parsed_id_variable_access -> .)
    GTHAN_EQUAL     reduce using rule 51 (parsed_id_variable_access -> .)
    GTHAN           reduce using rule 51 (parsed_id_variable_access -> .)
    PLUS            reduce using rule 51 (parsed_id_variable_access -> .)
    MINUS           reduce using rule 51 (parsed_id_variable_access -> .)
    EQUAL           reduce using rule 51 (parsed_id_variable_access -> .)
    NEQUAL          reduce using rule 51 (parsed_id_variable_access -> .)
    AND             reduce using rule 51 (parsed_id_variable_access -> .)
    SEMI            reduce using rule 51 (parsed_id_variable_access -> .)
    OR              reduce using rule 51 (parsed_id_variable_access -> .)
    RPAREN          reduce using rule 51 (parsed_id_variable_access -> .)
    COMMA           reduce using rule 51 (parsed_id_variable_access -> .)
    RBRACKET        reduce using rule 51 (parsed_id_variable_access -> .)
    LPAREN          reduce using rule 59 (parsed_function_call_id -> .)

    parsed_id_variable_access      shift and go to state 119
    parsed_function_call_id        shift and go to state 120

state 78

    (74) while -> WHILE . parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block
    (75) parsed_while -> .

    LPAREN          reduce using rule 75 (parsed_while -> .)

    parsed_while                   shift and go to state 121

state 79

    (77) for -> FROM . LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block

    LPAREN          shift and go to state 122


state 80

    (20) function_definition_param -> type ID .

    RPAREN          reduce using rule 20 (function_definition_param -> type ID .)
    COMMA           reduce using rule 20 (function_definition_param -> type ID .)


state 81

    (9) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (23) local_variables_declaration -> . LOCAL variables_declaration
    (24) local_variables_declaration -> . empty
    (132) empty -> .

    LOCAL           shift and go to state 39
    LBRACE          reduce using rule 132 (empty -> .)

    local_variables_declaration    shift and go to state 123
    empty                          shift and go to state 40

state 82

    (18) function_definition_params -> function_definition_params COMMA . function_definition_param
    (20) function_definition_param -> . type ID
    (128) type -> . INT
    (129) type -> . REAL
    (130) type -> . CHAR
    (131) type -> . BOOL

    INT             shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    function_definition_param      shift and go to state 124
    type                           shift and go to state 50

state 83

    (10) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 125

state 84

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN . local_variables_declaration instruction_block
    (23) local_variables_declaration -> . LOCAL variables_declaration
    (24) local_variables_declaration -> . empty
    (132) empty -> .

    LOCAL           shift and go to state 39
    LBRACE          reduce using rule 132 (empty -> .)

    local_variables_declaration    shift and go to state 126
    empty                          shift and go to state 40

state 85

    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 127

state 86

    (30) shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA variable_declaration .

    SEMI            reduce using rule 30 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA variable_declaration .)
    COMMA           reduce using rule 30 (shared_type_variables_declaration_list -> shared_type_variables_declaration_list COMMA variable_declaration .)


state 87

    (32) variable_declaration -> variable_id_declaration variable_dim_definition variable_dim_definition .

    SEMI            reduce using rule 32 (variable_declaration -> variable_id_declaration variable_dim_definition variable_dim_definition .)
    COMMA           reduce using rule 32 (variable_declaration -> variable_id_declaration variable_dim_definition variable_dim_definition .)


state 88

    (36) variable_dim_definition -> LBRACKET CONST_INT . RBRACKET

    RBRACKET        shift and go to state 128


state 89

    (37) instruction_block -> LBRACE statements RBRACE .

    $end            reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    START           reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    IF              reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    ID              reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)
    FROM            reduce using rule 37 (instruction_block -> LBRACE statements RBRACE .)


state 90

    (39) statements -> statements single_statement .

    RBRACE          reduce using rule 39 (statements -> statements single_statement .)
    PRINT           reduce using rule 39 (statements -> statements single_statement .)
    IF              reduce using rule 39 (statements -> statements single_statement .)
    RETURN          reduce using rule 39 (statements -> statements single_statement .)
    ID              reduce using rule 39 (statements -> statements single_statement .)
    WHILE           reduce using rule 39 (statements -> statements single_statement .)
    FROM            reduce using rule 39 (statements -> statements single_statement .)


state 91

    (47) assignment -> assignment_no_semi SEMI .

    RBRACE          reduce using rule 47 (assignment -> assignment_no_semi SEMI .)
    PRINT           reduce using rule 47 (assignment -> assignment_no_semi SEMI .)
    IF              reduce using rule 47 (assignment -> assignment_no_semi SEMI .)
    RETURN          reduce using rule 47 (assignment -> assignment_no_semi SEMI .)
    ID              reduce using rule 47 (assignment -> assignment_no_semi SEMI .)
    WHILE           reduce using rule 47 (assignment -> assignment_no_semi SEMI .)
    FROM            reduce using rule 47 (assignment -> assignment_no_semi SEMI .)


state 92

    (49) assignment -> variable_access ASGMT . READ LPAREN RPAREN SEMI
    (48) assignment_no_semi -> variable_access ASGMT . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    READ            shift and go to state 129
    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    variable_access                shift and go to state 109
    expr                           shift and go to state 130
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 93

    (56) function_call_stmt -> function_call SEMI .

    RBRACE          reduce using rule 56 (function_call_stmt -> function_call SEMI .)
    PRINT           reduce using rule 56 (function_call_stmt -> function_call SEMI .)
    IF              reduce using rule 56 (function_call_stmt -> function_call SEMI .)
    RETURN          reduce using rule 56 (function_call_stmt -> function_call SEMI .)
    ID              reduce using rule 56 (function_call_stmt -> function_call SEMI .)
    WHILE           reduce using rule 56 (function_call_stmt -> function_call SEMI .)
    FROM            reduce using rule 56 (function_call_stmt -> function_call SEMI .)


state 94

    (63) print -> PRINT LPAREN . print_params RPAREN SEMI
    (64) print -> PRINT LPAREN . RPAREN SEMI
    (65) print_params -> . print_params COMMA print_param
    (66) print_params -> . print_param
    (67) print_param -> . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    RPAREN          shift and go to state 132
    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    print_params                   shift and go to state 131
    print_param                    shift and go to state 133
    expr                           shift and go to state 134
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 95

    (68) conditional -> IF LPAREN . expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN . expr RPAREN parsed_if_expr instruction_block
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    expr                           shift and go to state 135
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 96

    (81) return -> RETURN expr . SEMI
    (83) expr -> expr . OR and_expr

    SEMI            shift and go to state 136
    OR              shift and go to state 137


state 97

    (82) return -> RETURN SEMI .

    RBRACE          reduce using rule 82 (return -> RETURN SEMI .)
    PRINT           reduce using rule 82 (return -> RETURN SEMI .)
    IF              reduce using rule 82 (return -> RETURN SEMI .)
    RETURN          reduce using rule 82 (return -> RETURN SEMI .)
    ID              reduce using rule 82 (return -> RETURN SEMI .)
    WHILE           reduce using rule 82 (return -> RETURN SEMI .)
    FROM            reduce using rule 82 (return -> RETURN SEMI .)


state 98

    (84) expr -> and_expr .

    SEMI            reduce using rule 84 (expr -> and_expr .)
    OR              reduce using rule 84 (expr -> and_expr .)
    RPAREN          reduce using rule 84 (expr -> and_expr .)
    COMMA           reduce using rule 84 (expr -> and_expr .)
    RBRACKET        reduce using rule 84 (expr -> and_expr .)


state 99

    (85) and_expr -> equality_expr . AND equality_expr
    (86) and_expr -> equality_expr .

    AND             shift and go to state 138
    SEMI            reduce using rule 86 (and_expr -> equality_expr .)
    OR              reduce using rule 86 (and_expr -> equality_expr .)
    RPAREN          reduce using rule 86 (and_expr -> equality_expr .)
    COMMA           reduce using rule 86 (and_expr -> equality_expr .)
    RBRACKET        reduce using rule 86 (and_expr -> equality_expr .)


state 100

    (87) equality_expr -> relational_expr . EQUAL parsed_equal relational_expr
    (89) equality_expr -> relational_expr . NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> relational_expr .

    EQUAL           shift and go to state 139
    NEQUAL          shift and go to state 140
    AND             reduce using rule 91 (equality_expr -> relational_expr .)
    SEMI            reduce using rule 91 (equality_expr -> relational_expr .)
    OR              reduce using rule 91 (equality_expr -> relational_expr .)
    RPAREN          reduce using rule 91 (equality_expr -> relational_expr .)
    COMMA           reduce using rule 91 (equality_expr -> relational_expr .)
    RBRACKET        reduce using rule 91 (equality_expr -> relational_expr .)


state 101

    (92) relational_expr -> additive_expr . LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> additive_expr . LTHAN parsed_lthan additive_expr
    (96) relational_expr -> additive_expr . GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> additive_expr . GTHAN parsed_gthan additive_expr
    (100) relational_expr -> additive_expr .
    (101) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    LTHAN_EQUAL     shift and go to state 141
    LTHAN           shift and go to state 142
    GTHAN_EQUAL     shift and go to state 143
    GTHAN           shift and go to state 144
    EQUAL           reduce using rule 100 (relational_expr -> additive_expr .)
    NEQUAL          reduce using rule 100 (relational_expr -> additive_expr .)
    AND             reduce using rule 100 (relational_expr -> additive_expr .)
    SEMI            reduce using rule 100 (relational_expr -> additive_expr .)
    OR              reduce using rule 100 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 100 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 100 (relational_expr -> additive_expr .)
    RBRACKET        reduce using rule 100 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 102

    (114) unary_expr -> PLUS . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    postfix_expr                   shift and go to state 147
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 103

    (105) additive_expr -> multiplicative_expr .
    (106) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (108) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 105 (additive_expr -> multiplicative_expr .)
    LTHAN           reduce using rule 105 (additive_expr -> multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 105 (additive_expr -> multiplicative_expr .)
    GTHAN           reduce using rule 105 (additive_expr -> multiplicative_expr .)
    PLUS            reduce using rule 105 (additive_expr -> multiplicative_expr .)
    MINUS           reduce using rule 105 (additive_expr -> multiplicative_expr .)
    EQUAL           reduce using rule 105 (additive_expr -> multiplicative_expr .)
    NEQUAL          reduce using rule 105 (additive_expr -> multiplicative_expr .)
    AND             reduce using rule 105 (additive_expr -> multiplicative_expr .)
    SEMI            reduce using rule 105 (additive_expr -> multiplicative_expr .)
    OR              reduce using rule 105 (additive_expr -> multiplicative_expr .)
    RPAREN          reduce using rule 105 (additive_expr -> multiplicative_expr .)
    COMMA           reduce using rule 105 (additive_expr -> multiplicative_expr .)
    RBRACKET        reduce using rule 105 (additive_expr -> multiplicative_expr .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    MODULO          shift and go to state 150


state 104

    (113) unary_expr -> MINUS . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    postfix_expr                   shift and go to state 151
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 105

    (112) multiplicative_expr -> unary_expr .

    TIMES           reduce using rule 112 (multiplicative_expr -> unary_expr .)
    DIVIDE          reduce using rule 112 (multiplicative_expr -> unary_expr .)
    MODULO          reduce using rule 112 (multiplicative_expr -> unary_expr .)
    LTHAN_EQUAL     reduce using rule 112 (multiplicative_expr -> unary_expr .)
    LTHAN           reduce using rule 112 (multiplicative_expr -> unary_expr .)
    GTHAN_EQUAL     reduce using rule 112 (multiplicative_expr -> unary_expr .)
    GTHAN           reduce using rule 112 (multiplicative_expr -> unary_expr .)
    PLUS            reduce using rule 112 (multiplicative_expr -> unary_expr .)
    MINUS           reduce using rule 112 (multiplicative_expr -> unary_expr .)
    EQUAL           reduce using rule 112 (multiplicative_expr -> unary_expr .)
    NEQUAL          reduce using rule 112 (multiplicative_expr -> unary_expr .)
    AND             reduce using rule 112 (multiplicative_expr -> unary_expr .)
    SEMI            reduce using rule 112 (multiplicative_expr -> unary_expr .)
    OR              reduce using rule 112 (multiplicative_expr -> unary_expr .)
    RPAREN          reduce using rule 112 (multiplicative_expr -> unary_expr .)
    COMMA           reduce using rule 112 (multiplicative_expr -> unary_expr .)
    RBRACKET        reduce using rule 112 (multiplicative_expr -> unary_expr .)


state 106

    (116) unary_expr -> postfix_expr .

    TIMES           reduce using rule 116 (unary_expr -> postfix_expr .)
    DIVIDE          reduce using rule 116 (unary_expr -> postfix_expr .)
    MODULO          reduce using rule 116 (unary_expr -> postfix_expr .)
    LTHAN_EQUAL     reduce using rule 116 (unary_expr -> postfix_expr .)
    LTHAN           reduce using rule 116 (unary_expr -> postfix_expr .)
    GTHAN_EQUAL     reduce using rule 116 (unary_expr -> postfix_expr .)
    GTHAN           reduce using rule 116 (unary_expr -> postfix_expr .)
    PLUS            reduce using rule 116 (unary_expr -> postfix_expr .)
    MINUS           reduce using rule 116 (unary_expr -> postfix_expr .)
    EQUAL           reduce using rule 116 (unary_expr -> postfix_expr .)
    NEQUAL          reduce using rule 116 (unary_expr -> postfix_expr .)
    AND             reduce using rule 116 (unary_expr -> postfix_expr .)
    SEMI            reduce using rule 116 (unary_expr -> postfix_expr .)
    OR              reduce using rule 116 (unary_expr -> postfix_expr .)
    RPAREN          reduce using rule 116 (unary_expr -> postfix_expr .)
    COMMA           reduce using rule 116 (unary_expr -> postfix_expr .)
    RBRACKET        reduce using rule 116 (unary_expr -> postfix_expr .)


state 107

    (115) unary_expr -> NOT . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    postfix_expr                   shift and go to state 152
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 108

    (117) postfix_expr -> LPAREN . expr RPAREN
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    expr                           shift and go to state 153
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 109

    (118) postfix_expr -> variable_access .

    TIMES           reduce using rule 118 (postfix_expr -> variable_access .)
    DIVIDE          reduce using rule 118 (postfix_expr -> variable_access .)
    MODULO          reduce using rule 118 (postfix_expr -> variable_access .)
    LTHAN_EQUAL     reduce using rule 118 (postfix_expr -> variable_access .)
    LTHAN           reduce using rule 118 (postfix_expr -> variable_access .)
    GTHAN_EQUAL     reduce using rule 118 (postfix_expr -> variable_access .)
    GTHAN           reduce using rule 118 (postfix_expr -> variable_access .)
    PLUS            reduce using rule 118 (postfix_expr -> variable_access .)
    MINUS           reduce using rule 118 (postfix_expr -> variable_access .)
    EQUAL           reduce using rule 118 (postfix_expr -> variable_access .)
    NEQUAL          reduce using rule 118 (postfix_expr -> variable_access .)
    AND             reduce using rule 118 (postfix_expr -> variable_access .)
    SEMI            reduce using rule 118 (postfix_expr -> variable_access .)
    OR              reduce using rule 118 (postfix_expr -> variable_access .)
    RPAREN          reduce using rule 118 (postfix_expr -> variable_access .)
    COMMA           reduce using rule 118 (postfix_expr -> variable_access .)
    RBRACKET        reduce using rule 118 (postfix_expr -> variable_access .)


state 110

    (119) postfix_expr -> function_call .

    TIMES           reduce using rule 119 (postfix_expr -> function_call .)
    DIVIDE          reduce using rule 119 (postfix_expr -> function_call .)
    MODULO          reduce using rule 119 (postfix_expr -> function_call .)
    LTHAN_EQUAL     reduce using rule 119 (postfix_expr -> function_call .)
    LTHAN           reduce using rule 119 (postfix_expr -> function_call .)
    GTHAN_EQUAL     reduce using rule 119 (postfix_expr -> function_call .)
    GTHAN           reduce using rule 119 (postfix_expr -> function_call .)
    PLUS            reduce using rule 119 (postfix_expr -> function_call .)
    MINUS           reduce using rule 119 (postfix_expr -> function_call .)
    EQUAL           reduce using rule 119 (postfix_expr -> function_call .)
    NEQUAL          reduce using rule 119 (postfix_expr -> function_call .)
    AND             reduce using rule 119 (postfix_expr -> function_call .)
    SEMI            reduce using rule 119 (postfix_expr -> function_call .)
    OR              reduce using rule 119 (postfix_expr -> function_call .)
    RPAREN          reduce using rule 119 (postfix_expr -> function_call .)
    COMMA           reduce using rule 119 (postfix_expr -> function_call .)
    RBRACKET        reduce using rule 119 (postfix_expr -> function_call .)


state 111

    (120) postfix_expr -> constant .

    TIMES           reduce using rule 120 (postfix_expr -> constant .)
    DIVIDE          reduce using rule 120 (postfix_expr -> constant .)
    MODULO          reduce using rule 120 (postfix_expr -> constant .)
    LTHAN_EQUAL     reduce using rule 120 (postfix_expr -> constant .)
    LTHAN           reduce using rule 120 (postfix_expr -> constant .)
    GTHAN_EQUAL     reduce using rule 120 (postfix_expr -> constant .)
    GTHAN           reduce using rule 120 (postfix_expr -> constant .)
    PLUS            reduce using rule 120 (postfix_expr -> constant .)
    MINUS           reduce using rule 120 (postfix_expr -> constant .)
    EQUAL           reduce using rule 120 (postfix_expr -> constant .)
    NEQUAL          reduce using rule 120 (postfix_expr -> constant .)
    AND             reduce using rule 120 (postfix_expr -> constant .)
    SEMI            reduce using rule 120 (postfix_expr -> constant .)
    OR              reduce using rule 120 (postfix_expr -> constant .)
    RPAREN          reduce using rule 120 (postfix_expr -> constant .)
    COMMA           reduce using rule 120 (postfix_expr -> constant .)
    RBRACKET        reduce using rule 120 (postfix_expr -> constant .)


state 112

    (121) constant -> CONST_INT .

    TIMES           reduce using rule 121 (constant -> CONST_INT .)
    DIVIDE          reduce using rule 121 (constant -> CONST_INT .)
    MODULO          reduce using rule 121 (constant -> CONST_INT .)
    LTHAN_EQUAL     reduce using rule 121 (constant -> CONST_INT .)
    LTHAN           reduce using rule 121 (constant -> CONST_INT .)
    GTHAN_EQUAL     reduce using rule 121 (constant -> CONST_INT .)
    GTHAN           reduce using rule 121 (constant -> CONST_INT .)
    PLUS            reduce using rule 121 (constant -> CONST_INT .)
    MINUS           reduce using rule 121 (constant -> CONST_INT .)
    EQUAL           reduce using rule 121 (constant -> CONST_INT .)
    NEQUAL          reduce using rule 121 (constant -> CONST_INT .)
    AND             reduce using rule 121 (constant -> CONST_INT .)
    SEMI            reduce using rule 121 (constant -> CONST_INT .)
    OR              reduce using rule 121 (constant -> CONST_INT .)
    RPAREN          reduce using rule 121 (constant -> CONST_INT .)
    COMMA           reduce using rule 121 (constant -> CONST_INT .)
    RBRACKET        reduce using rule 121 (constant -> CONST_INT .)


state 113

    (122) constant -> CONST_REAL .

    TIMES           reduce using rule 122 (constant -> CONST_REAL .)
    DIVIDE          reduce using rule 122 (constant -> CONST_REAL .)
    MODULO          reduce using rule 122 (constant -> CONST_REAL .)
    LTHAN_EQUAL     reduce using rule 122 (constant -> CONST_REAL .)
    LTHAN           reduce using rule 122 (constant -> CONST_REAL .)
    GTHAN_EQUAL     reduce using rule 122 (constant -> CONST_REAL .)
    GTHAN           reduce using rule 122 (constant -> CONST_REAL .)
    PLUS            reduce using rule 122 (constant -> CONST_REAL .)
    MINUS           reduce using rule 122 (constant -> CONST_REAL .)
    EQUAL           reduce using rule 122 (constant -> CONST_REAL .)
    NEQUAL          reduce using rule 122 (constant -> CONST_REAL .)
    AND             reduce using rule 122 (constant -> CONST_REAL .)
    SEMI            reduce using rule 122 (constant -> CONST_REAL .)
    OR              reduce using rule 122 (constant -> CONST_REAL .)
    RPAREN          reduce using rule 122 (constant -> CONST_REAL .)
    COMMA           reduce using rule 122 (constant -> CONST_REAL .)
    RBRACKET        reduce using rule 122 (constant -> CONST_REAL .)


state 114

    (123) constant -> CONST_CHAR .

    TIMES           reduce using rule 123 (constant -> CONST_CHAR .)
    DIVIDE          reduce using rule 123 (constant -> CONST_CHAR .)
    MODULO          reduce using rule 123 (constant -> CONST_CHAR .)
    LTHAN_EQUAL     reduce using rule 123 (constant -> CONST_CHAR .)
    LTHAN           reduce using rule 123 (constant -> CONST_CHAR .)
    GTHAN_EQUAL     reduce using rule 123 (constant -> CONST_CHAR .)
    GTHAN           reduce using rule 123 (constant -> CONST_CHAR .)
    PLUS            reduce using rule 123 (constant -> CONST_CHAR .)
    MINUS           reduce using rule 123 (constant -> CONST_CHAR .)
    EQUAL           reduce using rule 123 (constant -> CONST_CHAR .)
    NEQUAL          reduce using rule 123 (constant -> CONST_CHAR .)
    AND             reduce using rule 123 (constant -> CONST_CHAR .)
    SEMI            reduce using rule 123 (constant -> CONST_CHAR .)
    OR              reduce using rule 123 (constant -> CONST_CHAR .)
    RPAREN          reduce using rule 123 (constant -> CONST_CHAR .)
    COMMA           reduce using rule 123 (constant -> CONST_CHAR .)
    RBRACKET        reduce using rule 123 (constant -> CONST_CHAR .)


state 115

    (124) constant -> CONST_STRING .

    TIMES           reduce using rule 124 (constant -> CONST_STRING .)
    DIVIDE          reduce using rule 124 (constant -> CONST_STRING .)
    MODULO          reduce using rule 124 (constant -> CONST_STRING .)
    LTHAN_EQUAL     reduce using rule 124 (constant -> CONST_STRING .)
    LTHAN           reduce using rule 124 (constant -> CONST_STRING .)
    GTHAN_EQUAL     reduce using rule 124 (constant -> CONST_STRING .)
    GTHAN           reduce using rule 124 (constant -> CONST_STRING .)
    PLUS            reduce using rule 124 (constant -> CONST_STRING .)
    MINUS           reduce using rule 124 (constant -> CONST_STRING .)
    EQUAL           reduce using rule 124 (constant -> CONST_STRING .)
    NEQUAL          reduce using rule 124 (constant -> CONST_STRING .)
    AND             reduce using rule 124 (constant -> CONST_STRING .)
    SEMI            reduce using rule 124 (constant -> CONST_STRING .)
    OR              reduce using rule 124 (constant -> CONST_STRING .)
    RPAREN          reduce using rule 124 (constant -> CONST_STRING .)
    COMMA           reduce using rule 124 (constant -> CONST_STRING .)
    RBRACKET        reduce using rule 124 (constant -> CONST_STRING .)


state 116

    (125) constant -> constant_bool .

    TIMES           reduce using rule 125 (constant -> constant_bool .)
    DIVIDE          reduce using rule 125 (constant -> constant_bool .)
    MODULO          reduce using rule 125 (constant -> constant_bool .)
    LTHAN_EQUAL     reduce using rule 125 (constant -> constant_bool .)
    LTHAN           reduce using rule 125 (constant -> constant_bool .)
    GTHAN_EQUAL     reduce using rule 125 (constant -> constant_bool .)
    GTHAN           reduce using rule 125 (constant -> constant_bool .)
    PLUS            reduce using rule 125 (constant -> constant_bool .)
    MINUS           reduce using rule 125 (constant -> constant_bool .)
    EQUAL           reduce using rule 125 (constant -> constant_bool .)
    NEQUAL          reduce using rule 125 (constant -> constant_bool .)
    AND             reduce using rule 125 (constant -> constant_bool .)
    SEMI            reduce using rule 125 (constant -> constant_bool .)
    OR              reduce using rule 125 (constant -> constant_bool .)
    RPAREN          reduce using rule 125 (constant -> constant_bool .)
    COMMA           reduce using rule 125 (constant -> constant_bool .)
    RBRACKET        reduce using rule 125 (constant -> constant_bool .)


state 117

    (126) constant_bool -> TRUE .

    TIMES           reduce using rule 126 (constant_bool -> TRUE .)
    DIVIDE          reduce using rule 126 (constant_bool -> TRUE .)
    MODULO          reduce using rule 126 (constant_bool -> TRUE .)
    LTHAN_EQUAL     reduce using rule 126 (constant_bool -> TRUE .)
    LTHAN           reduce using rule 126 (constant_bool -> TRUE .)
    GTHAN_EQUAL     reduce using rule 126 (constant_bool -> TRUE .)
    GTHAN           reduce using rule 126 (constant_bool -> TRUE .)
    PLUS            reduce using rule 126 (constant_bool -> TRUE .)
    MINUS           reduce using rule 126 (constant_bool -> TRUE .)
    EQUAL           reduce using rule 126 (constant_bool -> TRUE .)
    NEQUAL          reduce using rule 126 (constant_bool -> TRUE .)
    AND             reduce using rule 126 (constant_bool -> TRUE .)
    SEMI            reduce using rule 126 (constant_bool -> TRUE .)
    OR              reduce using rule 126 (constant_bool -> TRUE .)
    RPAREN          reduce using rule 126 (constant_bool -> TRUE .)
    COMMA           reduce using rule 126 (constant_bool -> TRUE .)
    RBRACKET        reduce using rule 126 (constant_bool -> TRUE .)


state 118

    (127) constant_bool -> FALSE .

    TIMES           reduce using rule 127 (constant_bool -> FALSE .)
    DIVIDE          reduce using rule 127 (constant_bool -> FALSE .)
    MODULO          reduce using rule 127 (constant_bool -> FALSE .)
    LTHAN_EQUAL     reduce using rule 127 (constant_bool -> FALSE .)
    LTHAN           reduce using rule 127 (constant_bool -> FALSE .)
    GTHAN_EQUAL     reduce using rule 127 (constant_bool -> FALSE .)
    GTHAN           reduce using rule 127 (constant_bool -> FALSE .)
    PLUS            reduce using rule 127 (constant_bool -> FALSE .)
    MINUS           reduce using rule 127 (constant_bool -> FALSE .)
    EQUAL           reduce using rule 127 (constant_bool -> FALSE .)
    NEQUAL          reduce using rule 127 (constant_bool -> FALSE .)
    AND             reduce using rule 127 (constant_bool -> FALSE .)
    SEMI            reduce using rule 127 (constant_bool -> FALSE .)
    OR              reduce using rule 127 (constant_bool -> FALSE .)
    RPAREN          reduce using rule 127 (constant_bool -> FALSE .)
    COMMA           reduce using rule 127 (constant_bool -> FALSE .)
    RBRACKET        reduce using rule 127 (constant_bool -> FALSE .)


state 119

    (50) variable_access -> ID parsed_id_variable_access . dims_access
    (52) dims_access -> . dims_access dim_access
    (53) dims_access -> . dim_access
    (54) dims_access -> . empty
    (55) dim_access -> . LBRACKET expr RBRACKET
    (132) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 157
    ASGMT           reduce using rule 132 (empty -> .)
    TIMES           reduce using rule 132 (empty -> .)
    DIVIDE          reduce using rule 132 (empty -> .)
    MODULO          reduce using rule 132 (empty -> .)
    LTHAN_EQUAL     reduce using rule 132 (empty -> .)
    LTHAN           reduce using rule 132 (empty -> .)
    GTHAN_EQUAL     reduce using rule 132 (empty -> .)
    GTHAN           reduce using rule 132 (empty -> .)
    PLUS            reduce using rule 132 (empty -> .)
    MINUS           reduce using rule 132 (empty -> .)
    EQUAL           reduce using rule 132 (empty -> .)
    NEQUAL          reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    SEMI            reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    RPAREN          reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    RBRACKET        reduce using rule 132 (empty -> .)

  ! LBRACKET        [ reduce using rule 132 (empty -> .) ]

    dims_access                    shift and go to state 154
    dim_access                     shift and go to state 155
    empty                          shift and go to state 156

state 120

    (57) function_call -> ID parsed_function_call_id . LPAREN function_call_params RPAREN
    (58) function_call -> ID parsed_function_call_id . LPAREN RPAREN

    LPAREN          shift and go to state 158


state 121

    (74) while -> WHILE parsed_while . LPAREN expr parsed_while_expr RPAREN instruction_block

    LPAREN          shift and go to state 159


state 122

    (77) for -> FROM LPAREN . for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block
    (78) for_initialization -> . assignment_no_semi
    (48) assignment_no_semi -> . variable_access ASGMT expr
    (50) variable_access -> . ID parsed_id_variable_access dims_access

    ID              shift and go to state 163

    for_initialization             shift and go to state 160
    assignment_no_semi             shift and go to state 161
    variable_access                shift and go to state 162

state 123

    (9) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 164

state 124

    (18) function_definition_params -> function_definition_params COMMA function_definition_param .

    RPAREN          reduce using rule 18 (function_definition_params -> function_definition_params COMMA function_definition_param .)
    COMMA           reduce using rule 18 (function_definition_params -> function_definition_params COMMA function_definition_param .)


state 125

    (10) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 10 (function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 10 (function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 126

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 165

state 127

    (12) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 12 (function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 12 (function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN RPAREN local_variables_declaration instruction_block .)


state 128

    (36) variable_dim_definition -> LBRACKET CONST_INT RBRACKET .

    LBRACKET        reduce using rule 36 (variable_dim_definition -> LBRACKET CONST_INT RBRACKET .)
    SEMI            reduce using rule 36 (variable_dim_definition -> LBRACKET CONST_INT RBRACKET .)
    COMMA           reduce using rule 36 (variable_dim_definition -> LBRACKET CONST_INT RBRACKET .)


state 129

    (49) assignment -> variable_access ASGMT READ . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 166


state 130

    (48) assignment_no_semi -> variable_access ASGMT expr .
    (83) expr -> expr . OR and_expr

    SEMI            reduce using rule 48 (assignment_no_semi -> variable_access ASGMT expr .)
    RPAREN          reduce using rule 48 (assignment_no_semi -> variable_access ASGMT expr .)
    OR              shift and go to state 137


state 131

    (63) print -> PRINT LPAREN print_params . RPAREN SEMI
    (65) print_params -> print_params . COMMA print_param

    RPAREN          shift and go to state 167
    COMMA           shift and go to state 168


state 132

    (64) print -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 169


state 133

    (66) print_params -> print_param .

    RPAREN          reduce using rule 66 (print_params -> print_param .)
    COMMA           reduce using rule 66 (print_params -> print_param .)


state 134

    (67) print_param -> expr .
    (83) expr -> expr . OR and_expr

    RPAREN          reduce using rule 67 (print_param -> expr .)
    COMMA           reduce using rule 67 (print_param -> expr .)
    OR              shift and go to state 137


state 135

    (68) conditional -> IF LPAREN expr . RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr . RPAREN parsed_if_expr instruction_block
    (83) expr -> expr . OR and_expr

    RPAREN          shift and go to state 170
    OR              shift and go to state 137


state 136

    (81) return -> RETURN expr SEMI .

    RBRACE          reduce using rule 81 (return -> RETURN expr SEMI .)
    PRINT           reduce using rule 81 (return -> RETURN expr SEMI .)
    IF              reduce using rule 81 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 81 (return -> RETURN expr SEMI .)
    ID              reduce using rule 81 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 81 (return -> RETURN expr SEMI .)
    FROM            reduce using rule 81 (return -> RETURN expr SEMI .)


state 137

    (83) expr -> expr OR . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    and_expr                       shift and go to state 171
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 138

    (85) and_expr -> equality_expr AND . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    equality_expr                  shift and go to state 172
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 139

    (87) equality_expr -> relational_expr EQUAL . parsed_equal relational_expr
    (88) parsed_equal -> .

    MINUS           reduce using rule 88 (parsed_equal -> .)
    PLUS            reduce using rule 88 (parsed_equal -> .)
    NOT             reduce using rule 88 (parsed_equal -> .)
    LPAREN          reduce using rule 88 (parsed_equal -> .)
    ID              reduce using rule 88 (parsed_equal -> .)
    CONST_INT       reduce using rule 88 (parsed_equal -> .)
    CONST_REAL      reduce using rule 88 (parsed_equal -> .)
    CONST_CHAR      reduce using rule 88 (parsed_equal -> .)
    CONST_STRING    reduce using rule 88 (parsed_equal -> .)
    TRUE            reduce using rule 88 (parsed_equal -> .)
    FALSE           reduce using rule 88 (parsed_equal -> .)

    parsed_equal                   shift and go to state 173

state 140

    (89) equality_expr -> relational_expr NEQUAL . parsed_nequal relational_expr
    (90) parsed_nequal -> .

    MINUS           reduce using rule 90 (parsed_nequal -> .)
    PLUS            reduce using rule 90 (parsed_nequal -> .)
    NOT             reduce using rule 90 (parsed_nequal -> .)
    LPAREN          reduce using rule 90 (parsed_nequal -> .)
    ID              reduce using rule 90 (parsed_nequal -> .)
    CONST_INT       reduce using rule 90 (parsed_nequal -> .)
    CONST_REAL      reduce using rule 90 (parsed_nequal -> .)
    CONST_CHAR      reduce using rule 90 (parsed_nequal -> .)
    CONST_STRING    reduce using rule 90 (parsed_nequal -> .)
    TRUE            reduce using rule 90 (parsed_nequal -> .)
    FALSE           reduce using rule 90 (parsed_nequal -> .)

    parsed_nequal                  shift and go to state 174

state 141

    (92) relational_expr -> additive_expr LTHAN_EQUAL . parsed_lthan_equal additive_expr
    (93) parsed_lthan_equal -> .

    MINUS           reduce using rule 93 (parsed_lthan_equal -> .)
    PLUS            reduce using rule 93 (parsed_lthan_equal -> .)
    NOT             reduce using rule 93 (parsed_lthan_equal -> .)
    LPAREN          reduce using rule 93 (parsed_lthan_equal -> .)
    ID              reduce using rule 93 (parsed_lthan_equal -> .)
    CONST_INT       reduce using rule 93 (parsed_lthan_equal -> .)
    CONST_REAL      reduce using rule 93 (parsed_lthan_equal -> .)
    CONST_CHAR      reduce using rule 93 (parsed_lthan_equal -> .)
    CONST_STRING    reduce using rule 93 (parsed_lthan_equal -> .)
    TRUE            reduce using rule 93 (parsed_lthan_equal -> .)
    FALSE           reduce using rule 93 (parsed_lthan_equal -> .)

    parsed_lthan_equal             shift and go to state 175

state 142

    (94) relational_expr -> additive_expr LTHAN . parsed_lthan additive_expr
    (95) parsed_lthan -> .

    MINUS           reduce using rule 95 (parsed_lthan -> .)
    PLUS            reduce using rule 95 (parsed_lthan -> .)
    NOT             reduce using rule 95 (parsed_lthan -> .)
    LPAREN          reduce using rule 95 (parsed_lthan -> .)
    ID              reduce using rule 95 (parsed_lthan -> .)
    CONST_INT       reduce using rule 95 (parsed_lthan -> .)
    CONST_REAL      reduce using rule 95 (parsed_lthan -> .)
    CONST_CHAR      reduce using rule 95 (parsed_lthan -> .)
    CONST_STRING    reduce using rule 95 (parsed_lthan -> .)
    TRUE            reduce using rule 95 (parsed_lthan -> .)
    FALSE           reduce using rule 95 (parsed_lthan -> .)

    parsed_lthan                   shift and go to state 176

state 143

    (96) relational_expr -> additive_expr GTHAN_EQUAL . parsed_gthan_equal additive_expr
    (97) parsed_gthan_equal -> .

    MINUS           reduce using rule 97 (parsed_gthan_equal -> .)
    PLUS            reduce using rule 97 (parsed_gthan_equal -> .)
    NOT             reduce using rule 97 (parsed_gthan_equal -> .)
    LPAREN          reduce using rule 97 (parsed_gthan_equal -> .)
    ID              reduce using rule 97 (parsed_gthan_equal -> .)
    CONST_INT       reduce using rule 97 (parsed_gthan_equal -> .)
    CONST_REAL      reduce using rule 97 (parsed_gthan_equal -> .)
    CONST_CHAR      reduce using rule 97 (parsed_gthan_equal -> .)
    CONST_STRING    reduce using rule 97 (parsed_gthan_equal -> .)
    TRUE            reduce using rule 97 (parsed_gthan_equal -> .)
    FALSE           reduce using rule 97 (parsed_gthan_equal -> .)

    parsed_gthan_equal             shift and go to state 177

state 144

    (98) relational_expr -> additive_expr GTHAN . parsed_gthan additive_expr
    (99) parsed_gthan -> .

    MINUS           reduce using rule 99 (parsed_gthan -> .)
    PLUS            reduce using rule 99 (parsed_gthan -> .)
    NOT             reduce using rule 99 (parsed_gthan -> .)
    LPAREN          reduce using rule 99 (parsed_gthan -> .)
    ID              reduce using rule 99 (parsed_gthan -> .)
    CONST_INT       reduce using rule 99 (parsed_gthan -> .)
    CONST_REAL      reduce using rule 99 (parsed_gthan -> .)
    CONST_CHAR      reduce using rule 99 (parsed_gthan -> .)
    CONST_STRING    reduce using rule 99 (parsed_gthan -> .)
    TRUE            reduce using rule 99 (parsed_gthan -> .)
    FALSE           reduce using rule 99 (parsed_gthan -> .)

    parsed_gthan                   shift and go to state 178

state 145

    (101) additive_expr -> additive_expr PLUS . parsed_plus multiplicative_expr
    (102) parsed_plus -> .

    MINUS           reduce using rule 102 (parsed_plus -> .)
    PLUS            reduce using rule 102 (parsed_plus -> .)
    NOT             reduce using rule 102 (parsed_plus -> .)
    LPAREN          reduce using rule 102 (parsed_plus -> .)
    ID              reduce using rule 102 (parsed_plus -> .)
    CONST_INT       reduce using rule 102 (parsed_plus -> .)
    CONST_REAL      reduce using rule 102 (parsed_plus -> .)
    CONST_CHAR      reduce using rule 102 (parsed_plus -> .)
    CONST_STRING    reduce using rule 102 (parsed_plus -> .)
    TRUE            reduce using rule 102 (parsed_plus -> .)
    FALSE           reduce using rule 102 (parsed_plus -> .)

    parsed_plus                    shift and go to state 179

state 146

    (103) additive_expr -> additive_expr MINUS . parsed_minus multiplicative_expr
    (104) parsed_minus -> .

    MINUS           reduce using rule 104 (parsed_minus -> .)
    PLUS            reduce using rule 104 (parsed_minus -> .)
    NOT             reduce using rule 104 (parsed_minus -> .)
    LPAREN          reduce using rule 104 (parsed_minus -> .)
    ID              reduce using rule 104 (parsed_minus -> .)
    CONST_INT       reduce using rule 104 (parsed_minus -> .)
    CONST_REAL      reduce using rule 104 (parsed_minus -> .)
    CONST_CHAR      reduce using rule 104 (parsed_minus -> .)
    CONST_STRING    reduce using rule 104 (parsed_minus -> .)
    TRUE            reduce using rule 104 (parsed_minus -> .)
    FALSE           reduce using rule 104 (parsed_minus -> .)

    parsed_minus                   shift and go to state 180

state 147

    (114) unary_expr -> PLUS postfix_expr .

    TIMES           reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    DIVIDE          reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    MODULO          reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    LTHAN           reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    GTHAN           reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    PLUS            reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    MINUS           reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    EQUAL           reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    NEQUAL          reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    AND             reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    SEMI            reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    OR              reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    RPAREN          reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    COMMA           reduce using rule 114 (unary_expr -> PLUS postfix_expr .)
    RBRACKET        reduce using rule 114 (unary_expr -> PLUS postfix_expr .)


state 148

    (106) multiplicative_expr -> multiplicative_expr TIMES . parsed_times unary_expr
    (107) parsed_times -> .

    MINUS           reduce using rule 107 (parsed_times -> .)
    PLUS            reduce using rule 107 (parsed_times -> .)
    NOT             reduce using rule 107 (parsed_times -> .)
    LPAREN          reduce using rule 107 (parsed_times -> .)
    ID              reduce using rule 107 (parsed_times -> .)
    CONST_INT       reduce using rule 107 (parsed_times -> .)
    CONST_REAL      reduce using rule 107 (parsed_times -> .)
    CONST_CHAR      reduce using rule 107 (parsed_times -> .)
    CONST_STRING    reduce using rule 107 (parsed_times -> .)
    TRUE            reduce using rule 107 (parsed_times -> .)
    FALSE           reduce using rule 107 (parsed_times -> .)

    parsed_times                   shift and go to state 181

state 149

    (108) multiplicative_expr -> multiplicative_expr DIVIDE . parsed_divide unary_expr
    (109) parsed_divide -> .

    MINUS           reduce using rule 109 (parsed_divide -> .)
    PLUS            reduce using rule 109 (parsed_divide -> .)
    NOT             reduce using rule 109 (parsed_divide -> .)
    LPAREN          reduce using rule 109 (parsed_divide -> .)
    ID              reduce using rule 109 (parsed_divide -> .)
    CONST_INT       reduce using rule 109 (parsed_divide -> .)
    CONST_REAL      reduce using rule 109 (parsed_divide -> .)
    CONST_CHAR      reduce using rule 109 (parsed_divide -> .)
    CONST_STRING    reduce using rule 109 (parsed_divide -> .)
    TRUE            reduce using rule 109 (parsed_divide -> .)
    FALSE           reduce using rule 109 (parsed_divide -> .)

    parsed_divide                  shift and go to state 182

state 150

    (110) multiplicative_expr -> multiplicative_expr MODULO . parsed_modulo unary_expr
    (111) parsed_modulo -> .

    MINUS           reduce using rule 111 (parsed_modulo -> .)
    PLUS            reduce using rule 111 (parsed_modulo -> .)
    NOT             reduce using rule 111 (parsed_modulo -> .)
    LPAREN          reduce using rule 111 (parsed_modulo -> .)
    ID              reduce using rule 111 (parsed_modulo -> .)
    CONST_INT       reduce using rule 111 (parsed_modulo -> .)
    CONST_REAL      reduce using rule 111 (parsed_modulo -> .)
    CONST_CHAR      reduce using rule 111 (parsed_modulo -> .)
    CONST_STRING    reduce using rule 111 (parsed_modulo -> .)
    TRUE            reduce using rule 111 (parsed_modulo -> .)
    FALSE           reduce using rule 111 (parsed_modulo -> .)

    parsed_modulo                  shift and go to state 183

state 151

    (113) unary_expr -> MINUS postfix_expr .

    TIMES           reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    DIVIDE          reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    MODULO          reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    LTHAN_EQUAL     reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    LTHAN           reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    GTHAN_EQUAL     reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    GTHAN           reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    PLUS            reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    MINUS           reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    EQUAL           reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    NEQUAL          reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    AND             reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    SEMI            reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    OR              reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    RPAREN          reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    COMMA           reduce using rule 113 (unary_expr -> MINUS postfix_expr .)
    RBRACKET        reduce using rule 113 (unary_expr -> MINUS postfix_expr .)


state 152

    (115) unary_expr -> NOT postfix_expr .

    TIMES           reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    DIVIDE          reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    MODULO          reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    LTHAN_EQUAL     reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    LTHAN           reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    GTHAN_EQUAL     reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    GTHAN           reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    PLUS            reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    MINUS           reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    EQUAL           reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    NEQUAL          reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    AND             reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    SEMI            reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    OR              reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    RPAREN          reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    COMMA           reduce using rule 115 (unary_expr -> NOT postfix_expr .)
    RBRACKET        reduce using rule 115 (unary_expr -> NOT postfix_expr .)


state 153

    (117) postfix_expr -> LPAREN expr . RPAREN
    (83) expr -> expr . OR and_expr

    RPAREN          shift and go to state 184
    OR              shift and go to state 137


state 154

    (50) variable_access -> ID parsed_id_variable_access dims_access .
    (52) dims_access -> dims_access . dim_access
    (55) dim_access -> . LBRACKET expr RBRACKET

    ASGMT           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    TIMES           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    DIVIDE          reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    MODULO          reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN_EQUAL     reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    LTHAN           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN_EQUAL     reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    GTHAN           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    PLUS            reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    MINUS           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    EQUAL           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    NEQUAL          reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    AND             reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    SEMI            reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    OR              reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    RPAREN          reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    COMMA           reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    RBRACKET        reduce using rule 50 (variable_access -> ID parsed_id_variable_access dims_access .)
    LBRACKET        shift and go to state 157

    dim_access                     shift and go to state 185

state 155

    (53) dims_access -> dim_access .

    LBRACKET        reduce using rule 53 (dims_access -> dim_access .)
    ASGMT           reduce using rule 53 (dims_access -> dim_access .)
    TIMES           reduce using rule 53 (dims_access -> dim_access .)
    DIVIDE          reduce using rule 53 (dims_access -> dim_access .)
    MODULO          reduce using rule 53 (dims_access -> dim_access .)
    LTHAN_EQUAL     reduce using rule 53 (dims_access -> dim_access .)
    LTHAN           reduce using rule 53 (dims_access -> dim_access .)
    GTHAN_EQUAL     reduce using rule 53 (dims_access -> dim_access .)
    GTHAN           reduce using rule 53 (dims_access -> dim_access .)
    PLUS            reduce using rule 53 (dims_access -> dim_access .)
    MINUS           reduce using rule 53 (dims_access -> dim_access .)
    EQUAL           reduce using rule 53 (dims_access -> dim_access .)
    NEQUAL          reduce using rule 53 (dims_access -> dim_access .)
    AND             reduce using rule 53 (dims_access -> dim_access .)
    SEMI            reduce using rule 53 (dims_access -> dim_access .)
    OR              reduce using rule 53 (dims_access -> dim_access .)
    RPAREN          reduce using rule 53 (dims_access -> dim_access .)
    COMMA           reduce using rule 53 (dims_access -> dim_access .)
    RBRACKET        reduce using rule 53 (dims_access -> dim_access .)


state 156

    (54) dims_access -> empty .

    LBRACKET        reduce using rule 54 (dims_access -> empty .)
    ASGMT           reduce using rule 54 (dims_access -> empty .)
    TIMES           reduce using rule 54 (dims_access -> empty .)
    DIVIDE          reduce using rule 54 (dims_access -> empty .)
    MODULO          reduce using rule 54 (dims_access -> empty .)
    LTHAN_EQUAL     reduce using rule 54 (dims_access -> empty .)
    LTHAN           reduce using rule 54 (dims_access -> empty .)
    GTHAN_EQUAL     reduce using rule 54 (dims_access -> empty .)
    GTHAN           reduce using rule 54 (dims_access -> empty .)
    PLUS            reduce using rule 54 (dims_access -> empty .)
    MINUS           reduce using rule 54 (dims_access -> empty .)
    EQUAL           reduce using rule 54 (dims_access -> empty .)
    NEQUAL          reduce using rule 54 (dims_access -> empty .)
    AND             reduce using rule 54 (dims_access -> empty .)
    SEMI            reduce using rule 54 (dims_access -> empty .)
    OR              reduce using rule 54 (dims_access -> empty .)
    RPAREN          reduce using rule 54 (dims_access -> empty .)
    COMMA           reduce using rule 54 (dims_access -> empty .)
    RBRACKET        reduce using rule 54 (dims_access -> empty .)


state 157

    (55) dim_access -> LBRACKET . expr RBRACKET
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    expr                           shift and go to state 186
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 158

    (57) function_call -> ID parsed_function_call_id LPAREN . function_call_params RPAREN
    (58) function_call -> ID parsed_function_call_id LPAREN . RPAREN
    (60) function_call_params -> . function_call_params COMMA single_function_call_param
    (61) function_call_params -> . single_function_call_param
    (62) single_function_call_param -> . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    RPAREN          shift and go to state 188
    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    function_call_params           shift and go to state 187
    single_function_call_param     shift and go to state 189
    expr                           shift and go to state 190
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 159

    (74) while -> WHILE parsed_while LPAREN . expr parsed_while_expr RPAREN instruction_block
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    expr                           shift and go to state 191
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 160

    (77) for -> FROM LPAREN for_initialization . SEMI for_condition SEMI for_update RPAREN instruction_block

    SEMI            shift and go to state 192


state 161

    (78) for_initialization -> assignment_no_semi .

    SEMI            reduce using rule 78 (for_initialization -> assignment_no_semi .)


state 162

    (48) assignment_no_semi -> variable_access . ASGMT expr

    ASGMT           shift and go to state 193


state 163

    (50) variable_access -> ID . parsed_id_variable_access dims_access
    (51) parsed_id_variable_access -> .

    LBRACKET        reduce using rule 51 (parsed_id_variable_access -> .)
    ASGMT           reduce using rule 51 (parsed_id_variable_access -> .)

    parsed_id_variable_access      shift and go to state 119

state 164

    (9) function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 9 (function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 9 (function_definition -> FUNCTION type parsed_function_return_type ID parsed_type_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 165

    (11) function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .

    START           reduce using rule 11 (function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)
    FUNCTION        reduce using rule 11 (function_definition -> FUNCTION VOID parsed_function_void_return_type ID parsed_void_function_id LPAREN function_definition_params RPAREN local_variables_declaration instruction_block .)


state 166

    (49) assignment -> variable_access ASGMT READ LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 194


state 167

    (63) print -> PRINT LPAREN print_params RPAREN . SEMI

    SEMI            shift and go to state 195


state 168

    (65) print_params -> print_params COMMA . print_param
    (67) print_param -> . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    print_param                    shift and go to state 196
    expr                           shift and go to state 134
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 169

    (64) print -> PRINT LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    ID              reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)
    FROM            reduce using rule 64 (print -> PRINT LPAREN RPAREN SEMI .)


state 170

    (68) conditional -> IF LPAREN expr RPAREN . parsed_if_expr instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr RPAREN . parsed_if_expr instruction_block
    (70) parsed_if_expr -> .

    LBRACE          reduce using rule 70 (parsed_if_expr -> .)

    parsed_if_expr                 shift and go to state 197

state 171

    (83) expr -> expr OR and_expr .

    SEMI            reduce using rule 83 (expr -> expr OR and_expr .)
    OR              reduce using rule 83 (expr -> expr OR and_expr .)
    RPAREN          reduce using rule 83 (expr -> expr OR and_expr .)
    COMMA           reduce using rule 83 (expr -> expr OR and_expr .)
    RBRACKET        reduce using rule 83 (expr -> expr OR and_expr .)


state 172

    (85) and_expr -> equality_expr AND equality_expr .

    SEMI            reduce using rule 85 (and_expr -> equality_expr AND equality_expr .)
    OR              reduce using rule 85 (and_expr -> equality_expr AND equality_expr .)
    RPAREN          reduce using rule 85 (and_expr -> equality_expr AND equality_expr .)
    COMMA           reduce using rule 85 (and_expr -> equality_expr AND equality_expr .)
    RBRACKET        reduce using rule 85 (and_expr -> equality_expr AND equality_expr .)


state 173

    (87) equality_expr -> relational_expr EQUAL parsed_equal . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    relational_expr                shift and go to state 198
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 174

    (89) equality_expr -> relational_expr NEQUAL parsed_nequal . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    relational_expr                shift and go to state 199
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 175

    (92) relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    additive_expr                  shift and go to state 200
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 176

    (94) relational_expr -> additive_expr LTHAN parsed_lthan . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    additive_expr                  shift and go to state 201
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 177

    (96) relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    additive_expr                  shift and go to state 202
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 178

    (98) relational_expr -> additive_expr GTHAN parsed_gthan . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    additive_expr                  shift and go to state 203
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 179

    (101) additive_expr -> additive_expr PLUS parsed_plus . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    multiplicative_expr            shift and go to state 204
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 180

    (103) additive_expr -> additive_expr MINUS parsed_minus . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    multiplicative_expr            shift and go to state 205
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 181

    (106) multiplicative_expr -> multiplicative_expr TIMES parsed_times . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    unary_expr                     shift and go to state 206
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 182

    (108) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    unary_expr                     shift and go to state 207
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 183

    (110) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    unary_expr                     shift and go to state 208
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 184

    (117) postfix_expr -> LPAREN expr RPAREN .

    TIMES           reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN_EQUAL     reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    LTHAN           reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN_EQUAL     reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    GTHAN           reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    NEQUAL          reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 117 (postfix_expr -> LPAREN expr RPAREN .)


state 185

    (52) dims_access -> dims_access dim_access .

    LBRACKET        reduce using rule 52 (dims_access -> dims_access dim_access .)
    ASGMT           reduce using rule 52 (dims_access -> dims_access dim_access .)
    TIMES           reduce using rule 52 (dims_access -> dims_access dim_access .)
    DIVIDE          reduce using rule 52 (dims_access -> dims_access dim_access .)
    MODULO          reduce using rule 52 (dims_access -> dims_access dim_access .)
    LTHAN_EQUAL     reduce using rule 52 (dims_access -> dims_access dim_access .)
    LTHAN           reduce using rule 52 (dims_access -> dims_access dim_access .)
    GTHAN_EQUAL     reduce using rule 52 (dims_access -> dims_access dim_access .)
    GTHAN           reduce using rule 52 (dims_access -> dims_access dim_access .)
    PLUS            reduce using rule 52 (dims_access -> dims_access dim_access .)
    MINUS           reduce using rule 52 (dims_access -> dims_access dim_access .)
    EQUAL           reduce using rule 52 (dims_access -> dims_access dim_access .)
    NEQUAL          reduce using rule 52 (dims_access -> dims_access dim_access .)
    AND             reduce using rule 52 (dims_access -> dims_access dim_access .)
    SEMI            reduce using rule 52 (dims_access -> dims_access dim_access .)
    OR              reduce using rule 52 (dims_access -> dims_access dim_access .)
    RPAREN          reduce using rule 52 (dims_access -> dims_access dim_access .)
    COMMA           reduce using rule 52 (dims_access -> dims_access dim_access .)
    RBRACKET        reduce using rule 52 (dims_access -> dims_access dim_access .)


state 186

    (55) dim_access -> LBRACKET expr . RBRACKET
    (83) expr -> expr . OR and_expr

    RBRACKET        shift and go to state 209
    OR              shift and go to state 137


state 187

    (57) function_call -> ID parsed_function_call_id LPAREN function_call_params . RPAREN
    (60) function_call_params -> function_call_params . COMMA single_function_call_param

    RPAREN          shift and go to state 210
    COMMA           shift and go to state 211


state 188

    (58) function_call -> ID parsed_function_call_id LPAREN RPAREN .

    SEMI            reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    TIMES           reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    DIVIDE          reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    MODULO          reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    LTHAN_EQUAL     reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    LTHAN           reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    GTHAN_EQUAL     reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    GTHAN           reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    PLUS            reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    MINUS           reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    EQUAL           reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    NEQUAL          reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    AND             reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    OR              reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    RPAREN          reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    COMMA           reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)
    RBRACKET        reduce using rule 58 (function_call -> ID parsed_function_call_id LPAREN RPAREN .)


state 189

    (61) function_call_params -> single_function_call_param .

    RPAREN          reduce using rule 61 (function_call_params -> single_function_call_param .)
    COMMA           reduce using rule 61 (function_call_params -> single_function_call_param .)


state 190

    (62) single_function_call_param -> expr .
    (83) expr -> expr . OR and_expr

    RPAREN          reduce using rule 62 (single_function_call_param -> expr .)
    COMMA           reduce using rule 62 (single_function_call_param -> expr .)
    OR              shift and go to state 137


state 191

    (74) while -> WHILE parsed_while LPAREN expr . parsed_while_expr RPAREN instruction_block
    (83) expr -> expr . OR and_expr
    (76) parsed_while_expr -> .

    OR              shift and go to state 137
    RPAREN          reduce using rule 76 (parsed_while_expr -> .)

    parsed_while_expr              shift and go to state 212

state 192

    (77) for -> FROM LPAREN for_initialization SEMI . for_condition SEMI for_update RPAREN instruction_block
    (79) for_condition -> . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    for_condition                  shift and go to state 213
    expr                           shift and go to state 214
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 193

    (48) assignment_no_semi -> variable_access ASGMT . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    variable_access                shift and go to state 109
    expr                           shift and go to state 130
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 194

    (49) assignment -> variable_access ASGMT READ LPAREN RPAREN . SEMI

    SEMI            shift and go to state 215


state 195

    (63) print -> PRINT LPAREN print_params RPAREN SEMI .

    RBRACE          reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    PRINT           reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    IF              reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    RETURN          reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    ID              reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    WHILE           reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)
    FROM            reduce using rule 63 (print -> PRINT LPAREN print_params RPAREN SEMI .)


state 196

    (65) print_params -> print_params COMMA print_param .

    RPAREN          reduce using rule 65 (print_params -> print_params COMMA print_param .)
    COMMA           reduce using rule 65 (print_params -> print_params COMMA print_param .)


state 197

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr . instruction_block ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expr . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 216

state 198

    (87) equality_expr -> relational_expr EQUAL parsed_equal relational_expr .

    AND             reduce using rule 87 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    SEMI            reduce using rule 87 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    OR              reduce using rule 87 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    RPAREN          reduce using rule 87 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    COMMA           reduce using rule 87 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)
    RBRACKET        reduce using rule 87 (equality_expr -> relational_expr EQUAL parsed_equal relational_expr .)


state 199

    (89) equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .

    AND             reduce using rule 89 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    SEMI            reduce using rule 89 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    OR              reduce using rule 89 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    RPAREN          reduce using rule 89 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    COMMA           reduce using rule 89 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)
    RBRACKET        reduce using rule 89 (equality_expr -> relational_expr NEQUAL parsed_nequal relational_expr .)


state 200

    (92) relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .
    (101) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    NEQUAL          reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    AND             reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    SEMI            reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    OR              reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    RPAREN          reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    COMMA           reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    RBRACKET        reduce using rule 92 (relational_expr -> additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 201

    (94) relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .
    (101) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    NEQUAL          reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    AND             reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    SEMI            reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    OR              reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    RPAREN          reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    COMMA           reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    RBRACKET        reduce using rule 94 (relational_expr -> additive_expr LTHAN parsed_lthan additive_expr .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 202

    (96) relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .
    (101) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    NEQUAL          reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    AND             reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    SEMI            reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    OR              reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    RPAREN          reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    COMMA           reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    RBRACKET        reduce using rule 96 (relational_expr -> additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 203

    (98) relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .
    (101) additive_expr -> additive_expr . PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> additive_expr . MINUS parsed_minus multiplicative_expr

    EQUAL           reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    NEQUAL          reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    AND             reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    SEMI            reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    OR              reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    RPAREN          reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    COMMA           reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    RBRACKET        reduce using rule 98 (relational_expr -> additive_expr GTHAN parsed_gthan additive_expr .)
    PLUS            shift and go to state 145
    MINUS           shift and go to state 146


state 204

    (101) additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .
    (106) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (108) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    LTHAN           reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    GTHAN           reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    PLUS            reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    MINUS           reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    EQUAL           reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    NEQUAL          reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    AND             reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    SEMI            reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    OR              reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RPAREN          reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    COMMA           reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    RBRACKET        reduce using rule 101 (additive_expr -> additive_expr PLUS parsed_plus multiplicative_expr .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    MODULO          shift and go to state 150


state 205

    (103) additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .
    (106) multiplicative_expr -> multiplicative_expr . TIMES parsed_times unary_expr
    (108) multiplicative_expr -> multiplicative_expr . DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> multiplicative_expr . MODULO parsed_modulo unary_expr

    LTHAN_EQUAL     reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    LTHAN           reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN_EQUAL     reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    GTHAN           reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    PLUS            reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    MINUS           reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    EQUAL           reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    NEQUAL          reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    AND             reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    SEMI            reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    OR              reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RPAREN          reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    COMMA           reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    RBRACKET        reduce using rule 103 (additive_expr -> additive_expr MINUS parsed_minus multiplicative_expr .)
    TIMES           shift and go to state 148
    DIVIDE          shift and go to state 149
    MODULO          shift and go to state 150


state 206

    (106) multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .

    TIMES           reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    DIVIDE          reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MODULO          reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN_EQUAL     reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    LTHAN           reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN_EQUAL     reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    GTHAN           reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    PLUS            reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    MINUS           reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    EQUAL           reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    NEQUAL          reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    AND             reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    SEMI            reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    OR              reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RPAREN          reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    COMMA           reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)
    RBRACKET        reduce using rule 106 (multiplicative_expr -> multiplicative_expr TIMES parsed_times unary_expr .)


state 207

    (108) multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .

    TIMES           reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    DIVIDE          reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MODULO          reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN_EQUAL     reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    LTHAN           reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN_EQUAL     reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    GTHAN           reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    PLUS            reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    MINUS           reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    EQUAL           reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    NEQUAL          reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    AND             reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    SEMI            reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    OR              reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RPAREN          reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    COMMA           reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)
    RBRACKET        reduce using rule 108 (multiplicative_expr -> multiplicative_expr DIVIDE parsed_divide unary_expr .)


state 208

    (110) multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .

    TIMES           reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    DIVIDE          reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MODULO          reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN_EQUAL     reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    LTHAN           reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN_EQUAL     reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    GTHAN           reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    PLUS            reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    MINUS           reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    EQUAL           reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    NEQUAL          reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    AND             reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    SEMI            reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    OR              reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RPAREN          reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    COMMA           reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)
    RBRACKET        reduce using rule 110 (multiplicative_expr -> multiplicative_expr MODULO parsed_modulo unary_expr .)


state 209

    (55) dim_access -> LBRACKET expr RBRACKET .

    LBRACKET        reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    ASGMT           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    LTHAN_EQUAL     reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    LTHAN           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    GTHAN_EQUAL     reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    GTHAN           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    NEQUAL          reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    AND             reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    OR              reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 55 (dim_access -> LBRACKET expr RBRACKET .)


state 210

    (57) function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .

    SEMI            reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    TIMES           reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    DIVIDE          reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    MODULO          reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    LTHAN_EQUAL     reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    LTHAN           reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    GTHAN_EQUAL     reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    GTHAN           reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    PLUS            reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    MINUS           reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    EQUAL           reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    NEQUAL          reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    AND             reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    OR              reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    RPAREN          reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    COMMA           reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)
    RBRACKET        reduce using rule 57 (function_call -> ID parsed_function_call_id LPAREN function_call_params RPAREN .)


state 211

    (60) function_call_params -> function_call_params COMMA . single_function_call_param
    (62) single_function_call_param -> . expr
    (83) expr -> . expr OR and_expr
    (84) expr -> . and_expr
    (85) and_expr -> . equality_expr AND equality_expr
    (86) and_expr -> . equality_expr
    (87) equality_expr -> . relational_expr EQUAL parsed_equal relational_expr
    (89) equality_expr -> . relational_expr NEQUAL parsed_nequal relational_expr
    (91) equality_expr -> . relational_expr
    (92) relational_expr -> . additive_expr LTHAN_EQUAL parsed_lthan_equal additive_expr
    (94) relational_expr -> . additive_expr LTHAN parsed_lthan additive_expr
    (96) relational_expr -> . additive_expr GTHAN_EQUAL parsed_gthan_equal additive_expr
    (98) relational_expr -> . additive_expr GTHAN parsed_gthan additive_expr
    (100) relational_expr -> . additive_expr
    (101) additive_expr -> . additive_expr PLUS parsed_plus multiplicative_expr
    (103) additive_expr -> . additive_expr MINUS parsed_minus multiplicative_expr
    (105) additive_expr -> . multiplicative_expr
    (106) multiplicative_expr -> . multiplicative_expr TIMES parsed_times unary_expr
    (108) multiplicative_expr -> . multiplicative_expr DIVIDE parsed_divide unary_expr
    (110) multiplicative_expr -> . multiplicative_expr MODULO parsed_modulo unary_expr
    (112) multiplicative_expr -> . unary_expr
    (113) unary_expr -> . MINUS postfix_expr
    (114) unary_expr -> . PLUS postfix_expr
    (115) unary_expr -> . NOT postfix_expr
    (116) unary_expr -> . postfix_expr
    (117) postfix_expr -> . LPAREN expr RPAREN
    (118) postfix_expr -> . variable_access
    (119) postfix_expr -> . function_call
    (120) postfix_expr -> . constant
    (50) variable_access -> . ID parsed_id_variable_access dims_access
    (57) function_call -> . ID parsed_function_call_id LPAREN function_call_params RPAREN
    (58) function_call -> . ID parsed_function_call_id LPAREN RPAREN
    (121) constant -> . CONST_INT
    (122) constant -> . CONST_REAL
    (123) constant -> . CONST_CHAR
    (124) constant -> . CONST_STRING
    (125) constant -> . constant_bool
    (126) constant_bool -> . TRUE
    (127) constant_bool -> . FALSE

    MINUS           shift and go to state 104
    PLUS            shift and go to state 102
    NOT             shift and go to state 107
    LPAREN          shift and go to state 108
    ID              shift and go to state 77
    CONST_INT       shift and go to state 112
    CONST_REAL      shift and go to state 113
    CONST_CHAR      shift and go to state 114
    CONST_STRING    shift and go to state 115
    TRUE            shift and go to state 117
    FALSE           shift and go to state 118

    single_function_call_param     shift and go to state 217
    expr                           shift and go to state 190
    and_expr                       shift and go to state 98
    equality_expr                  shift and go to state 99
    relational_expr                shift and go to state 100
    additive_expr                  shift and go to state 101
    multiplicative_expr            shift and go to state 103
    unary_expr                     shift and go to state 105
    postfix_expr                   shift and go to state 106
    variable_access                shift and go to state 109
    function_call                  shift and go to state 110
    constant                       shift and go to state 111
    constant_bool                  shift and go to state 116

state 212

    (74) while -> WHILE parsed_while LPAREN expr parsed_while_expr . RPAREN instruction_block

    RPAREN          shift and go to state 218


state 213

    (77) for -> FROM LPAREN for_initialization SEMI for_condition . SEMI for_update RPAREN instruction_block

    SEMI            shift and go to state 219


state 214

    (79) for_condition -> expr .
    (83) expr -> expr . OR and_expr

    SEMI            reduce using rule 79 (for_condition -> expr .)
    OR              shift and go to state 137


state 215

    (49) assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    IF              reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    ID              reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)
    FROM            reduce using rule 49 (assignment -> variable_access ASGMT READ LPAREN RPAREN SEMI .)


state 216

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block . ELSE parsed_else instruction_block
    (69) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .

    ELSE            shift and go to state 220
    RBRACE          reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    PRINT           reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    IF              reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    RETURN          reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    ID              reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    WHILE           reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)
    FROM            reduce using rule 69 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block .)


state 217

    (60) function_call_params -> function_call_params COMMA single_function_call_param .

    RPAREN          reduce using rule 60 (function_call_params -> function_call_params COMMA single_function_call_param .)
    COMMA           reduce using rule 60 (function_call_params -> function_call_params COMMA single_function_call_param .)


state 218

    (74) while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 221

state 219

    (77) for -> FROM LPAREN for_initialization SEMI for_condition SEMI . for_update RPAREN instruction_block
    (80) for_update -> . assignment_no_semi
    (48) assignment_no_semi -> . variable_access ASGMT expr
    (50) variable_access -> . ID parsed_id_variable_access dims_access

    ID              shift and go to state 163

    for_update                     shift and go to state 222
    assignment_no_semi             shift and go to state 223
    variable_access                shift and go to state 162

state 220

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE . parsed_else instruction_block
    (71) parsed_else -> .

    LBRACE          reduce using rule 71 (parsed_else -> .)

    parsed_else                    shift and go to state 224

state 221

    (74) while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .

    RBRACE          reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    PRINT           reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    IF              reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    RETURN          reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    ID              reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    WHILE           reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)
    FROM            reduce using rule 74 (while -> WHILE parsed_while LPAREN expr parsed_while_expr RPAREN instruction_block .)


state 222

    (77) for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update . RPAREN instruction_block

    RPAREN          shift and go to state 225


state 223

    (80) for_update -> assignment_no_semi .

    RPAREN          reduce using rule 80 (for_update -> assignment_no_semi .)


state 224

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 226

state 225

    (77) for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN . instruction_block
    (37) instruction_block -> . LBRACE statements RBRACE
    (38) instruction_block -> . LBRACE RBRACE

    LBRACE          shift and go to state 48

    instruction_block              shift and go to state 227

state 226

    (68) conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .

    RBRACE          reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    PRINT           reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    IF              reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    RETURN          reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    ID              reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    WHILE           reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)
    FROM            reduce using rule 68 (conditional -> IF LPAREN expr RPAREN parsed_if_expr instruction_block ELSE parsed_else instruction_block .)


state 227

    (77) for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .

    RBRACE          reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)
    PRINT           reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)
    IF              reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)
    RETURN          reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)
    ID              reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)
    WHILE           reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)
    FROM            reduce using rule 77 (for -> FROM LPAREN for_initialization SEMI for_condition SEMI for_update RPAREN instruction_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 4 resolved as shift
WARNING: shift/reduce conflict for START in state 7 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 119 resolved as shift
